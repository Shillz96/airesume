Implementation
Since your components (ResumeExperienceSection, ResumeEducationSection, ResumeSkillsSection, ResumeProjectsSection) already handle updates via onUpdate callbacks, they should already allow editing of their respective items (e.g., job titles, descriptions, etc.). To confirm:

Ensure each component renders editable fields (e.g., Input, Textarea) for all relevant properties.
Verify that the onUpdate callbacks correctly update the resume state.
For example, in ResumeExperienceSection, you might have something like this (if not already implemented):

jsx

Collapse

Unwrap

Copy
const ResumeExperienceSection = ({ experiences, onUpdate }) => {
  const handleChange = (index, field, value) => {
    const updatedExperiences = [...experiences];
    updatedExperiences[index] = { ...updatedExperiences[index], [field]: value };
    onUpdate(updatedExperiences);
  };

  return (
    <div>
      {experiences.map((exp, index) => (
        <div key={exp.id} className="mb-4">
          <Input
            value={exp.title}
            onChange={(e) => handleChange(index, 'title', e.target.value)}
            placeholder="Job Title"
          />
          <Textarea
            value={exp.description}
            onChange={(e) => handleChange(index, 'description', e.target.value)}
            placeholder="Description"
          />
          {/* Other fields */}
        </div>
      ))}
    </div>
  );
};
Action: If these components don’t already include editable fields, modify them to use Input and Textarea components, wiring them to the onUpdate prop as shown. Your existing handleExperienceUpdate, handleEducationUpdate, etc., will handle state updates.

2. Rearranging Sections
Currently, your sections (Experience, Education, Skills, Projects) are rendered in a fixed order in the preview and listed statically in the sidebar. Let’s make them rearrangeable.

Steps
Add Section Order to Resume State:
Extend the Resume interface to include a sectionOrder field.
Initialize it with a default order.
Make Sidebar Sections Draggable:
Use react-beautiful-dnd to allow reordering of section buttons in the sidebar.
Update the sectionOrder state when sections are reordered.
Reflect Order in Preview:
Modify ResumePreviewComponent to render sections based on sectionOrder.
Code Modifications
Update Resume Interface
In your Resume interface (likely defined in resume-template.tsx), add:

typescript

Collapse

Unwrap

Copy
interface Resume {
  id: string;
  title: string;
  personalInfo: {
    firstName: string;
    lastName: string;
    email: string;
    phone: string;
    headline: string;
    summary: string;
  };
  experience: ExperienceItem[];
  education: EducationItem[];
  skills: SkillItem[];
  projects: ProjectItem[];
  template: string;
  skillsDisplayMode: string;
  sectionOrder: string[]; // Add this
}
Update the initial resume state in ResumeBuilder:

jsx

Collapse

Unwrap

Copy
const [resume, setResume] = useState<Resume>({
  id: '',
  title: 'My Resume',
  personalInfo: {
    firstName: '',
    lastName: '',
    email: '',
    phone: '',
    headline: '',
    summary: '',
  },
  experience: [],
  education: [],
  skills: [],
  projects: [],
  template: 'professional',
  skillsDisplayMode: 'bubbles',
  sectionOrder: ['experience', 'education', 'skills', 'projects'], // Default order
});
Ensure loaded resumes include sectionOrder:

jsx

Collapse

Unwrap

Copy
const { isLoading: isLoadingResume } = useQuery({
  // ...
  queryFn: async () => {
    // ...
    if (resumeId === 'new') {
      // Handle session data as before, adding sectionOrder
      const resumeData = {
        ...sessionData.resume,
        experience: sessionData.resume.experience || [],
        education: sessionData.resume.education || [],
        skills: sessionData.resume.skills || [],
        projects: sessionData.resume.projects || [],
        template: sessionData.resume.template || 'professional',
        skillsDisplayMode: sessionData.resume.skillsDisplayMode || 'bubbles',
        sectionOrder: sessionData.resume.sectionOrder || ['experience', 'education', 'skills', 'projects'],
      };
      setResume(resumeData);
      return null;
    }
    // For existing resumes
    const res = await apiRequest('GET', `/api/resumes/${resumeId}`);
    const data = await res.json();
    const resumeData = {
      ...data,
      experience: data.experience || [],
      education: data.education || [],
      skills: data.skills || [],
      projects: data.projects || [],
      template: data.template || 'professional',
      skillsDisplayMode: data.skillsDisplayMode || 'bubbles',
      sectionOrder: data.sectionOrder || ['experience', 'education', 'skills', 'projects'],
    };
    setResume(resumeData);
    return data;
  },
  // ...
});
Make Sidebar Draggable
Wrap the entire editing area with a single DragDropContext to manage both section reordering and item reordering within sections. Move the DragDropContext from individual sections to the top level:

jsx

Collapse

Unwrap

Copy
{showPreview ? (
  <ResumePreviewComponent 
    resume={resume} 
    onTemplateChange={handleTemplateChange}
    onDownload={handleDownloadResume}
    onToggleSkillsDisplay={toggleSkillsDisplay}
    onSmartAdjust={handleSmartAdjust}
    onEdit={() => togglePreviewMode()}
  />
) : (
  <DragDropContext onDragEnd={handleDragEnd}>
    <div className="flex flex-col xl:flex-row gap-6">
      {/* Sidebar */}
      <div className="xl:w-64 shrink-0">
        <div className="bg-[rgba(10,15,40,0.5)] backdrop-blur-sm rounded-lg border border-indigo-900/30 p-4 sticky top-24">
          <h3 className="text-lg font-medium mb-4 text-blue-300">Resume Sections</h3>
          <div className="space-y-2">
            {/* Fixed sections */}
            <Button
              variant={currentTab === "contact" ? "default" : "ghost"}
              className={cn(
                "w-full justify-start",
                currentTab === "contact"
                  ? "bg-gradient-to-r from-blue-600 to-purple-600 text-white"
                  : "text-blue-300 hover:text-blue-200 hover:bg-blue-900/30"
              )}
              onClick={() => {
                setCurrentTab("contact");
                setShowPersonalInfo(true);
              }}
            >
              <User className="mr-2 h-4 w-4" />
              Personal Info
            </Button>
            <Button
              variant={currentTab === "summary" ? "default" : "ghost"}
              className={cn(
                "w-full justify-start",
                currentTab === "summary"
                  ? "bg-gradient-to-r from-blue-600 to-purple-600 text-white"
                  : "text-blue-300 hover:text-blue-200 hover:bg-blue-900/30"
              )}
              onClick={() => {
                setCurrentTab("summary");
                setShowPersonalInfo(true);
              }}
            >
              <FileText className="mr-2 h-4 w-4" />
              Professional Summary
            </Button>
            {/* Draggable sections */}
            <Droppable droppableId="main-sections" type="main-section">
              {(provided) => (
                <div {...provided.droppableProps} ref={provided.innerRef} className="space-y-2">
                  {resume.sectionOrder.map((section, index) => (
                    <Draggable key={section} draggableId={section} index={index}>
                      {(provided) => (
                        <div
                          ref={provided.innerRef}
                          {...provided.draggableProps}
                          {...provided.dragHandleProps}
                        >
                          <Button
                            variant={currentTab === section ? "default" : "ghost"}
                            className={cn(
                              "w-full justify-start",
                              currentTab === section
                                ? "bg-gradient-to-r from-blue-600 to-purple-600 text-white"
                                : "text-blue-300 hover:text-blue-200 hover:bg-blue-900/30"
                            )}
                            onClick={() => {
                              setCurrentTab(section);
                              setShowPersonalInfo(false);
                            }}
                          >
                            {section === 'experience' && <Briefcase className="mr-2 h-4 w-4" />}
                            {section === 'education' && <GraduationCap className="mr-2 h-4 w-4" />}
                            {section === 'skills' && <Code className="mr-2 h-4 w-4" />}
                            {section === 'projects' && <FolderKanban className="mr-2 h-4 w-4" />}
                            {section.charAt(0).toUpperCase() + section.slice(1)}
                            {resume[section].length > 0 && (
                              <Badge className="ml-auto bg-blue-700">{resume[section].length}</Badge>
                            )}
                          </Button>
                        </div>
                      )}
                    </Draggable>
                  ))}
                  {provided.placeholder}
                </div>
              )}
            </Droppable>
          </div>
          {/* Rest of sidebar */}
        </div>
      </div>
      {/* Main editing area */}
      <div className="flex-1 flex flex-col-reverse xl:flex-row gap-6">
        <div className="flex-1">
          {/* ... Personal Info and other sections ... */}
          {currentTab === "experience" && !showPersonalInfo && (
            <Droppable droppableId="experience" type="experience">
              {(provided) => (
                <div {...provided.droppableProps} ref={provided.innerRef} className="space-y-4">
                  <ResumeExperienceSection experiences={resume.experience} onUpdate={handleExperienceUpdate} />
                  {provided.placeholder}
                </div>
              )}
            </Droppable>
          )}
          {/* Similarly adjust other sections */}
        </div>
        {/* AI Assistant */}
      </div>
    </div>
  </DragDropContext>
)}
Update handleDragEnd
Extend the handleDragEnd function to handle section reordering:

jsx

Collapse

Unwrap

Copy
const handleDragEnd = (result: DropResult) => {
  if (!result.destination) return;

  const sourceIndex = result.source.index;
  const destinationIndex = result.destination.index;

  if (sourceIndex === destinationIndex) return;

  const updatedResume = { ...resume };

  if (result.type === 'main-section') {
    const newOrder = [...resume.sectionOrder];
    const [removed] = newOrder.splice(sourceIndex, 1);
    newOrder.splice(destinationIndex, 0, removed);
    updatedResume.sectionOrder = newOrder;
  } else if (result.type === 'experience') {
    const items = [...updatedResume.experience];
    const [removed] = items.splice(sourceIndex, 1);
    items.splice(destinationIndex, 0, removed);
    updatedResume.experience = items;
  } else if (result.type === 'education') {
    const items = [...updatedResume.education];
    const [removed] = items.splice(sourceIndex, 1);
    items.splice(destinationIndex, 0, removed);
    updatedResume.education = items;
  } else if (result.type === 'skills') {
    const items = [...updatedResume.skills];
    const [removed] = items.splice(sourceIndex, 1);
    items.splice(destinationIndex, 0, removed);
    updatedResume.skills = items;
  } else if (result.type === 'projects') {
    const items = [...updatedResume.projects];
    const [removed] = items.splice(sourceIndex, 1);
    items.splice(destinationIndex, 0, removed);
    updatedResume.projects = items;
  }

  setResume(updatedResume);
};
Update ResumePreviewComponent
Modify ResumePreviewComponent to render sections dynamically based on sectionOrder. Assuming it currently renders sections in a fixed order, update it like this:

jsx

Collapse

Unwrap

Copy
// In ResumePreviewComponent.tsx
const ResumePreviewComponent = ({ resume, onTemplateChange, onDownload, onToggleSkillsDisplay, onSmartAdjust, onEdit }) => {
  const resumeContentRef = useRef<HTMLDivElement>(null);

  // Template mapping
  const templates = {
    professional: ProfessionalTemplate,
    creative: CreativeTemplate,
    executive: ExecutiveTemplate,
    modern: ModernTemplate,
    minimal: MinimalTemplate,
    industry: IndustryTemplate,
    bold: BoldTemplate,
  };

  const TemplateComponent = templates[resume.template] || ProfessionalTemplate;

  return (
    <div className="flex-1 w-full max-w-4xl">
      <div className="mb-4 flex justify-between items-center">
        {/* Preview controls */}
        <Button onClick={onEdit}>Edit</Button>
        <Button onClick={onDownload}>
          <Download className="mr-2 h-4 w-4" />
          Download PDF
        </Button>
      </div>
      <div ref={resumeContentRef} className="resume bg-white text-black p-6 rounded-lg shadow-lg">
        <TemplateComponent resume={resume}>
          <div className="section">
            <h1>{resume.personalInfo.firstName} {resume.personalInfo.lastName}</h1>
            <p>{resume.personalInfo.headline}</p>
            <div className="contact-info">
              <span>{resume.personalInfo.email}</span> | <span>{resume.personalInfo.phone}</span>
            </div>
          </div>
          <div className="section">
            <h2>Professional Summary</h2>
            <p>{resume.personalInfo.summary}</p>
          </div>
          {resume.sectionOrder.map((section) => (
            <div className="section" key={section}>
              {section === 'experience' && (
                <ResumeExperienceSection experiences={resume.experience} onUpdate={() => {}} previewMode />
              )}
              {section === 'education' && (
                <ResumeEducationSection education={resume.education} onUpdate={() => {}} previewMode />
              )}
              {section === 'skills' && (
                <ResumeSkillsSection skills={resume.skills} onUpdate={() => {}} previewMode displayMode={resume.skillsDisplayMode} />
              )}
              {section === 'projects' && (
                <ResumeProjectsSection projects={resume.projects} onUpdate={() => {}} previewMode />
              )}
            </div>
          ))}
        </TemplateComponent>
      </div>
    </div>
  );
};
Note: Add a previewMode prop to your section components to render them as static content instead of editable forms in preview mode.

3. Marking Page Breaks
To show where page breaks occur in the preview, calculate section heights and insert visual indicators.

Steps
Add a Ref to Preview Content: Already present as resumeContentRef.
Calculate Page Breaks: Use a function to determine where breaks occur based on a fixed page height.
Add a Button to Update Breaks: Allow manual updates after editing.
Code Modifications
Update ResumePreviewComponent
Add a page break calculation function and button:

jsx

Collapse

Unwrap

Copy
const ResumePreviewComponent = ({ resume, onTemplateChange, onDownload, onToggleSkillsDisplay, onSmartAdjust, onEdit }) => {
  const resumeContentRef = useRef<HTMLDivElement>(null);

  const updatePageBreaks = () => {
    if (!resumeContentRef.current) return;

    // Remove existing page breaks
    const existingBreaks = resumeContentRef.current.querySelectorAll('.page-break');
    existingBreaks.forEach((el) => el.remove());

    const pageHeight = 1056; // 11in at 96dpi, adjust as needed
    const sections = resumeContentRef.current.querySelectorAll('.section');
    let currentHeight = 0;

    sections.forEach((section, index) => {
      const sectionHeight = section.offsetHeight;
      if (currentHeight + sectionHeight > pageHeight) {
        const pageBreak = document.createElement('div');
        pageBreak.className = 'page-break';
        pageBreak.textContent = 'Page Break';
        section.parentNode.insertBefore(pageBreak, section);
        currentHeight = sectionHeight;
      } else {
        currentHeight += sectionHeight;
      }
    });
  };

  // Run initially and on resume changes
  useEffect(() => {
    updatePageBreaks();
  }, [resume]);

  return (
    <div className="flex-1 w-full max-w-4xl">
      <div className="mb-4 flex justify-between items-center">
        <Button onClick={onEdit}>Edit</Button>
        <Button onClick={updatePageBreaks}>
          <RefreshCw className="mr-2 h-4 w-4" />
          Update Page Breaks
        </Button>
        <Button onClick={onDownload}>
          <Download className="mr-2 h-4 w-4" />
          Download PDF
        </Button>
      </div>
      <div ref={resumeContentRef} className="resume bg-white text-black p-6 rounded-lg shadow-lg">
        {/* Template and sections as above */}
      </div>
    </div>
  );
};
Add CSS
In your global CSS or a stylesheet:

css

Collapse

Unwrap

Copy
.page-break {
  border-top: 1px dashed #ccc;
  text-align: center;
  color: #999;
  margin: 10px 0;
  font-size: 10pt;
}
Note: This is a basic approximation. For precise page breaks, consider integrating a PDF rendering library like react-pdf, but this solution meets the requirement for a visual indicator in the preview.

Final Notes
Editing: Your sections are likely already editable; confirm and enhance if needed.
Rearranging: The sidebar now controls section order, reflected in the preview.
Page Breaks: Visual indicators are added with a manual update option.