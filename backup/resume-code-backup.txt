# Resume-related code backup
## 1. Main Resume Pages
### resume-builder.tsx
```tsx
import React, { useState, useRef, useEffect } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { cn } from "@/lib/utils";
import { useTheme } from "@/contexts/ThemeContext";
import PageHeader from "@/components/page-header";

// Resume components
import ResumeTips from "@/components/resume-tips";
import Navbar from "@/components/navbar";
import ResumeTemplate, {
  ProfessionalTemplate,
  CreativeTemplate,
  ExecutiveTemplate,
  ModernTemplate,
  MinimalTemplate,
  IndustryTemplate,
  BoldTemplate,
  TemplatePreviewProfessional,
  TemplatePreviewCreative,
  TemplatePreviewExecutive,
  TemplatePreviewModern,
  TemplatePreviewMinimal,
  TemplatePreviewIndustry,
  TemplatePreviewBold,
} from "@/components/resume-template";

// Import our modular resume section components
import { PersonalInfoSection } from "@/components/resume/PersonalInfoSection";
import { ExperienceSection } from "@/components/resume/ExperienceSection";
import { EducationSection } from "@/components/resume/EducationSection";
import { SkillsSection } from "@/components/resume/SkillsSection";
import { ProjectsSection } from "@/components/resume/ProjectsSection";

// Keep legacy imports for now to ensure backward compatibility during refactoring
import {
  ResumeExperienceSection,
  ResumeEducationSection,
  ResumeSkillsSection,
  ResumeProjectsSection,
  ExperienceItem,
  EducationItem,
  SkillItem,
  ProjectItem,
} from "@/components/resume-section";
import { Resume } from "@/components/resume-template";

// UI Components
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { CosmicButton } from "@/components/cosmic-button-refactored";
import RichTextEditor from "@/components/rich-text-editor";

// Icons
import {
  FileText,
  GraduationCap,
  Briefcase,
  Code,
  Award,
  FolderKanban,
  FolderOpen,
  Save,
  Upload,
  Loader2,
  Cpu,
  Check,
  RefreshCw,
  Sparkles,
  Plus,
  Maximize2,
  Printer,
  ChevronDown,
  Download,
  Minus,
  User,
  X,
  Zap,
} from "lucide-react";

// UI Components
import { Badge } from "@/components/ui/badge";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@/components/ui/collapsible";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
  DialogClose,
} from "@/components/ui/dialog";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";

// AI and Background Components
import AIAssistant from "@/components/ai-assistant";
// Using global theme from cosmic-theme.css instead of custom starfield

// Component for professional summary AI suggestions
interface SummarySuggestionsProps {
  resumeId: string;
  onApply: (summary: string) => void;
}

type SummaryLength = "short" | "medium" | "long";

function SummarySuggestions({ resumeId, onApply }: SummarySuggestionsProps) {
  const { toast } = useToast();
  const [isGenerating, setIsGenerating] = useState(false);
  const [summaries, setSummaries] = useState<string[]>([]);
  const [lastUsedLength, setLastUsedLength] = useState<SummaryLength>("medium");
  const [generationCount, setGenerationCount] = useState(0);
  const [refreshCount, setRefreshCount] = useState<
    Record<SummaryLength, number>
  >({
    short: 0,
    medium: 0,
    long: 0,
  });

  // Generate AI summaries with length option
  const handleGenerateSummaries = async (length: SummaryLength = "medium") => {
    setIsGenerating(true);

    // Reset refresh count if changing length type
    if (lastUsedLength !== length) {
      setLastUsedLength(length);
      setGenerationCount((prev) => prev + 1);
      setRefreshCount((prev) => ({ ...prev, [length]: 0 }));
    } else {
      // Increment refresh count for this length type
      const newRefreshCount = refreshCount[length] + 1;

      // Only allow up to 5 refreshes per length type
      if (newRefreshCount <= 5) {
        setRefreshCount((prev) => ({ ...prev, [length]: newRefreshCount }));
        setGenerationCount((prev) => prev + 1);
      } else {
        toast({
          title: "Refresh limit reached",
          description:
            "You've reached the maximum number of refreshes. Try a different length option.",
          variant: "default",
        });
        setIsGenerating(false);
        return;
      }
    }

    // Generate sample summaries based on resume content
    const getFallbackSummaries = (length: SummaryLength) => {
      // Short summaries
      if (length === "short") {
        return [
          "Skilled professional with a proven track record in delivering high-impact solutions.",
          "Results-oriented professional with expertise in strategic planning and execution.",
          "Dynamic professional with strong technical and communication skills.",
        ];
      }
      // Long summaries
      else if (length === "long") {
        return [
          "Accomplished professional with extensive experience driving innovation and operational excellence. Demonstrates exceptional ability to identify opportunities for improvement and implement strategic solutions that enhance business performance. Combines technical expertise with strong leadership capabilities to guide teams through complex projects and initiatives.",
          "Results-driven professional with a comprehensive background in developing and implementing strategic initiatives. Skilled at translating business requirements into effective solutions while maintaining a focus on quality and efficiency. Recognized for ability to collaborate across departments and deliver measurable improvements to organizational processes.",
          "Versatile professional with a proven track record of success across multiple domains. Leverages deep technical knowledge and business acumen to drive transformative change and achieve ambitious goals. Excels at building relationships with stakeholders at all levels and communicating complex concepts in accessible terms.",
        ];
      }
      // Medium summaries (default)
      else {
        return [
          "Accomplished professional with a proven track record of delivering innovative solutions. Adept at leveraging expertise to drive business outcomes and optimize processes.",
          "Results-driven professional combining technical knowledge with strong communication skills. Committed to continuous improvement and delivering high-quality work that exceeds expectations.",
          "Versatile and dedicated professional with strong problem-solving abilities. Effectively balances technical excellence with business requirements to create impactful solutions.",
        ];
      }
    };

    // If we have a valid resumeId (not "new" and not null), try to get AI suggestions
    if (resumeId && resumeId !== "new") {
      try {
        // Use the summaryOnly parameter to get complete summary rewrites
        // Add length parameter and randomSeed to ensure we get different results each time
        const res = await apiRequest(
          "GET",
          `/api/resumes/${resumeId}/suggestions?summaryOnly=true&length=${length}&seed=${generationCount}`,
        );
        const data = await res.json();

        if (
          data.success &&
          data.suggestions &&
          Array.isArray(data.suggestions)
        ) {
          setSummaries(data.suggestions.slice(0, 3));
          setIsGenerating(false);
          return;
        }
      } catch (error) {
        console.error("Error generating summaries:", error);
      }
    }

    // If we get here, either the API call failed or we don't have a valid resumeId
    // Use the fallback summaries
    setSummaries(getFallbackSummaries(length));
    setIsGenerating(false);
  };

  return (
    <div>
      {summaries.length === 0 ? (
        <div className="space-y-4 py-3">
          <div className="text-center">
            <h4 className="text-sm font-medium text-blue-300 mb-2">
              Choose Summary Length
            </h4>
            <div className="flex space-x-2 mb-4">
              <Button
                onClick={() => handleGenerateSummaries("short")}
                disabled={isGenerating}
                variant="outline"
                size="sm"
                className="flex-1 border-blue-500/30 text-blue-200 hover:bg-blue-900/30 hover:text-blue-100"
              >
                Short
              </Button>
              <Button
                onClick={() => handleGenerateSummaries("medium")}
                disabled={isGenerating}
                variant="outline"
                size="sm"
                className="flex-1 border-blue-500/30 text-blue-200 hover:bg-blue-900/30 hover:text-blue-100"
              >
                Medium
              </Button>
              <Button
                onClick={() => handleGenerateSummaries("long")}
                disabled={isGenerating}
                variant="outline"
                size="sm"
                className="flex-1 border-blue-500/30 text-blue-200 hover:bg-blue-900/30 hover:text-blue-100"
              >
                Long
              </Button>
            </div>
          </div>

          <Button
            onClick={() => handleGenerateSummaries("medium")}
            disabled={isGenerating}
            variant="outline"
            className="w-full flex items-center justify-center gap-2 bg-[rgba(20,30,70,0.6)] border-blue-500/30 text-blue-100"
          >
            {isGenerating ? (
              <>
                <Loader2 className="h-4 w-4 animate-spin" />
                Generating summaries...
              </>
            ) : (
              <>
                <Sparkles className="h-4 w-4" />
                Generate AI summaries
              </>
            )}
          </Button>
        </div>
      ) : (
        <div className="space-y-3">
          {summaries.map((summary, index) => (
            <div
              key={index}
              className="bg-[rgba(20,30,70,0.6)] p-3 rounded-md border border-blue-500/30 text-sm relative group backdrop-blur-sm"
            >
              <p className="text-gray-200">{summary}</p>
              <Button
                onClick={() => onApply(summary)}
                size="sm"
                className="mt-2 w-full flex items-center justify-center gap-1 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 border-0"
              >
                <Check className="h-3 w-3" />
                Use this summary
              </Button>
            </div>
          ))}
          <div className="flex space-x-2">
            <Button
              onClick={() => handleGenerateSummaries("short")}
              variant="ghost"
              size="sm"
              className="flex-1 items-center justify-center text-blue-400 hover:text-blue-300 hover:bg-blue-900/30"
            >
              <RefreshCw className="h-3 w-3 mr-1" />
              Short
            </Button>
            <Button
              onClick={() => handleGenerateSummaries("medium")}
              variant="ghost"
              size="sm"
              className="flex-1 items-center justify-center text-blue-400 hover:text-blue-300 hover:bg-blue-900/30"
            >
              <RefreshCw className="h-3 w-3 mr-1" />
              Medium
            </Button>
            <Button
              onClick={() => handleGenerateSummaries("long")}
              variant="ghost"
              size="sm"
              className="flex-1 items-center justify-center text-blue-400 hover:text-blue-300 hover:bg-blue-900/30"
            >
              <RefreshCw className="h-3 w-3 mr-1" />
              Long
            </Button>
          </div>
        </div>
      )}
    </div>
  );
}

// Component for experience bullet point AI suggestions
interface ExperienceSuggestionsProps {
  resumeId: string;
  jobTitle?: string;
  onApply: (bulletPoint: string) => void;
}

type BulletLength = "short" | "medium" | "long";

function ExperienceSuggestions({
  resumeId,
  jobTitle,
  onApply,
}: ExperienceSuggestionsProps) {
  const { toast } = useToast();
  const [isGenerating, setIsGenerating] = useState(false);
  const [bulletPoints, setBulletPoints] = useState<string[]>([]);
  const [lastUsedLength, setLastUsedLength] = useState<BulletLength>("medium");
  const [generationCount, setGenerationCount] = useState(0);
  const [refreshCount, setRefreshCount] = useState<
    Record<BulletLength, number>
  >({
    short: 0,
    medium: 0,
    long: 0,
  });

  // Generate AI bullet points for experience section with length options
  const handleGenerateBulletPoints = async (
    length: BulletLength = "medium",
  ) => {
    setIsGenerating(true);

    // Reset refresh count if changing length type
    if (lastUsedLength !== length) {
      setLastUsedLength(length);
      setGenerationCount((prev) => prev + 1);
      setRefreshCount((prev) => ({ ...prev, [length]: 0 }));
    } else {
      // Increment refresh count for this length type
      const newRefreshCount = refreshCount[length] + 1;

      // Only allow up to 5 refreshes per length type
      if (newRefreshCount <= 5) {
        setRefreshCount((prev) => ({ ...prev, [length]: newRefreshCount }));
        setGenerationCount((prev) => prev + 1);
      } else {
        toast({
          title: "Refresh limit reached",
          description:
            "You've reached the maximum number of refreshes. Try a different style option.",
          variant: "default",
        });
        setIsGenerating(false);
        return;
      }
    }

    // Generate fallback bullet points based on job title and length
    const getFallbackBulletPoints = (length: BulletLength) => {
      const jobTitle_safe = jobTitle || "professional";

      // Short bullet points
      if (length === "short") {
        return [
          `Improved ${jobTitle_safe} processes by 30%.`,
          `Led cross-functional teams to deliver key projects.`,
          `Reduced costs by 25% through strategic optimization.`,
          `Increased customer satisfaction scores to 95%.`,
          `Implemented innovative solutions with measurable results.`,
        ];
      }
      // Long bullet points
      else if (length === "long") {
        return [
          `Spearheaded a comprehensive overhaul of ${jobTitle_safe} processes, resulting in a 30% increase in operational efficiency while simultaneously reducing implementation costs by $150,000 annually and improving team morale through more streamlined workflows.`,
          `Led cross-functional team of 12 professionals in the successful delivery of 5 high-priority projects valued at $2.3M collectively, consistently meeting or exceeding stakeholder expectations while maintaining budget constraints and aggressive timeline requirements.`,
          `Implemented innovative ${jobTitle_safe} solutions that dramatically improved data processing capabilities by 45%, resulting in faster decision-making processes and enabling the business to respond more effectively to rapidly changing market conditions.`,
          `Developed and executed strategic initiatives that increased departmental productivity by 37% within the first quarter, recognized by senior leadership for exceptional performance and promoted to lead advanced projects with greater scope and complexity.`,
          `Redesigned critical ${jobTitle_safe} infrastructure, resulting in 99.9% uptime, a 28% reduction in maintenance costs, and significantly enhanced user experience as measured by a 40-point improvement in Net Promoter Score.`,
        ];
      }
      // Medium bullet points (default)
      else {
        return [
          `Implemented innovative solutions for ${jobTitle_safe} role, resulting in 35% efficiency improvement and $120K annual savings.`,
          `Led key projects as ${jobTitle_safe}, delivering results ahead of schedule and under budget while maintaining high quality standards.`,
          `Collaborated with cross-functional teams to enhance ${jobTitle_safe}-related processes, improving workflow efficiency by 28%.`,
          `Increased performance metrics by 40% through optimization of processes and implementation of best practices in the ${jobTitle_safe} department.`,
          `Developed and implemented testing protocols that reduced time by 25% while improving quality outcomes and customer satisfaction.`,
        ];
      }
    };

    // If we have a valid resumeId (not "new" and not null), try to get AI suggestions
    if (resumeId && resumeId !== "new") {
      try {
        // Use the experienceOnly parameter to get ATS-optimized bullet points
        let url = `/api/resumes/${resumeId}/suggestions?experienceOnly=true&length=${length}&seed=${generationCount}`;
        if (jobTitle) {
          url += `&jobTitle=${encodeURIComponent(jobTitle)}`;
        }

        const res = await apiRequest("GET", url);
        const data = await res.json();

        if (
          data.success &&
          data.suggestions &&
          Array.isArray(data.suggestions)
        ) {
          setBulletPoints(data.suggestions);
          setIsGenerating(false);
          return;
        }
      } catch (error) {
        console.error("Error generating experience bullet points:", error);
      }
    }

    // If we get here, either the API call failed or we don't have a valid resumeId
    setBulletPoints(getFallbackBulletPoints(length));
    setIsGenerating(false);
  };

  return (
    <div>
      {bulletPoints.length === 0 ? (
        <div className="space-y-4 py-3">
          <div className="text-center">
            <h4 className="text-sm font-medium text-blue-300 mb-2">
              Choose Bullet Point Style
            </h4>
            <div className="flex space-x-2 mb-4">
              <Button
                onClick={() => handleGenerateBulletPoints("short")}
                disabled={isGenerating}
                variant="outline"
                size="sm"
                className="flex-1 border-blue-500/30 text-blue-200 hover:bg-blue-900/30 hover:text-blue-100"
              >
                Concise
              </Button>
              <Button
                onClick={() => handleGenerateBulletPoints("medium")}
                disabled={isGenerating}
                variant="outline"
                size="sm"
                className="flex-1 border-blue-500/30 text-blue-200 hover:bg-blue-900/30 hover:text-blue-100"
              >
                Standard
              </Button>
              <Button
                onClick={() => handleGenerateBulletPoints("long")}
                disabled={isGenerating}
                variant="outline"
                size="sm"
                className="flex-1 border-blue-500/30 text-blue-200 hover:bg-blue-900/30 hover:text-blue-100"
              >
                Detailed
              </Button>
            </div>
          </div>

          <Button
            onClick={() => handleGenerateBulletPoints("medium")}
            disabled={isGenerating}
            variant="outline"
            className="w-full flex items-center justify-center gap-2 bg-[rgba(20,30,70,0.6)] border-blue-500/30 text-blue-100"
          >
            {isGenerating ? (
              <>
                <Loader2 className="h-4 w-4 animate-spin" />
                Generating bullet points...
              </>
            ) : (
              <>
                <Sparkles className="h-4 w-4" />
                Generate ATS-optimized bullet points
              </>
            )}
          </Button>
          <p className="text-xs text-gray-400 mt-2">
            Creates achievement-focused bullet points with keywords that ATS
            systems scan for
          </p>
        </div>
      ) : (
        <div className="space-y-3">
          {bulletPoints.map((bulletPoint, index) => (
            <div
              key={index}
              className="bg-[rgba(20,30,70,0.6)] p-3 rounded-md border border-blue-500/30 text-sm relative group backdrop-blur-sm"
            >
              <p className="text-gray-200">{bulletPoint}</p>
              <Button
                onClick={() => onApply(bulletPoint)}
                size="sm"
                className="mt-2 w-full flex items-center justify-center gap-1 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 border-0"
              >
                <Check className="h-3 w-3" />
                Use this bullet point
              </Button>
            </div>
          ))}
          <div className="flex space-x-2">
            <Button
              onClick={() => handleGenerateBulletPoints("short")}
              variant="ghost"
              size="sm"
              className="flex-1 items-center justify-center text-blue-400 hover:text-blue-300 hover:bg-blue-900/30"
            >
              <RefreshCw className="h-3 w-3 mr-1" />
              Concise
            </Button>
            <Button
              onClick={() => handleGenerateBulletPoints("medium")}
              variant="ghost"
              size="sm"
              className="flex-1 items-center justify-center text-blue-400 hover:text-blue-300 hover:bg-blue-900/30"
            >
              <RefreshCw className="h-3 w-3 mr-1" />
              Standard
            </Button>
            <Button
              onClick={() => handleGenerateBulletPoints("long")}
              variant="ghost"
              size="sm"
              className="flex-1 items-center justify-center text-blue-400 hover:text-blue-300 hover:bg-blue-900/30"
            >
              <RefreshCw className="h-3 w-3 mr-1" />
              Detailed
            </Button>
          </div>
        </div>
      )}
    </div>
  );
}

// Component for skills AI suggestions
interface SkillSuggestionsProps {
  resumeId: string;
  jobTitle?: string;
  onApply: (skill: string) => void;
}

type SkillsCategory = "technical" | "soft" | "industry";

function SkillSuggestions({
  resumeId,
  jobTitle,
  onApply,
}: SkillSuggestionsProps) {
  const { toast } = useToast();
  const [isGenerating, setIsGenerating] = useState(false);
  const [skills, setSkills] = useState<string[]>([]);
  const [lastUsedCategory, setLastUsedCategory] =
    useState<SkillsCategory>("technical");
  const [generationCount, setGenerationCount] = useState(0);
  const [refreshCount, setRefreshCount] = useState<
    Record<SkillsCategory, number>
  >({
    technical: 0,
    soft: 0,
    industry: 0,
  });

  // Generate AI skill suggestions with category options
  const handleGenerateSkills = async (
    category: SkillsCategory = "technical",
  ) => {
    setIsGenerating(true);

    // Reset refresh count if changing category type
    if (lastUsedCategory !== category) {
      setLastUsedCategory(category);
      setGenerationCount((prev) => prev + 1);
      setRefreshCount((prev) => ({ ...prev, [category]: 0 }));
    } else {
      // Increment refresh count for this category
      const newRefreshCount = refreshCount[category] + 1;

      // Only allow up to 5 refreshes per category
      if (newRefreshCount <= 5) {
        setRefreshCount((prev) => ({ ...prev, [category]: newRefreshCount }));
        setGenerationCount((prev) => prev + 1);
      } else {
        toast({
          title: "Refresh limit reached",
          description:
            "You've reached the maximum number of refreshes. Try a different skill category.",
          variant: "default",
        });
        setIsGenerating(false);
        return;
      }
    }

    // Generate fallback skills based on job title and category
    const getFallbackSkills = (category: SkillsCategory) => {
      const jobTitle_safe = jobTitle || "professional";

      // Technical skills
      if (category === "technical") {
        if (
          jobTitle_safe.toLowerCase().includes("developer") ||
          jobTitle_safe.toLowerCase().includes("engineer")
        ) {
          return [
            "JavaScript",
            "React",
            "Node.js",
            "TypeScript",
            "GraphQL",
            "AWS",
            "Docker",
            "CI/CD",
            "Git",
            "Agile Methodologies",
            "Python",
            "RESTful APIs",
            "SQL",
            "NoSQL",
            "Cloud Architecture",
          ];
        } else if (jobTitle_safe.toLowerCase().includes("design")) {
          return [
            "UI/UX Design",
            "Figma",
            "Adobe Creative Suite",
            "Wireframing",
            "Prototyping",
            "User Research",
            "Design Systems",
            "Typography",
            "Responsive Design",
            "Design Thinking",
            "Information Architecture",
          ];
        } else {
          return [
            "Microsoft Office",
            "SQL",
            "Database Management",
            "CRM Systems",
            "Business Intelligence",
            "Data Analysis",
            "Project Management Software",
            "ERP Systems",
            "Cloud Computing",
            "Digital Marketing Tools",
          ];
        }
      }
      // Soft skills
      else if (category === "soft") {
        return [
          "Communication",
          "Leadership",
          "Problem Solving",
          "Critical Thinking",
          "Teamwork",
          "Adaptability",
          "Time Management",
          "Emotional Intelligence",
          "Conflict Resolution",
          "Creativity",
          "Decision Making",
          "Active Listening",
        ];
      }
      // Industry-specific skills
      else {
        if (
          jobTitle_safe.toLowerCase().includes("developer") ||
          jobTitle_safe.toLowerCase().includes("engineer")
        ) {
          return [
            "Machine Learning",
            "Blockchain",
            "AR/VR Development",
            "IoT",
            "Cybersecurity",
            "DevOps",
            "Microservices",
            "Serverless Architecture",
            "API Gateway",
            "Kubernetes",
            "Containerization",
          ];
        } else if (jobTitle_safe.toLowerCase().includes("design")) {
          return [
            "Motion Graphics",
            "Augmented Reality Design",
            "Interaction Design",
            "Design Strategy",
            "Accessibility",
            "Brand Strategy",
            "Visual Identity",
            "UX Writing",
            "Product Design",
            "Design Sprints",
          ];
        } else if (jobTitle_safe.toLowerCase().includes("manager")) {
          return [
            "Agile Management",
            "Strategic Planning",
            "Stakeholder Management",
            "KPI Development",
            "Operational Excellence",
            "Change Management",
            "Risk Management",
            "Vendor Management",
            "Budget Forecasting",
          ];
        } else {
          return [
            "Industry Standards",
            "Regulatory Compliance",
            "Market Analysis",
            "Forecasting",
            "Process Optimization",
            "Quality Assurance",
            "Benchmarking",
            "Continuous Improvement",
            "Six Sigma",
          ];
        }
      }
    };

    // If we have a valid resumeId (not "new" and not null), try to get AI suggestions
    if (resumeId && resumeId !== "new") {
      try {
        // Use the skillsOnly parameter to get ATS-optimized skills
        // Add category parameter and randomSeed to ensure we get different results each time
        let url = `/api/resumes/${resumeId}/suggestions?skillsOnly=true&category=${category}&seed=${generationCount}`;
        if (jobTitle) {
          url += `&jobTitle=${encodeURIComponent(jobTitle)}`;
        }

        const res = await apiRequest("GET", url);
        const data = await res.json();

        if (
          data.success &&
          data.suggestions &&
          Array.isArray(data.suggestions)
        ) {
          setSkills(data.suggestions);
          setIsGenerating(false);
          return;
        }
      } catch (error) {
        console.error("Error generating skill suggestions:", error);
      }
    }

    // If we get here, either the API call failed or we don't have a valid resumeId
    setSkills(getFallbackSkills(category));
    setIsGenerating(false);
  };

  return (
    <div>
      {skills.length === 0 ? (
        <div className="space-y-4 py-3">
          <div className="text-center">
            <h4 className="text-sm font-medium text-blue-300 mb-2">
              Choose Skill Categories
            </h4>
            <div className="flex space-x-2 mb-4">
              <Button
                onClick={() => handleGenerateSkills("technical")}
                disabled={isGenerating}
                variant="outline"
                size="sm"
                className="flex-1 border-blue-500/30 text-blue-200 hover:bg-blue-900/30 hover:text-blue-100"
              >
                Technical
              </Button>
              <Button
                onClick={() => handleGenerateSkills("soft")}
                disabled={isGenerating}
                variant="outline"
                size="sm"
                className="flex-1 border-blue-500/30 text-blue-200 hover:bg-blue-900/30 hover:text-blue-100"
              >
                Soft Skills
              </Button>
              <Button
                onClick={() => handleGenerateSkills("industry")}
                disabled={isGenerating}
                variant="outline"
                size="sm"
                className="flex-1 border-blue-500/30 text-blue-200 hover:bg-blue-900/30 hover:text-blue-100"
              >
                Industry
              </Button>
            </div>
          </div>

          <Button
            onClick={() => handleGenerateSkills("technical")}
            disabled={isGenerating}
            variant="outline"
            className="w-full flex items-center justify-center gap-2 bg-[rgba(20,30,70,0.6)] border-blue-500/30 text-blue-100"
          >
            {isGenerating ? (
              <>
                <Loader2 className="h-4 w-4 animate-spin" />
                Generating skills...
              </>
            ) : (
              <>
                <Sparkles className="h-4 w-4" />
                Generate ATS-friendly skills
              </>
            )}
          </Button>
          <p className="text-xs text-gray-400 mt-2">
            Suggests skills that align with your experience and are frequently
            scanned by ATS systems
          </p>
        </div>
      ) : (
        <div>
          <div className="flex flex-wrap gap-2 mb-3">
            {skills.map((skill, index) => (
              <Badge
                key={index}
                variant="outline"
                className="py-1 px-3 cursor-pointer hover:bg-blue-600/30 flex items-center gap-1 bg-[rgba(20,30,70,0.6)] text-blue-100 border-blue-500/30 backdrop-blur-sm"
                onClick={() => onApply(skill)}
              >
                {skill}
                <span className="text-xs text-blue-400">
                  <Plus className="h-3 w-3" />
                </span>
              </Badge>
            ))}
          </div>
          <div className="flex space-x-2">
            <Button
              onClick={() => handleGenerateSkills("technical")}
              variant="ghost"
              size="sm"
              className="flex-1 items-center justify-center text-blue-400 hover:text-blue-300 hover:bg-blue-900/30"
            >
              <RefreshCw className="h-3 w-3 mr-1" />
              Technical
            </Button>
            <Button
              onClick={() => handleGenerateSkills("soft")}
              variant="ghost"
              size="sm"
              className="flex-1 items-center justify-center text-blue-400 hover:text-blue-300 hover:bg-blue-900/30"
            >
              <RefreshCw className="h-3 w-3 mr-1" />
              Soft Skills
            </Button>
            <Button
              onClick={() => handleGenerateSkills("industry")}
              variant="ghost"
              size="sm"
              className="flex-1 items-center justify-center text-blue-400 hover:text-blue-300 hover:bg-blue-900/30"
            >
              <RefreshCw className="h-3 w-3 mr-1" />
              Industry
            </Button>
          </div>
        </div>
      )}
    </div>
  );
}

// ... (previous imports remain unchanged)

// Preview component for the "Preview" section
// This component has been replaced by ResumePreviewComponent

function ResumePreviewComponent({ resume, onTemplateChange, onDownload }: { resume: Resume; onTemplateChange: (template: string) => void; onDownload?: () => void }) {
  // Local state for downloading
  const [isDownloading, setIsDownloading] = useState(false);
  
  // Function to handle download with progress indicator
  const handleDownload = async () => {
    if (isDownloading) return; // Prevent multiple clicks
    
    setIsDownloading(true);
    
    try {
      if (onDownload) {
        await onDownload();
      } else {
        // Fallback to print dialog if no download function provided
        window.print();
      }
    } catch (error) {
      console.error('Download error:', error);
      // Fallback to print dialog
      window.print();
    } finally {
      setIsDownloading(false);
    }
  };
  // Calculate an initial scale that will fit most resumes in the viewport
  // Starting with 0.85 instead of 1.0 to show more content initially
  const [scale, setScale] = useState(0.85); 
  const [isFullScreen, setIsFullScreen] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [isAutoAdjusting, setIsAutoAdjusting] = useState(false);
  const [editedResume, setEditedResume] = useState<Resume>(resume);
  const [fontScale, setFontScale] = useState(1); // For auto-adjusting font size
  const [spacingScale, setSpacingScale] = useState(1); // For auto-adjusting spacing
  const previewRef = useRef<HTMLDivElement>(null);
  const resumeContainerRef = useRef<HTMLDivElement>(null);
  const { toast } = useToast();

  // Generate actual PDF file for download
  const downloadResume = async () => {
    try {
      // First set optimal settings for PDF generation
      const originalScale = scale;
      const originalFontScale = fontScale;
      const originalSpacingScale = spacingScale;
      
      // Set to 100% scale, reset font and spacing scales to 1
      setScale(1.0);
      setFontScale(1);
      setSpacingScale(1);
      
      // Add a loading toast to show progress
      toast({
        title: "Preparing PDF",
        description: "Optimizing your resume for PDF download...",
      });
      
      // Wait for the scale changes to apply
      setTimeout(async () => {
        if (!previewRef.current) return;
        
        // Create a virtual link element
        const link = document.createElement('a');
        
        // Generate a filename with the person's name (if available) or a default name
        const name = resume?.personalInfo?.firstName && resume?.personalInfo?.lastName ? 
          `${resume.personalInfo.firstName}_${resume.personalInfo.lastName}` : 
          'Resume';
        const fileName = `${name.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.pdf`;
        
        // Try server-side PDF generation first, then fall back to print dialog
        try {
          // Create a form to send to the server for PDF generation
          const formData = new FormData();
          formData.append('resumeData', JSON.stringify(resume));
          formData.append('template', resume.template || 'professional');
          
          // Send the resume data to the server for PDF generation
          const response = await fetch('/api/generate-pdf', {
            method: 'POST',
            body: formData
          });
          
          if (!response.ok) throw new Error('Failed to generate PDF');
          
          // Get the PDF blob from the response
          const blob = await response.blob();
          
          // Create a URL for the blob
          const url = window.URL.createObjectURL(blob);
          
          // Set up the download link
          link.href = url;
          link.download = fileName;
          link.click();
          
          // Clean up
          window.URL.revokeObjectURL(url);
          
          toast({
            title: "PDF Downloaded",
            description: `Your resume has been downloaded as ${fileName}`,
          });
        } catch (error) {
          console.error('Error downloading PDF from server:', error);
          
          // If server-side generation fails, try client-side printing
          toast({
            title: "Using Print Dialog",
            description: "Server PDF generation failed. Using browser print dialog instead.",
          });
          
          // Add print-specific styles to the document
          const style = document.createElement('style');
          style.id = 'print-resume-style';
          style.innerHTML = `
            @media print {
              body * {
                visibility: hidden;
              }
              #${previewRef.current.id || 'resume-preview'}, #${previewRef.current.id || 'resume-preview'} * {
                visibility: visible;
              }
              #${previewRef.current.id || 'resume-preview'} {
                position: absolute;
                left: 0;
                top: 0;
                width: 210mm;
                height: 297mm;
                margin: 0;
                padding: 0;
                transform: scale(1) !important;
              }
            }
          `;
          document.head.appendChild(style);
          
          // Create a unique id for the preview element if it doesn't have one
          if (!previewRef.current.id) {
            previewRef.current.id = 'resume-preview';
          }
          
          // Trigger print dialog after a brief delay
          setTimeout(() => {
            window.print();
            
            // Remove the print styles after printing
            setTimeout(() => {
              const printStyle = document.getElementById('print-resume-style');
              if (printStyle) document.head.removeChild(printStyle);
            }, 1000);
          }, 500);
        }
        
        // Restore the original scales
        setTimeout(() => {
          setScale(originalScale);
          setFontScale(originalFontScale);
          setSpacingScale(originalSpacingScale);
        }, 1000);
      }, 300);
    } catch (error) {
      console.error('Error preparing PDF download:', error);
      
      // Fall back to basic print dialog as last resort
      window.print();
      
      toast({
        title: "Using Print Dialog",
        description: "There was an issue preparing the PDF. Using browser print dialog instead.",
        variant: "destructive"
      });
      
      // Reset the scales
      setScale(0.85);
      setFontScale(1);
      setSpacingScale(1);
    }
  };

  // Toggle fullscreen mode
  const toggleFullScreen = () => {
    setIsFullScreen(!isFullScreen);
  };

  // Toggle edit mode
  const toggleEdit = () => {
    setIsEditing(!isEditing);
    if (isEditing) {
      // Apply changes from editedResume to the actual resume
      onTemplateChange(editedResume.template);
      
      // Dispatch event to update parent component
      const event = new CustomEvent('resumeEdited', {
        detail: { resume: editedResume }
      });
      document.dispatchEvent(event);
    }
  };

  // Handle field changes in the edit mode
  const handleFieldChange = (
    section: string,
    field: string,
    value: string,
    index?: number
  ) => {
    setEditedResume((prev) => {
      const newResume = { ...prev };
      
      if (section === "personalInfo") {
        newResume.personalInfo = { 
          ...newResume.personalInfo, 
          [field]: value 
        };
      } else if (section === "experience" && typeof index === 'number') {
        newResume.experience = [...newResume.experience];
        newResume.experience[index] = { 
          ...newResume.experience[index], 
          [field]: value 
        };
      } else if (section === "education" && typeof index === 'number') {
        newResume.education = [...newResume.education];
        newResume.education[index] = { 
          ...newResume.education[index], 
          [field]: value 
        };
      } else if (section === "skills" && typeof index === 'number') {
        newResume.skills = [...newResume.skills];
        newResume.skills[index] = { 
          ...newResume.skills[index], 
          [field]: value 
        };
      }
      
      return newResume;
    });
  };

  // Auto-adjust feature to fit content on one page
  const autoAdjust = () => {
    setIsAutoAdjusting(true);
    
    // First reset to default scale to get accurate measurements
    setScale(1.0);
    
    // Intelligent scaling algorithm to fit content
    setTimeout(() => {
      if (!previewRef.current) {
        setIsAutoAdjusting(false);
        return;
      }
      
      const contentHeight = previewRef.current.scrollHeight;
      const containerHeight = 297 * 3.78; // A4 height in pixels (297mm converted to px)
      
      // Calculate the required scaling factors
      const heightRatio = containerHeight / contentHeight;
      
      // Log for debugging
      console.log('Content height:', contentHeight, 'Container height:', containerHeight, 'Ratio:', heightRatio);
      
      // Apply the scaling depending on whether content is too large
      if (heightRatio < 1) {
        // Content is too large, scale down the font and spacing gradually
        
        // Calculate optimal font scaling - more gentle reduction for minor overflows
        let newFontScale = 1;
        if (heightRatio >= 0.9) { // Minor overflow (less than 10%)
          newFontScale = Math.max(0.9, heightRatio * 0.98);
        } else if (heightRatio >= 0.8) { // Moderate overflow (10-20%)
          newFontScale = Math.max(0.8, heightRatio * 0.95);
        } else { // Major overflow (>20%)
          newFontScale = Math.max(0.7, heightRatio * 0.9);
        }
        
        // Spacing can be reduced more aggressively than font size
        const newSpacingScale = Math.max(0.7, heightRatio * 0.85);
        
        // Set new scales
        setFontScale(newFontScale);
        setSpacingScale(newSpacingScale);
        
        // Also adjust the view scale for better visibility if content is very large
        if (heightRatio < 0.7) {
          // For very large content, zoom out to see more
          setScale(0.8);
        } else {
          // For moderately large content, keep scale at 0.85
          setScale(0.85);
        }
        
        toast({
          title: "Smart Fit Applied",
          description: `Content adjusted to fit on one page (${Math.round(newFontScale * 100)}% text scale)`,
        });
      } else {
        // Content fits already, reset to default
        setFontScale(1);
        setSpacingScale(1);
        
        // Set view scale to show the full page
        setScale(0.85);
        
        toast({
          title: "Smart Fit Reset",
          description: "Your content already fits on one page. Using default sizes.",
        });
      }
      
      setIsAutoAdjusting(false);
    }, 500);
  };
  
  // Keep editedResume in sync with resume props changes
  useEffect(() => {
    setEditedResume(resume);
  }, [resume]);
  
  return (
    <div className="space-y-4">
      {/* Controls */}
      <div className="flex flex-wrap justify-between items-center mb-4 gap-2">
        <div className="flex items-center gap-2">
          <h3 className="text-lg font-medium text-white">Resume Preview</h3>
          <Badge variant="outline" className="text-blue-300 border-blue-300/30">
            {Math.round(scale * 100)}%
          </Badge>
        </div>
        <div className="flex gap-2">
          <Button
            variant="outline"
            size="sm"
            onClick={() => setScale(Math.max(0.5, scale - 0.1))}
            disabled={scale <= 0.5}
            className="flex items-center text-white border-white/20 hover:bg-white/10"
          >
            <Minus className="h-4 w-4" />
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={() => setScale(Math.min(1.5, scale + 0.1))}
            disabled={scale >= 1.5}
            className="flex items-center text-white border-white/20 hover:bg-white/10"
          >
            <Plus className="h-4 w-4" />
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={autoAdjust}
            disabled={isAutoAdjusting}
            className="flex items-center gap-1 text-white border-white/20 hover:bg-white/10"
            title="Automatically adjust font size and spacing to fit content on one page without changing zoom level"
          >
            {isAutoAdjusting ? (
              <Loader2 className="h-4 w-4 animate-spin" />
            ) : (
              <Zap className="h-4 w-4" />
            )}
            Smart Fit
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={toggleFullScreen}
            className="flex items-center gap-1 text-white border-white/20 hover:bg-white/10"
          >
            <Maximize2 className="h-4 w-4" />
            {isFullScreen ? "Exit Full Screen" : "Full Screen"}
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={toggleEdit}
            className="flex items-center gap-1 text-white border-white/20 hover:bg-white/10"
          >
            {isEditing ? (
              <>
                <Check className="h-4 w-4" />
                Save
              </>
            ) : (
              <>
                <FileText className="h-4 w-4" />
                Edit
              </>
            )}
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={handleDownload}
            className="flex items-center gap-1 text-white border-white/20 hover:bg-white/10"
            disabled={isDownloading}
          >
            {isDownloading ? (
              <Loader2 className="h-4 w-4 animate-spin mr-1" />
            ) : (
              <Download className="h-4 w-4 mr-1" />
            )}
            {isDownloading ? "Generating..." : "Download PDF"}
          </Button>
        </div>
      </div>

      {/* Resume Preview */}
      <div
        ref={resumeContainerRef}
        className={cn(
          "bg-white/5 backdrop-blur-sm rounded-xl border border-white/10 shadow-xl overflow-auto scroll-smooth",
          isFullScreen
            ? "fixed inset-0 z-50 m-0 p-8 bg-black/90"
            : "p-4 h-[80vh] flex items-center justify-center" // Center the preview vertically and horizontally
        )}
      >
        <div
          ref={previewRef}
          className="resume-content-container transition-all duration-300 mx-auto bg-white shadow-lg print:shadow-none"
          data-font-scale={fontScale.toString()}
          data-spacing-scale={spacingScale.toString()}
          style={{
            transform: `scale(${scale})`,
            width: "210mm", // A4 width
            minHeight: "297mm", // A4 height (minimum to ensure proper proportions)
            maxHeight: "297mm", // A4 height (maximum to ensure proper proportions)
            transformOrigin: "center", // Center transform origin for better viewing 
            fontSize: `${fontScale * 100}%`, // Dynamic font scaling
            lineHeight: `${spacingScale * 1.5}`, // Dynamic line height scaling
            overflowY: isEditing ? "auto" : "hidden", // Hide overflow when not editing
            boxShadow: "0 4px 24px rgba(0, 0, 0, 0.15)", // Add shadow for better visibility
            marginTop: scale < 1 ? "0" : "2rem", // Add margin when zoomed in
            marginBottom: scale < 1 ? "0" : "2rem", // Add margin when zoomed in
          }}
        >
          {isEditing ? (
            <div className="p-6 bg-white text-black h-full">
              {/* Personal Info Section */}
              <div className="mb-6 pb-4 border-b border-gray-200">
                <h2 className="text-2xl font-bold mb-2">
                  <Input
                    value={editedResume.personalInfo.firstName + " " + editedResume.personalInfo.lastName}
                    onChange={(e) => {
                      const [firstName, ...lastNameParts] = e.target.value.split(" ");
                      handleFieldChange("personalInfo", "firstName", firstName || "");
                      handleFieldChange("personalInfo", "lastName", lastNameParts.join(" ") || "");
                    }}
                    className="border border-gray-200 p-1 text-2xl font-bold w-full bg-white"
                  />
                </h2>
                <div className="flex flex-wrap gap-3 text-sm mb-4">
                  <div className="flex-1 min-w-[200px]">
                    <label className="text-xs text-gray-500 block mb-1">Email</label>
                    <Input
                      value={editedResume.personalInfo.email}
                      onChange={(e) => handleFieldChange("personalInfo", "email", e.target.value)}
                      className="border border-gray-200 p-1 text-sm w-full bg-white"
                      placeholder="Email"
                    />
                  </div>
                  <div className="flex-1 min-w-[200px]">
                    <label className="text-xs text-gray-500 block mb-1">Phone</label>
                    <Input
                      value={editedResume.personalInfo.phone}
                      onChange={(e) => handleFieldChange("personalInfo", "phone", e.target.value)}
                      className="border border-gray-200 p-1 text-sm w-full bg-white"
                      placeholder="Phone"
                    />
                  </div>
                </div>
                <div>
                  <RichTextEditor
                    label="Professional Summary"
                    value={editedResume.personalInfo.summary}
                    onChange={(value) => handleFieldChange("personalInfo", "summary", value)}
                    placeholder="Professional Summary"
                    rows={4}
                  />
                </div>
              </div>
              
              {/* Experience Section */}
              <div className="mb-6">
                <h3 className="text-lg font-semibold mb-3">Experience</h3>
                {editedResume.experience.map((exp, index) => (
                  <div key={exp.id} className="mb-4 pb-4 border-b border-gray-100">
                    <div className="flex flex-wrap gap-3 mb-2">
                      <div className="flex-1 min-w-[200px]">
                        <label className="text-xs text-gray-500 block mb-1">Job Title</label>
                        <Input
                          value={exp.title}
                          onChange={(e) => handleFieldChange("experience", "title", e.target.value, index)}
                          className="border border-gray-200 p-1 text-sm w-full bg-white"
                        />
                      </div>
                      <div className="flex-1 min-w-[200px]">
                        <label className="text-xs text-gray-500 block mb-1">Company</label>
                        <Input
                          value={exp.company}
                          onChange={(e) => handleFieldChange("experience", "company", e.target.value, index)}
                          className="border border-gray-200 p-1 text-sm w-full bg-white"
                        />
                      </div>
                    </div>
                    <div className="flex flex-wrap gap-3 mb-2">
                      <div className="flex-1 min-w-[200px]">
                        <label className="text-xs text-gray-500 block mb-1">Start Date</label>
                        <Input
                          value={exp.startDate}
                          onChange={(e) => handleFieldChange("experience", "startDate", e.target.value, index)}
                          className="border border-gray-200 p-1 text-sm w-full bg-white"
                        />
                      </div>
                      <div className="flex-1 min-w-[200px]">
                        <label className="text-xs text-gray-500 block mb-1">End Date</label>
                        <Input
                          value={exp.endDate}
                          onChange={(e) => handleFieldChange("experience", "endDate", e.target.value, index)}
                          className="border border-gray-200 p-1 text-sm w-full bg-white"
                        />
                      </div>
                    </div>
                    <div>
                      <RichTextEditor
                        label="Description"
                        value={exp.description}
                        onChange={(value) => handleFieldChange("experience", "description", value, index)}
                        placeholder="Job description and achievements"
                        rows={3}
                      />
                    </div>
                  </div>
                ))}
              </div>
              
              {/* Skills Section */}
              <div className="mb-6">
                <h3 className="text-lg font-semibold mb-3">Skills</h3>
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-2">
                  {editedResume.skills.map((skill, index) => (
                    <div key={skill.id} className="border border-gray-200 rounded p-2">
                      <Input
                        value={skill.name}
                        onChange={(e) => handleFieldChange("skills", "name", e.target.value, index)}
                        className="border-none p-0 text-sm w-full"
                      />
                    </div>
                  ))}
                </div>
              </div>
              
              {/* Education Section - Simplified */}
              <div className="mb-6">
                <h3 className="text-lg font-semibold mb-3">Education</h3>
                {editedResume.education.map((edu, index) => (
                  <div key={edu.id} className="mb-4 pb-4 border-b border-gray-100">
                    <div className="flex flex-wrap gap-3 mb-2">
                      <div className="flex-1 min-w-[200px]">
                        <label className="text-xs text-gray-500 block mb-1">Degree</label>
                        <Input
                          value={edu.degree}
                          onChange={(e) => handleFieldChange("education", "degree", e.target.value, index)}
                          className="border border-gray-200 p-1 text-sm w-full bg-white"
                        />
                      </div>
                      <div className="flex-1 min-w-[200px]">
                        <label className="text-xs text-gray-500 block mb-1">Institution</label>
                        <Input
                          value={edu.institution}
                          onChange={(e) => handleFieldChange("education", "institution", e.target.value, index)}
                          className="border border-gray-200 p-1 text-sm w-full bg-white"
                        />
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          ) : (
            <div className="bg-white text-black p-8">
              {resume.template === "creative" ? (
                <CreativeTemplate resume={resume} />
              ) : resume.template === "executive" ? (
                <ExecutiveTemplate resume={resume} />
              ) : resume.template === "modern" ? (
                <ModernTemplate resume={resume} />
              ) : resume.template === "minimal" ? (
                <MinimalTemplate resume={resume} />
              ) : resume.template === "industry" ? (
                <IndustryTemplate resume={resume} />
              ) : resume.template === "bold" ? (
                <BoldTemplate resume={resume} />
              ) : (
                <ProfessionalTemplate resume={resume} />
              )}
            </div>
          )}
        </div>
      </div>

      {/* Template Selection */}
      <div className="mt-8">
        <h3 className="text-lg font-medium mb-4 text-white">Choose a Template</h3>
        <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-4">
          {[
            { name: "professional", preview: TemplatePreviewProfessional },
            { name: "creative", preview: TemplatePreviewCreative },
            { name: "executive", preview: TemplatePreviewExecutive },
            { name: "modern", preview: TemplatePreviewModern },
            { name: "minimal", preview: TemplatePreviewMinimal },
            { name: "industry", preview: TemplatePreviewIndustry },
            { name: "bold", preview: TemplatePreviewBold },
          ].map((template) => (
            <div
              key={template.name}
              className={cn(
                "cursor-pointer p-3 rounded-lg transition-all",
                resume.template === template.name
                  ? "border-2 border-blue-500 shadow-lg"
                  : "border border-white/20"
              )}
              onClick={() => onTemplateChange(template.name)}
            >
              <div className="h-32 mb-2">
                <template.preview />
              </div>
              <h4 className="font-medium text-center text-white capitalize">{template.name}</h4>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

export default function ResumeBuilder() {
  const { toast } = useToast();
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [searchParams] = useState(
    () => new URLSearchParams(window.location.search),
  );

  const [resumeSaved, setResumeSaved] = useState(false);
  const [activeSection, setActiveSection] = useState<string>("profile");
  const [isUploading, setIsUploading] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [resumeId, setResumeId] = useState<number | null>(null);
  const [isTailoredResume, setIsTailoredResume] = useState<boolean>(
    searchParams.get("tailored") === "true",
  );
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [showTips, setShowTips] = useState<
    "summary" | "experience" | "skills" | null
  >(null);
  
  // Reference to the resume preview component
  const previewRef = useRef<HTMLDivElement>(null);
  
  // Function to download the resume as PDF
  const downloadResume = async () => {
    try {
      // Generate a clean printable HTML version of the resume
      const printableHTML = generatePrintableHTML(resume);
      
      // Generate a clean filename with the person's name or a default name
      const name = resume?.personalInfo?.firstName && resume?.personalInfo?.lastName ? 
        `${resume.personalInfo.firstName}_${resume.personalInfo.lastName}_Resume` : 
        'Resume';
      const fileName = `${name.replace(/\s+/g, '_')}`;
      
      toast({
        title: "Preparing Resume",
        description: "Opening print dialog...",
      });
      
      // Create a blob with the HTML content
      const blob = new Blob([printableHTML], { type: 'text/html' });
      const url = window.URL.createObjectURL(blob);
      
      // Open the HTML in a new window for printing
      const printWindow = window.open(url, '_blank');
      
      if (!printWindow) {
        throw new Error('Popup blocked. Please allow popups for this site.');
      }
      
      // Clean up the blob URL after the window is opened
      setTimeout(() => {
        window.URL.revokeObjectURL(url);
      }, 1000);
      
      toast({
        title: "Print Dialog Opened",
        description: "Use your browser's print function to save as PDF.",
      });
    } catch (error) {
      console.error('Error generating printable version:', error);
      
      // Fall back to the browser print dialog for the current page
      toast({
        title: "Using Print Dialog",
        description: "Failed to generate optimized version. Try printing this page directly.",
        variant: "destructive"
      });
    }
  };
  
  // Function to generate a clean, printable HTML version of the resume
  function generatePrintableHTML(resumeData: Resume): string {
    // Get current Smart Fit settings if they exist in the window object
    const smartFit = {
      // Check the previewRef's ResumePreviewComponent if possible
      fontScale: document.querySelector('.resume-content-container')?.getAttribute('data-font-scale') || '1',
      spacingScale: document.querySelector('.resume-content-container')?.getAttribute('data-spacing-scale') || '1'
    };
    
    // Convert to numbers
    const fontScale = parseFloat(smartFit.fontScale);
    const spacingScale = parseFloat(smartFit.spacingScale);
    
    console.log('Print with Smart Fit settings:', { fontScale, spacingScale });
    
    // Basic styling for the resume with Smart Fit adjustments applied
    const styles = `
      <style>
        @media print {
          @page { 
            size: A4;
            margin: 10mm;
          }
        }
        
        body {
          font-family: 'Arial', sans-serif;
          line-height: ${1.5 * spacingScale};
          color: #333;
          margin: 0;
          padding: 0;
          background: white;
          font-size: ${16 * fontScale}px;
        }
        
        .resume-container {
          width: 100%;
          max-width: 800px;
          margin: 0 auto;
          padding: 20px;
          box-sizing: border-box;
          background: white;
        }
        
        .header {
          text-align: center;
          margin-bottom: ${20 * spacingScale}px;
        }
        
        .header h1 {
          margin: 0;
          font-size: ${28 * fontScale}px;
          color: #2a3f5f;
        }
        
        .header .contact {
          margin-top: ${10 * spacingScale}px;
          font-size: ${14 * fontScale}px;
        }
        
        .section {
          margin-bottom: ${20 * spacingScale}px;
        }
        
        .section-title {
          font-size: ${18 * fontScale}px;
          font-weight: bold;
          border-bottom: 2px solid #2a3f5f;
          margin-bottom: ${10 * spacingScale}px;
          padding-bottom: ${5 * spacingScale}px;
          color: #2a3f5f;
        }
        
        .experience-item, .education-item, .project-item {
          margin-bottom: ${15 * spacingScale}px;
        }
        
        .item-header {
          display: flex;
          justify-content: space-between;
          font-weight: bold;
        }
        
        .item-title {
          font-weight: bold;
        }
        
        .item-subtitle {
          font-style: italic;
        }
        
        .item-date {
          color: #666;
        }
        
        .item-description {
          margin-top: ${5 * spacingScale}px;
        }
        
        .skills-list {
          display: flex;
          flex-wrap: wrap;
          gap: ${10 * spacingScale}px;
        }
        
        .skill-item {
          background-color: #f5f5f5;
          border-radius: 3px;
          padding: ${3 * spacingScale}px ${8 * spacingScale}px;
          font-size: ${14 * fontScale}px;
        }
      </style>
    `;
    
    // Get personal info
    const { firstName, lastName, email, phone, headline, summary } = resumeData.personalInfo;
    const fullName = `${firstName} ${lastName}`.trim() || 'Your Name';
    
    // Generate header section
    const headerSection = `
      <div class="header">
        <h1>${fullName}</h1>
        ${headline ? `<div class="headline">${headline}</div>` : ''}
        <div class="contact">
          ${email ? `<span>${email}</span>` : ''}
          ${email && phone ? ' | ' : ''}
          ${phone ? `<span>${phone}</span>` : ''}
        </div>
      </div>
    `;
    
    // Generate summary section
    const summarySection = summary ? `
      <div class="section">
        <div class="section-title">Summary</div>
        <div class="summary-content">${summary}</div>
      </div>
    ` : '';
    
    // Generate experience section
    let experienceSection = '';
    if (resumeData.experience && resumeData.experience.length > 0) {
      const experienceItems = resumeData.experience
        .map(exp => `
          <div class="experience-item">
            <div class="item-header">
              <span class="item-title">${exp.title || ''}</span>
              <span class="item-date">${exp.startDate || ''} - ${exp.endDate || 'Present'}</span>
            </div>
            <div class="item-subtitle">${exp.company || ''}</div>
            <div class="item-description">${exp.description || ''}</div>
          </div>
        `)
        .join('');
      
      experienceSection = `
        <div class="section">
          <div class="section-title">Experience</div>
          ${experienceItems}
        </div>
      `;
    }
    
    // Generate education section
    let educationSection = '';
    if (resumeData.education && resumeData.education.length > 0) {
      const educationItems = resumeData.education
        .map(edu => `
          <div class="education-item">
            <div class="item-header">
              <span class="item-title">${edu.degree || ''}</span>
              <span class="item-date">${edu.startDate || ''} - ${edu.endDate || ''}</span>
            </div>
            <div class="item-subtitle">${edu.institution || ''}</div>
            ${edu.description ? `<div class="item-description">${edu.description}</div>` : ''}
          </div>
        `)
        .join('');
      
      educationSection = `
        <div class="section">
          <div class="section-title">Education</div>
          ${educationItems}
        </div>
      `;
    }
    
    // Generate skills section
    let skillsSection = '';
    if (resumeData.skills && resumeData.skills.length > 0) {
      const skillItems = resumeData.skills
        .map(skill => `<div class="skill-item">${skill.name || ''}</div>`)
        .join('');
      
      skillsSection = `
        <div class="section">
          <div class="section-title">Skills</div>
          <div class="skills-list">
            ${skillItems}
          </div>
        </div>
      `;
    }
    
    // Generate projects section
    let projectsSection = '';
    if (resumeData.projects && resumeData.projects.length > 0) {
      const projectItems = resumeData.projects
        .map(project => `
          <div class="project-item">
            <div class="item-title">${project.title || ''}</div>
            <div class="item-description">${project.description || ''}</div>
            ${project.technologies && project.technologies.length ? 
              `<div class="item-technologies">Technologies: ${project.technologies.join(', ')}</div>` : ''}
            ${project.link ? `<div class="item-link">Link: ${project.link}</div>` : ''}
          </div>
        `)
        .join('');
      
      projectsSection = `
        <div class="section">
          <div class="section-title">Projects</div>
          ${projectItems}
        </div>
      `;
    }
    
    // Add auto-print script with styles to hide URL in footer
    const printScript = `
      <script>
        window.onload = function() {
          setTimeout(function() {
            window.print();
          }, 1000);
        };
      </script>
      <style>
        /* Hide URL/links in print footer */
        @media print {
          @page {
            margin-bottom: 0;
          }
          body {
            -webkit-print-color-adjust: exact !important;
            print-color-adjust: exact !important;
          }
          /* Hide any URLs that might appear in the footer when printing */
          html {
            height: 100vh;
            overflow: hidden;
          }
        }
      </style>
    `;
    
    // Combine all sections
    return `
      <!DOCTYPE html>
      <html lang="en">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>${fullName} - Resume</title>
        ${styles}
        ${printScript}
      </head>
      <body>
        <div class="resume-container">
          ${headerSection}
          ${summarySection}
          ${experienceSection}
          ${educationSection}
          ${skillsSection}
          ${projectsSection}
        </div>
      </body>
      </html>
    `;
  }

  // Initial resume state
  const [resume, setResume] = useState<Resume>({
    title: "My Professional Resume",
    personalInfo: {
      firstName: "",
      lastName: "",
      email: "",
      phone: "",
      headline: "",
      summary: "",
    },
    experience: [],
    education: [],
    skills: [],
    projects: [],
    template: "professional",
  });

  // Get all resumes for the load resume dropdown
  const { data: userResumes = [] } = useQuery({
    queryKey: ['/api/resumes'],
    enabled: true,
  });

  // Add a recovery mechanism - check if we have saved resume data in sessionStorage
  // and use it if the current resume is empty
  useEffect(() => {
    if (!resume.personalInfo.firstName && !resume.personalInfo.lastName) {
      try {
        // Try to recover from sessionStorage
        const savedData = sessionStorage.getItem('loadedResumeData');
        if (savedData) {
          const parsedData = JSON.parse(savedData);
          console.log("Recovering resume data from sessionStorage:", parsedData);
          
          if (parsedData.resumeData) {
            // Apply the recovered data if we don't already have data
            setResume(parsedData.resumeData as Resume);
            
            // If we know the ID, set it
            if (parsedData.resumeData.id) {
              setResumeId(parsedData.resumeData.id);
            }
            
            toast({
              title: "Resume Data Recovered",
              description: "Your resume data has been recovered from a previous session.",
            });
          }
        }
      } catch (error) {
        console.error("Error recovering resume data:", error);
      }
    }
  }, [resume]);

  // Parse URL parameters on component mount
  useEffect(() => {
    // Check for resume ID in URL parameters
    const resumeIdParam = searchParams.get("id");
    const isEditMode = searchParams.get("edit") === "true";
    
    if (resumeIdParam) {
      try {
        const id = parseInt(resumeIdParam, 10);
        if (!isNaN(id)) {
          setResumeId(id);
          
          // Check if we have pre-loaded resume data from editing
          if (isEditMode) {
            const storedResumeData = localStorage.getItem('editingResume');
            if (storedResumeData) {
              try {
                const parsedData = JSON.parse(storedResumeData);
                console.log("Found pre-loaded resume data:", parsedData);
                
                if (parsedData.resumeData) {
                  const resumeData = parsedData.resumeData;
                  
                  // Process the resume data to ensure it has the proper structure
                  // The data comes with a nested 'content' object that contains all resume sections
                  const content = resumeData.content || {};
                  
                  const completeResume = {
                    id: resumeData.id,
                    title: resumeData.title || "Untitled Resume",
                    personalInfo: {
                      firstName: content.personalInfo?.firstName || "",
                      lastName: content.personalInfo?.lastName || "",
                      email: content.personalInfo?.email || "",
                      phone: content.personalInfo?.phone || "",
                      headline: content.personalInfo?.headline || "",
                      summary: content.personalInfo?.summary || ""
                    },
                    experience: Array.isArray(content.experience) ? content.experience.map((exp: any) => ({
                      ...exp,
                      id: exp.id || crypto.randomUUID(),
                    })) : [],
                    education: Array.isArray(content.education) ? content.education.map((edu: any) => ({
                      ...edu,
                      id: edu.id || crypto.randomUUID(),
                    })) : [],
                    skills: Array.isArray(content.skills) ? content.skills.map((skill: any) => ({
                      ...skill,
                      id: skill.id || crypto.randomUUID(),
                    })) : [],
                    projects: Array.isArray(content.projects) ? content.projects.map((project: any) => ({
                      ...project,
                      id: project.id || crypto.randomUUID(),
                    })) : [],
                    template: resumeData.template || "professional"
                  };
                  
                  // Update the resume state directly with the loaded data
                  setResume(completeResume as Resume);
                  setActiveSection("profile");
                  
                  // Show success toast
                  toast({
                    title: "Resume Loaded Successfully",
                    description: `"${completeResume.title}" has been loaded for editing`,
                  });
                  
                  // Clear the localStorage to prevent stale data
                  localStorage.removeItem('editingResume');
                }
              } catch (parseError) {
                console.error("Error parsing stored resume data:", parseError);
              }
            }
          }
        }
      } catch (e) {
        console.error("Error parsing resume ID from URL", e);
      }
    }

    // Check for template in URL parameters
    const templateParam = searchParams.get("template");
    if (templateParam) {
      setResume(prev => ({
        ...prev,
        template: templateParam
      }));
    }
  }, [searchParams]);

  // Fetch resume data if resumeId exists
  const { data: fetchedResume } = useQuery({
    queryKey: ["/api/resumes", resumeId],
    enabled: !!resumeId,
  });

  // Use useEffect to handle the data instead of onSuccess
  useEffect(() => {
    if (fetchedResume) {
      console.log("Resume data fetched:", JSON.stringify(fetchedResume, null, 2));
      
      try {
        // The API returns resume data with a nested 'content' object
        const content = fetchedResume.content || {};
        console.log("Resume content extracted:", content);
        
        // Ensure we have complete data structure for all fields
        const completeResume = {
          id: fetchedResume.id,
          title: fetchedResume.title || "Untitled Resume",
          personalInfo: {
            firstName: content.personalInfo?.firstName || "",
            lastName: content.personalInfo?.lastName || "",
            email: content.personalInfo?.email || "",
            phone: content.personalInfo?.phone || "",
            headline: content.personalInfo?.headline || "",
            summary: content.personalInfo?.summary || ""
          },
          experience: Array.isArray(content.experience) ? content.experience.map((exp: any) => ({
            ...exp,
            id: exp.id || crypto.randomUUID(), // Ensure each experience has an ID
          })) : [],
          education: Array.isArray(content.education) ? content.education.map((edu: any) => ({
            ...edu,
            id: edu.id || crypto.randomUUID(), // Ensure each education has an ID
          })) : [],
          skills: Array.isArray(content.skills) ? content.skills.map((skill: any) => ({
            ...skill,
            id: skill.id || crypto.randomUUID(), // Ensure each skill has an ID
          })) : [],
          projects: Array.isArray(content.projects) ? content.projects.map((project: any) => ({
            ...project,
            id: project.id || crypto.randomUUID(), // Ensure each project has an ID
          })) : [],
          template: fetchedResume.template || "professional"
        };
        
        console.log("Processed resume to load:", JSON.stringify(completeResume, null, 2));
        
        // Force a complete state update by creating a brand new object
        setResume(completeResume as Resume);
        
        // Set a debug flag in local storage to help with diagnostics
        localStorage.setItem('lastLoadedResume', JSON.stringify({
          resumeId: completeResume.id,
          firstName: completeResume.personalInfo.firstName,
          lastName: completeResume.personalInfo.lastName,
          timestamp: new Date().toISOString()
        }));
        
        // Show success toast when resume is fully loaded
        toast({
          title: "Resume Loaded Successfully",
          description: `"${completeResume.title}" has been loaded with ${completeResume.experience.length} experiences, ${completeResume.skills.length} skills, and ${completeResume.education.length} education entries.`,
        });
      } catch (error) {
        console.error("Error processing fetched resume:", error);
        toast({
          title: "Error Loading Resume",
          description: "There was a problem processing the resume data. Please try again.",
          variant: "destructive",
        });
      }
    }
  }, [fetchedResume, toast]);

  // Listen for resume edit events from the ResumePreviewComponent
  useEffect(() => {
    const handleResumeEdited = (event: Event) => {
      // Type assertion to access custom event detail
      const customEvent = event as CustomEvent;
      if (customEvent.detail && customEvent.detail.resume) {
        setResume(customEvent.detail.resume);
        toast({
          title: "Resume Updated",
          description: "Your changes in the preview have been applied.",
        });
      }
    };

    // Add event listener
    document.addEventListener('resumeEdited', handleResumeEdited);

    // Clean up
    return () => {
      document.removeEventListener('resumeEdited', handleResumeEdited);
    };
  }, []);

  // Handle tailored resume data from localStorage
  useEffect(() => {
    // Only check for tailored resume data on initial component mount
    // to avoid conflicts with other state updates
    const tailoredResumeData = localStorage.getItem("tailoredResume");

    if (tailoredResumeData) {
      try {
        const parsedData = JSON.parse(tailoredResumeData);

        // Immediately switch to profile tab for better UX
        setActiveSection("profile");

        // Create a new resume with the tailored content or update existing
        const hasExistingData =
          resume.personalInfo.firstName ||
          resume.personalInfo.lastName ||
          resume.experience.length > 0 ||
          resume.skills.length > 0;

        if (hasExistingData) {
          // Update existing resume with tailored content
          setResume((currentResume) => ({
            ...currentResume,
            personalInfo: {
              ...currentResume.personalInfo,
              // Only override summary from personalInfo
              summary:
                parsedData.personalInfo?.summary ||
                currentResume.personalInfo.summary,
            },
            // Replace experience and skills completely with tailored content
            experience: parsedData.experience || currentResume.experience,
            skills: parsedData.skills || currentResume.skills,
          }));

          toast({
            title: "Resume Updated",
            description:
              "Your resume has been updated with job-specific tailored content.",
          });
        } else {
          // Create a new resume with the tailored content
          setResume((currentResume) => ({
            ...currentResume,
            personalInfo: {
              ...currentResume.personalInfo,
              ...parsedData.personalInfo,
            },
            experience: parsedData.experience || [],
            skills: parsedData.skills || [],
          }));

          toast({
            title: "Tailored Resume Created",
            description:
              "A new resume has been created with job-specific content.",
          });
        }

        // Clear the localStorage data to prevent reapplying
        localStorage.removeItem("tailoredResume");

        // Remove the tailored parameter from URL
        window.history.replaceState(null, "", window.location.pathname);
      } catch (error) {
        console.error("Error applying tailored resume:", error);
        toast({
          title: "Error",
          description: "Failed to apply tailored resume data.",
          variant: "destructive",
        });
      }
    }
    // Run this effect only once on component mount (empty dependency array)
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  
  // Auto-save resume to localStorage when user makes changes
  useEffect(() => {
    // Don't auto-save if just initialized with default values
    if (resume.personalInfo.firstName || resume.personalInfo.lastName || resume.experience.length > 0) {
      // Save current resume state to localStorage
      localStorage.setItem('autoSavedResume', JSON.stringify({
        resumeId: resumeId,
        resumeData: resume,
        timestamp: new Date().toISOString()
      }));
      
      console.log("Auto-saved resume to localStorage");
    }
  }, [resume, resumeId]);
  
  // Check for auto-saved resume data when component mounts
  useEffect(() => {
    // Only load from auto-save if we don't already have content in our resume
    if (!resume.personalInfo.firstName && !resume.personalInfo.lastName && resume.experience.length === 0) {
      try {
        const autoSavedData = localStorage.getItem('autoSavedResume');
        if (autoSavedData) {
          const parsedData = JSON.parse(autoSavedData);
          console.log("Found auto-saved resume data:", parsedData);
          
          // Check if the data is not too old (within 24 hours)
          const savedTime = new Date(parsedData.timestamp).getTime();
          const currentTime = new Date().getTime();
          const hoursDiff = (currentTime - savedTime) / (1000 * 60 * 60);
          
          if (hoursDiff < 24) {
            // Apply the auto-saved data
            if (parsedData.resumeData) {
              setResume(parsedData.resumeData as Resume);
              
              // If we have a resumeId saved, use it
              if (parsedData.resumeId) {
                setResumeId(parsedData.resumeId);
              }
              
              toast({
                title: "Recovered Unsaved Changes",
                description: "Your previously unsaved work has been restored.",
              });
            }
          } else {
            // Data is too old, clear it
            localStorage.removeItem('autoSavedResume');
          }
        }
      } catch (error) {
        console.error("Error loading auto-saved resume:", error);
      }
    }
  }, []);

  // Save resume mutation
  const saveResumeMutation = useMutation({
    mutationFn: async (resumeData: Resume) => {
      if (resumeId) {
        const res = await apiRequest(
          "PATCH",
          `/api/resumes/${resumeId}`,
          resumeData,
        );
        return await res.json();
      } else {
        const res = await apiRequest("POST", "/api/resumes", resumeData);
        return await res.json();
      }
    },
    onSuccess: (data) => {
      setResumeId(data.id);
      setResumeSaved(true);

      toast({
        title: "Resume saved",
        description: "Your resume has been saved successfully.",
      });

      queryClient.invalidateQueries({ queryKey: ["/api/resumes"] });
      
      // Clear the auto-saved data since we've now properly saved the resume
      localStorage.removeItem('autoSavedResume');
    },
    onError: (error) => {
      console.error("Error saving resume:", error);
      toast({
        title: "Error saving resume",
        description: "There was an error saving your resume. Please try again.",
        variant: "destructive",
      });
    },
  });

  // Save resume handler
  const handleSaveResume = () => {
    setIsSaving(true);
    saveResumeMutation.mutate(resume);
    setIsSaving(false);
  };

  // Update personal info fields
  const updatePersonalInfo = (field: string, value: string) => {
    setResume({
      ...resume,
      personalInfo: {
        ...resume.personalInfo,
        [field]: value,
      },
    });
  };

  // Template change handler
  const handleTemplateChange = (template: string) => {
    setResume({
      ...resume,
      template,
    });
  };

  // File upload handler
  const handleFileUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    setIsUploading(true);

    const formData = new FormData();
    formData.append("file", file);

    try {
      const res = await apiRequest("POST", "/api/resumes/parse", formData);
      const parsedData = await res.json();

      if (parsedData.success) {
        // Update resume state with parsed data
        setResume({
          ...resume,
          personalInfo: {
            ...resume.personalInfo,
            ...parsedData.data.personalInfo,
          },
          experience: parsedData.data.experience || [],
          education: parsedData.data.education || [],
          skills: parsedData.data.skills || [],
        });

        toast({
          title: "Resume uploaded",
          description: "Your resume has been parsed successfully.",
        });
      } else {
        toast({
          title: "Error parsing resume",
          description:
            parsedData.error || "There was an error parsing your resume.",
          variant: "destructive",
        });
      }
    } catch (error) {
      console.error("Error uploading resume:", error);
      toast({
        title: "Error uploading resume",
        description:
          "There was an error uploading your resume. Please try again.",
        variant: "destructive",
      });
    }

    setIsUploading(false);

    // Reset file input
    if (fileInputRef.current) {
      fileInputRef.current.value = "";
    }
  };

  // Apply AI suggestions to experience section
  const handleApplyBulletPoint = (bulletPoint: string) => {
    if (activeSection === "experience" && resume.experience.length > 0) {
      // Apply to the most recent experience item
      const updatedExperience = [...resume.experience];
      const lastIndex = updatedExperience.length - 1;

      // Get the current description
      const currentDescription = updatedExperience[lastIndex].description;

      // Append the new bullet point if not empty
      const newDescription = currentDescription
        ? `${currentDescription}\n• ${bulletPoint}`
        : `• ${bulletPoint}`;

      updatedExperience[lastIndex] = {
        ...updatedExperience[lastIndex],
        description: newDescription,
      };

      setResume({
        ...resume,
        experience: updatedExperience,
      });

      toast({
        title: "Bullet point added",
        description:
          "AI-generated bullet point has been added to your experience.",
      });
    } else {
      // Create a new experience item with the bullet point
      const newExperience: ExperienceItem = {
        id: `exp-${Date.now()}`,
        title: "Position Title",
        company: "Company Name",
        startDate: "2022-01",
        endDate: "Present",
        description: `• ${bulletPoint}`,
      };

      setResume({
        ...resume,
        experience: [...resume.experience, newExperience],
      });

      // Switch to experience tab
      setActiveSection("experience");

      toast({
        title: "Experience added",
        description:
          "New experience with AI-generated bullet point has been added.",
      });
    }
  };

  // Apply AI summary to personal info
  const handleApplySummary = (summary: string) => {
    // Check if we already have content in the summary
    const currentSummary = resume.personalInfo.summary;

    // If the summary is empty, just use the suggestion
    // Otherwise, append the new suggestion with a space
    const newSummary = currentSummary
      ? `${currentSummary} ${summary}`
      : summary;

    updatePersonalInfo("summary", newSummary);

    toast({
      title: "Summary enhanced",
      description: "AI-generated content has been added to your summary.",
    });
  };

  // Apply AI skill to skills section
  const handleApplySkill = (skillName: string) => {
    // Check if skill already exists
    if (
      resume.skills.some(
        (skill) => skill.name.toLowerCase() === skillName.toLowerCase(),
      )
    ) {
      toast({
        title: "Skill already exists",
        description: `"${skillName}" is already in your skills list.`,
        variant: "destructive",
      });
      return;
    }

    const newSkill: SkillItem = {
      id: `skill-${Date.now()}`,
      name: skillName,
      proficiency: 3, // Default to medium proficiency
    };

    setResume({
      ...resume,
      skills: [...resume.skills, newSkill],
    });

    toast({
      title: "Skill added",
      description: `"${skillName}" has been added to your skills.`,
    });
  };

  // Handle file input click
  const handleFileInputClick = () => {
    fileInputRef.current?.click();
  };

  const { isDarkMode } = useTheme();
  
  return (
    <div className="cosmic-app-container flex flex-col min-h-screen">
      <Navbar />
      <div className="cosmic-main-content container pt-12 pb-20 px-4 md:px-6 max-w-7xl mx-auto relative z-10">
        {/* Page Header */}
        <PageHeader 
          title={<span className="cosmic-text-gradient">Resume Builder</span>}
          subtitle="Create a professional resume that passes ATS systems and gets you hired."
          actions={
            <div className="flex space-x-3">
              {/* Load Saved Resume Dropdown */}
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <CosmicButton 
                  variant="outline" 
                  className="cosmic-dropdown-trigger"
                  iconLeft={<FolderOpen className="h-4 w-4" />}
                >
                  Load Resume
                </CosmicButton>
              </DropdownMenuTrigger>
              <DropdownMenuContent className="cosmic-dropdown-content w-56">
                <DropdownMenuLabel className="cosmic-dropdown-label">Your Saved Resumes</DropdownMenuLabel>
                <DropdownMenuSeparator className="cosmic-dropdown-separator" />
                {Array.isArray(userResumes) && userResumes.length > 0 ? (
                  userResumes.map((savedResume: any) => (
                    <DropdownMenuItem
                      key={savedResume.id}
                      className="cosmic-dropdown-item"
                      onClick={async () => {
                        try {
                          // Ensure we have a valid resume ID before using it
                          if (savedResume && typeof savedResume.id === 'number') {
                            console.log("Loading resume with ID:", savedResume.id);
                            
                            // Show loading toast
                            toast({
                              title: "Loading Resume",
                              description: `Loading ${savedResume.title || "Untitled Resume"}...`,
                            });
                            
                            // Directly fetch the resume data instead of relying on useQuery
                            try {
                              const response = await fetch(`/api/resumes/${savedResume.id}`);
                              
                              if (!response.ok) {
                                throw new Error(`Error fetching resume: ${response.status}`);
                              }
                              
                              const resumeData = await response.json() as {
                                id?: number;
                                title?: string;
                                content?: {
                                  personalInfo?: any;
                                  experience?: any[];
                                  education?: any[];
                                  skills?: any[];
                                  projects?: any[];
                                };
                                template?: string;
                              };
                              console.log("Direct fetch resume data:", JSON.stringify(resumeData, null, 2));
                              
                              // The API returns resume data with a nested 'content' object
                              const content = resumeData.content || {};
                              console.log("Resume content extracted:", content);
                                
                              // Process the resume data
                              const completeResume = {
                                id: resumeData.id,
                                title: resumeData.title || "Untitled Resume",
                                personalInfo: {
                                  firstName: content.personalInfo?.firstName || "",
                                  lastName: content.personalInfo?.lastName || "",
                                  email: content.personalInfo?.email || "",
                                  phone: content.personalInfo?.phone || "",
                                  headline: content.personalInfo?.headline || "",
                                  summary: content.personalInfo?.summary || ""
                                },
                                experience: Array.isArray(content.experience) ? content.experience.map((exp: any) => ({
                                  ...exp,
                                  id: exp.id || crypto.randomUUID(),
                                })) : [],
                                education: Array.isArray(content.education) ? content.education.map((edu: any) => ({
                                  ...edu,
                                  id: edu.id || crypto.randomUUID(),
                                })) : [],
                                skills: Array.isArray(content.skills) ? content.skills.map((skill: any) => ({
                                  ...skill,
                                  id: skill.id || crypto.randomUUID(),
                                })) : [],
                                projects: Array.isArray(content.projects) ? content.projects.map((project: any) => ({
                                  ...project,
                                  id: project.id || crypto.randomUUID(),
                                })) : [],
                                template: resumeData.template || "professional"
                              };
                              
                              // Preserve the reference to the complete resume for later
                              const finalResumeData = {...completeResume};
                              
                              // Set the resume ID and update the UI state
                              setResumeId(savedResume.id);
                              setActiveSection("profile");
                              
                              // Force a complete state update by creating a brand new object
                              // We wrap this in setTimeout to ensure it runs after other state changes
                              setResume(finalResumeData as Resume);
                              
                              // Add a safety net: store the loaded resume in sessionStorage
                              // so we can recover if state gets lost
                              sessionStorage.setItem('loadedResumeData', JSON.stringify({
                                resumeData: finalResumeData,
                                timestamp: new Date().toISOString()
                              }));
                              
                              // Set a debug flag in local storage
                              localStorage.setItem('lastLoadedResume', JSON.stringify({
                                resumeId: completeResume.id,
                                firstName: completeResume.personalInfo.firstName,
                                lastName: completeResume.personalInfo.lastName,
                                timestamp: new Date().toISOString()
                              }));
                              
                              // Show success toast
                              toast({
                                title: "Resume Loaded Successfully",
                                description: `"${completeResume.title}" has been loaded with ${completeResume.experience.length} experiences, ${completeResume.skills.length} skills, and ${completeResume.education.length} education entries.`,
                              });
                              
                            } catch (fetchError) {
                              console.error("Error fetching resume data:", fetchError);
                              toast({
                                title: "Error Loading Resume",
                                description: "Failed to fetch resume data. Please try again.",
                                variant: "destructive",
                              });
                            }
                          } else {
                            console.error("Invalid resume ID:", savedResume);
                            toast({
                              title: "Error Loading Resume",
                              description: "Invalid resume ID. Please try again.",
                              variant: "destructive",
                            });
                          }
                        } catch (error) {
                          console.error("Error when loading resume:", error);
                          toast({
                            title: "Error Loading Resume",
                            description: "Failed to load the selected resume.",
                            variant: "destructive",
                          });
                        }
                      }}
                    >
                      <FileText className="h-4 w-4 mr-2" />
                      {savedResume.title}
                    </DropdownMenuItem>
                  ))
                ) : (
                  <DropdownMenuItem disabled className="cosmic-dropdown-item-disabled">
                    No saved resumes found
                  </DropdownMenuItem>
                )}
              </DropdownMenuContent>
            </DropdownMenu>

            <CosmicButton
              variant="primary"
              onClick={handleSaveResume}
              disabled={isSaving}
              isLoading={isSaving}
              loadingText="Saving..."
              iconLeft={!isSaving ? <Save /> : undefined}
            >
              Save Resume
            </CosmicButton>

            <CosmicButton
              variant="secondary"
              onClick={handleFileInputClick}
              disabled={isUploading}
              isLoading={isUploading}
              loadingText="Uploading..."
              iconLeft={!isUploading ? <Upload /> : undefined}
            >
              Upload Existing Resume
            </CosmicButton>

            <input
              type="file"
              ref={fileInputRef}
              onChange={handleFileUpload}
              accept=".pdf,.docx,.txt"
              className="hidden"
            />
          </div>
          }
        />

        {/* Main content area */}
        <div className="cosmic-card border border-white/10 rounded-xl shadow-lg backdrop-blur-md overflow-hidden">
          {/* Horizontal Tab Navigation */}
          <div className="relative">
            <div>
              <Tabs
                value={activeSection}
                onValueChange={setActiveSection}
                className="cosmic-tabs"
              >
                <TabsList className="cosmic-tabs-list">
                  <TabsTrigger
                    value="profile"
                    className="cosmic-tab-trigger"
                  >
                    <FileText className="h-4 w-4 mr-2" />
                    PROFILE
                  </TabsTrigger>
                  <TabsTrigger
                    value="experience"
                    className="cosmic-tab-trigger"
                  >
                    <Briefcase className="h-4 w-4 mr-2" />
                    EXPERIENCE
                  </TabsTrigger>
                  <TabsTrigger
                    value="education"
                    className="cosmic-tab-trigger"
                  >
                    <GraduationCap className="h-4 w-4 mr-2" />
                    EDUCATION
                  </TabsTrigger>
                  <TabsTrigger
                    value="skills"
                    className="cosmic-tab-trigger"
                  >
                    <Code className="h-4 w-4 mr-2" />
                    SKILLS
                  </TabsTrigger>
                  <TabsTrigger
                    value="projects"
                    className="cosmic-tab-trigger"
                  >
                    <FolderKanban className="h-4 w-4 mr-2" />
                    PROJECTS
                  </TabsTrigger>
                  <TabsTrigger
                    value="preview"
                    className="cosmic-tab-trigger"
                  >
                    <Maximize2 className="h-4 w-4 mr-2" />
                    PREVIEW
                  </TabsTrigger>
                </TabsList>
              </Tabs>
            </div>

            {/* Tab Content */}
            <div 
              className="cosmic-content-container p-6 md:p-8"
              style={{
                lineHeight: "1.6", // Improved line height for readability
                minHeight: "calc(100vh - 200px)", // Ensure content area fills viewport
              }}
            >
              {/* Profile Section */}
              {activeSection === "profile" && (
                <div className="grid grid-cols-1 md:grid-cols-3 gap-10">
                  {/* Tailored Resume Banner - show briefly when coming from job details */}
                  {isTailoredResume && (
                    <div className="md:col-span-3 mb-4">
                      <div className="cosmic-card border border-green-500/30 bg-green-900/20 p-space-4 rounded-lg relative overflow-hidden backdrop-blur-sm">
                        <div className="absolute top-0 right-0 w-64 h-64 bg-green-500/10 rounded-full blur-3xl"></div>
                        <div className="relative z-10">
                          <div className="flex items-center mb-2">
                            <Sparkles className="h-5 w-5 mr-2 text-green-400" />
                            <h3 className="font-medium text-xl text-white">
                              Job-Tailored Resume
                            </h3>
                          </div>
                          <p className="text-gray-300 mb-2">
                            Your resume is being updated with tailored content
                            optimized for the job description. Review each
                            section and make any additional adjustments before
                            saving.
                          </p>
                        </div>
                      </div>
                    </div>
                  )}

                  {/* Welcome Banner - only show when resume is empty */}
                  {!resume?.personalInfo?.firstName &&
                    !resume?.personalInfo?.lastName && (
                      <div className="md:col-span-3 mb-4">
                        <div className="cosmic-card border border-blue-500/30 bg-blue-900/20 p-space-6 rounded-lg relative overflow-hidden backdrop-blur-sm">
                          <div className="absolute top-0 right-0 w-64 h-64 bg-blue-500/10 rounded-full blur-3xl"></div>
                          <div className="relative z-10">
                            <div className="flex items-center mb-3">
                              <Upload className="h-5 w-5 mr-2 text-blue-400" />
                              <h3 className="font-medium text-xl text-white">
                                Upload Your Existing Resume
                              </h3>
                            </div>
                            <p className="text-gray-300 mb-4">
                              Skip manual entry by uploading your existing
                              resume. Our AI will automatically extract your
                              information and fill out this form for you.
                            </p>
                            <div className="flex flex-wrap gap-3">
                              <CosmicButton
                                variant="primary"
                                onClick={handleFileInputClick}
                                iconLeft={<Upload />}
                              >
                                Upload PDF, DOCX, or TXT
                              </CosmicButton>
                              <p className="text-sm text-gray-400 flex items-center">
                                <span className="mr-1">or</span> fill out the
                                form manually below
                              </p>
                            </div>
                          </div>
                        </div>
                      </div>
                    )}
                  <div className="md:col-span-2 space-y-6">
                    <div>
                      <div className="cosmic-section-header flex items-center mb-5">
                        <User className="cosmic-section-icon h-5 w-5 mr-2" />
                        <h2 className="cosmic-section-title">Contact Information</h2>
                      </div>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
                        <div className="cosmic-form-group">
                          <Label htmlFor="firstName" className="cosmic-form-label">
                            First Name
                          </Label>
                          <Input
                            id="firstName"
                            value={resume?.personalInfo?.firstName || ""}
                            onChange={(e) =>
                              updatePersonalInfo("firstName", e.target.value)
                            }
                            className="cosmic-form-input"
                            placeholder="Dylan"
                          />
                        </div>
                        <div className="cosmic-form-group">
                          <Label htmlFor="lastName" className="cosmic-form-label">
                            Last Name
                          </Label>
                          <Input
                            id="lastName"
                            value={resume?.personalInfo?.lastName || ""}
                            onChange={(e) =>
                              updatePersonalInfo("lastName", e.target.value)
                            }
                            className="cosmic-form-input"
                            placeholder="Spivack"
                          />
                        </div>
                        <div className="cosmic-form-group">
                          <Label htmlFor="email" className="cosmic-form-label">
                            Email
                          </Label>
                          <Input
                            id="email"
                            type="email"
                            value={resume?.personalInfo?.email || ""}
                            onChange={(e) =>
                              updatePersonalInfo("email", e.target.value)
                            }
                            className="cosmic-form-input"
                            placeholder="dylan.spivack@example.com"
                          />
                        </div>
                        <div className="cosmic-form-group">
                          <Label htmlFor="phone" className="cosmic-form-label">
                            Phone
                          </Label>
                          <Input
                            id="phone"
                            value={resume?.personalInfo?.phone || ""}
                            onChange={(e) =>
                              updatePersonalInfo("phone", e.target.value)
                            }
                            className="cosmic-form-input"
                            placeholder="(303) 555-9307"
                          />
                        </div>
                      </div>

                      <div className="mb-8 pb-6 border-b border-blue-500/20">
                        <div className="cosmic-form-group">
                          <Label htmlFor="headline" className="cosmic-form-label">
                            Professional Headline
                          </Label>
                          <Input
                            id="headline"
                            value={resume?.personalInfo?.headline || ""}
                            onChange={(e) =>
                              updatePersonalInfo("headline", e.target.value)
                            }
                            className="cosmic-form-input"
                            placeholder="Dynamic Software Engineer"
                          />
                          <p className="mt-2 text-xs text-blue-300/70">A brief title that describes your professional identity</p>
                        </div>
                      </div>

                      <div>
                        <div className="cosmic-form-group">
                          <Label htmlFor="summary" className="cosmic-form-label">
                            Professional Summary
                          </Label>
                          <Textarea
                            id="summary"
                            value={resume?.personalInfo?.summary || ""}
                            onChange={(e) =>
                              updatePersonalInfo("summary", e.target.value)
                            }
                            className="cosmic-form-input cosmic-form-textarea"
                            rows={5}
                            placeholder="Dynamic Software Engineer with 4 years of experience in web development and optimization. Engineered client websites, resulting in 30% efficiency gains, and developed a custom CMS improving content management by 20%. Seeking to leverage skills in coding and project management to contribute to innovative projects."
                          />
                          <div className="mt-3 text-xs text-blue-100/60 bg-blue-500/5 p-space-3 rounded-lg border border-blue-500/10">
                            <p className="mb-2 text-blue-300 font-medium">
                              Tips for a great summary:
                            </p>
                            <ul className="list-disc pl-4 space-y-1">
                              <li>Keep it concise (3-5 sentences)</li>
                              <li>Highlight your most relevant experience</li>
                              <li>
                                Focus on achievements rather than responsibilities
                              </li>
                              <li>
                                Include keywords relevant to your target position
                              </li>
                            </ul>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* AI Tips Section */}
                  <div className="md:col-span-1">
                    <div className="cosmic-ai-card min-h-[300px]">
                      <div className="relative z-10">
                        <div className="flex items-center gap-2 mb-5">
                          <div className="h-8 w-8 rounded-full bg-gradient-to-br from-blue-600 to-indigo-800 flex items-center justify-center">
                            <Cpu className="h-4 w-4 text-white" />
                          </div>
                          <h3 className="font-medium text-white text-lg">
                            AI Resume Assistant
                          </h3>
                        </div>

                        <div className="w-full space-y-4">
                          <ResumeTips
                            resumeId={resumeId}
                            onApplySuggestion={(suggestion) => {
                              // Check if we already have content in the summary
                              const currentSummary =
                                resume?.personalInfo?.summary || "";

                              // If the summary is empty, just use the suggestion
                              // Otherwise, append the new suggestion with a space
                              const newSummary = currentSummary
                                ? `${currentSummary} ${suggestion}`
                                : suggestion;

                              setResume({
                                ...resume,
                                personalInfo: {
                                  ...resume.personalInfo,
                                  summary: newSummary,
                                },
                              });

                              toast({
                                title: "Summary Enhanced",
                                description:
                                  "AI-generated content has been added to your summary.",
                              });
                            }}
                            suggestionType="summary"
                            multiSelect={true}
                          />
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {/* Experience Section */}
              {activeSection === "experience" && (
                <div className="grid grid-cols-1 md:grid-cols-3 gap-10">
                  <div className="md:col-span-2">
                    <div className="cosmic-section-header flex justify-between items-center mb-4">
                      <h2 className="cosmic-section-title flex items-center">
                        <Briefcase className="cosmic-section-icon h-5 w-5 mr-2" />
                        Work Experience
                      </h2>
                    </div>

                    <ResumeExperienceSection
                      experiences={resume?.experience || []}
                      onUpdate={(experiences) => {
                        setResume({
                          ...resume,
                          experience: experiences,
                        });
                      }}
                    />
                  </div>

                  {/* Tips for Experience */}
                  <div className="md:col-span-1">
                    <div className="cosmic-ai-card min-h-[300px]">
                      <div className="relative z-10">
                        <div className="flex items-center gap-2 mb-5">
                          <div className="h-8 w-8 rounded-full bg-gradient-to-br from-blue-600 to-indigo-800 flex items-center justify-center">
                            <Briefcase className="h-4 w-4 text-white" />
                          </div>
                          <h3 className="font-medium text-white text-lg">
                            AI Experience Assistant
                          </h3>
                        </div>

                        <div className="w-full space-y-4">
                          <ResumeTips
                            resumeId={resumeId}
                            onApplySuggestion={(bulletPoint) => {
                              if (resume?.experience?.length > 0) {
                                // Apply to the most recent experience item
                                const updatedExperience = [
                                  ...resume.experience,
                                ];
                                const lastIndex = updatedExperience.length - 1;

                                // Get the current description
                                const currentDescription =
                                  updatedExperience[lastIndex].description;

                                // Append the new bullet point if not empty
                                const newDescription = currentDescription
                                  ? `${currentDescription}\n• ${bulletPoint}`
                                  : `• ${bulletPoint}`;

                                updatedExperience[lastIndex] = {
                                  ...updatedExperience[lastIndex],
                                  description: newDescription,
                                };

                                setResume({
                                  ...resume,
                                  experience: updatedExperience,
                                });
                              }
                              toast({
                                title: "Bullet point added",
                                description:
                                  "AI-generated bullet point has been added to your experience.",
                              });
                            }}
                            suggestionType="bullet"
                            multiSelect={true}
                          />
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {/* Education Section */}
              {activeSection === "education" && (
                <div className="grid grid-cols-1 md:grid-cols-3 gap-10">
                  <div className="md:col-span-2">
                    <div className="cosmic-section-header flex justify-between items-center mb-space-4">
                      <h2 className="cosmic-section-title flex items-center">
                        <GraduationCap className="cosmic-section-icon h-5 w-5 mr-space-2" />
                        Education
                      </h2>
                    </div>

                    <ResumeEducationSection
                      education={resume?.education || []}
                      onUpdate={(education) => {
                        setResume({
                          ...resume,
                          education,
                        });
                      }}
                    />
                    
                    <div className="mt-space-4 text-xs text-gray-300 bg-white/5 p-space-4 rounded-lg border border-white/10">
                      <p className="mb-space-2 text-blue-300 font-medium">
                        Tips for education section:
                      </p>
                      <ul className="list-disc pl-4 space-y-1">
                        <li>List your most recent education first</li>
                        <li>Include relevant coursework and achievements</li>
                        <li>Mention academic honors and awards</li>
                        <li>Only include GPA if it strengthens your profile</li>
                      </ul>
                    </div>
                  </div>
                  
                  {/* Education AI Assistant */}
                  <div className="md:col-span-1">
                    <div className="cosmic-ai-card min-h-[300px]">
                      <div className="relative z-10 p-space-4">
                        <div className="flex items-center gap-space-2 mb-space-5">
                          <div className="h-8 w-8 rounded-full bg-gradient-to-br from-purple-600 to-indigo-800 flex items-center justify-center">
                            <GraduationCap className="h-4 w-4 text-white" />
                          </div>
                          <h3 className="font-medium text-white text-lg">
                            Education Assistant
                          </h3>
                        </div>

                        <div className="space-y-space-4">
                          <p className="text-sm text-blue-100">
                            Enhance your education section with these tips from our AI assistant:
                          </p>
                          
                          <div className="space-y-space-2 text-sm">
                            <div className="p-space-2 rounded bg-white/5 border border-white/10 hover:bg-white/10 transition-colors cursor-pointer">
                              Focus on relevant coursework that aligns with your target job
                            </div>
                            <div className="p-space-2 rounded bg-white/5 border border-white/10 hover:bg-white/10 transition-colors cursor-pointer">
                              Highlight leadership roles in student organizations
                            </div>
                            <div className="p-space-2 rounded bg-white/5 border border-white/10 hover:bg-white/10 transition-colors cursor-pointer">
                              Include special projects, research, or thesis work
                            </div>
                            <div className="p-space-2 rounded bg-white/5 border border-white/10 hover:bg-white/10 transition-colors cursor-pointer">
                              List certifications or specialized training programs
                            </div>
                          </div>
                          
                          <button 
                            className="w-full mt-space-4 py-2 px-3 bg-blue-600/30 hover:bg-blue-600/50 rounded-md text-white text-sm transition-colors"
                            onClick={() => setIsDialogOpen(true)}
                          >
                            Get AI suggestions
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {/* Skills Section */}
              {activeSection === "skills" && (
                <div className="grid grid-cols-1 md:grid-cols-3 gap-10">
                  <div className="md:col-span-2">
                    <div className="cosmic-section-header flex justify-between items-center mb-space-4">
                      <h2 className="cosmic-section-title flex items-center">
                        <Code className="cosmic-section-icon h-5 w-5 mr-space-2" />
                        Skills
                      </h2>
                    </div>

                    <ResumeSkillsSection
                      skills={resume?.skills || []}
                      onUpdate={(skills) => {
                        setResume({
                          ...resume,
                          skills,
                        });
                      }}
                    />

                    <div className="mt-space-4 text-xs text-gray-300 bg-white/5 p-space-4 rounded-lg border border-white/10">
                      <p className="mb-space-2 text-blue-300 font-medium">
                        Tips for showcasing skills:
                      </p>
                      <ul className="list-disc pl-4 space-y-1">
                        <li>Include a mix of technical and soft skills</li>
                        <li>Prioritize skills mentioned in job descriptions</li>
                        <li>Be honest about your proficiency levels</li>
                        <li>Group similar skills together</li>
                      </ul>
                    </div>
                  </div>

                  {/* Tips for Skills */}
                  <div className="md:col-span-1">
                    <div className="cosmic-ai-card min-h-[300px]">
                      <div className="relative z-10 p-space-4">
                        <div className="flex items-center gap-space-2 mb-space-5">
                          <div className="h-8 w-8 rounded-full bg-gradient-to-br from-purple-600 to-indigo-800 flex items-center justify-center">
                            <Code className="h-4 w-4 text-white" />
                          </div>
                          <h3 className="font-medium text-white text-lg">
                            AI Skills Assistant
                          </h3>
                        </div>

                        <div className="w-full space-y-space-4">
                          <ResumeTips
                            resumeId={resumeId}
                            onApplySuggestion={(skill) => {
                              if (
                                !resume?.skills?.some(
                                  (s) =>
                                    s.name.toLowerCase() ===
                                    skill.toLowerCase(),
                                )
                              ) {
                                const newSkill = {
                                  id: `skill-${Date.now()}`,
                                  name: skill,
                                  proficiency: 3,
                                };

                                setResume({
                                  ...resume,
                                  skills: [...(resume?.skills || []), newSkill],
                                });

                                toast({
                                  title: "Skill added",
                                  description: `"${skill}" has been added to your skills.`,
                                });
                              } else {
                                toast({
                                  title: "Skill already exists",
                                  description: `"${skill}" is already in your skills list.`,
                                  variant: "destructive",
                                });
                              }
                            }}
                            suggestionType="skill"
                            multiSelect={true}
                          />
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {/* Projects Section */}
              {activeSection === "projects" && (
                <div className="grid grid-cols-1 md:grid-cols-3 gap-10">
                  <div className="md:col-span-2">
                    <div className="cosmic-section-header flex justify-between items-center mb-space-4">
                      <h2 className="cosmic-section-title flex items-center">
                        <FolderKanban className="cosmic-section-icon h-5 w-5 mr-space-2" />
                        Projects
                      </h2>
                      <Button 
                        variant="outline" 
                        size="sm" 
                        className="ml-auto"
                        onClick={() => {
                          // Add an empty project
                          const newProject = {
                            id: `project-${Date.now()}`,
                            title: "",
                            description: "",
                            technologies: [],
                          };
                          setResume({
                            ...resume,
                            projects: [...(resume?.projects || []), newProject],
                          });
                        }}
                      >
                        Add Project
                      </Button>
                    </div>

                    <ResumeProjectsSection
                      projects={resume?.projects || []}
                      onUpdate={(projects) => {
                        setResume({
                          ...resume,
                          projects,
                        });
                      }}
                    />
                    
                    <div className="mt-space-4 text-xs text-gray-300 bg-white/5 p-space-4 rounded-lg border border-white/10">
                      <p className="mb-space-2 text-blue-300 font-medium">
                        Tips for adding projects:
                      </p>
                      <ul className="list-disc pl-4 space-y-1">
                        <li>Include personal projects or significant academic/work initiatives</li>
                        <li>Highlight technologies and methodologies used</li>
                        <li>Detail your specific contributions to team projects</li>
                        <li>Add links to repositories or live demos when available</li>
                      </ul>
                    </div>
                  </div>
                  
                  {/* Projects AI Assistant */}
                  <div className="md:col-span-1">
                    <div className="cosmic-ai-card min-h-[300px]">
                      <div className="relative z-10 p-space-4">
                        <div className="flex items-center gap-space-2 mb-space-5">
                          <div className="h-8 w-8 rounded-full bg-gradient-to-br from-purple-600 to-indigo-800 flex items-center justify-center">
                            <FolderKanban className="h-4 w-4 text-white" />
                          </div>
                          <h3 className="font-medium text-white text-lg">
                            Projects Assistant
                          </h3>
                        </div>

                        <div className="space-y-space-4">
                          <p className="text-sm text-blue-100">
                            Enhance your projects section with these formatting tips:
                          </p>
                          
                          <div className="space-y-space-2 text-sm">
                            <div className="p-space-2 rounded bg-white/5 border border-white/10 hover:bg-white/10 transition-colors cursor-pointer">
                              Use action verbs to describe your contributions
                            </div>
                            <div className="p-space-2 rounded bg-white/5 border border-white/10 hover:bg-white/10 transition-colors cursor-pointer">
                              Quantify achievements with metrics when possible
                            </div>
                            <div className="p-space-2 rounded bg-white/5 border border-white/10 hover:bg-white/10 transition-colors cursor-pointer">
                              Showcase problem-solving and technical skills
                            </div>
                            <div className="p-space-2 rounded bg-white/5 border border-white/10 hover:bg-white/10 transition-colors cursor-pointer">
                              Include the business impact of your project
                            </div>
                          </div>
                          
                          <button 
                            className="w-full mt-space-4 py-2 px-3 bg-blue-600/30 hover:bg-blue-600/50 rounded-md text-white text-sm transition-colors"
                            onClick={() => setIsDialogOpen(true)}
                          >
                            Get AI suggestions
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {/* Preview Section */}
              {activeSection === "preview" && (
                <div className="grid grid-cols-1 md:grid-cols-4 gap-10">
                  <div className="md:col-span-3 text-white">
                    <div className="cosmic-section-header flex justify-between items-center mb-space-6">
                      <h2 className="cosmic-section-title flex items-center">
                        <Maximize2 className="cosmic-section-icon h-5 w-5 mr-space-2" />
                        Resume Preview
                      </h2>
                      <CosmicButton
                        variant="outline"
                        onClick={downloadResume}
                        iconLeft={<Download className="h-4 w-4" />}
                      >
                        Download PDF
                      </CosmicButton>
                    </div>
                    <div className="cosmic-card border border-white/10 backdrop-blur-sm p-space-8 rounded-xl shadow-lg">
                      <ResumePreviewComponent
                        resume={resume || {
                          title: "My Professional Resume",
                          personalInfo: {
                            firstName: "",
                            lastName: "",
                            email: "",
                            phone: "",
                            headline: "",
                            summary: "",
                          },
                          experience: [],
                          education: [],
                          skills: [],
                          projects: [],
                          template: "professional",
                        }}
                        onTemplateChange={handleTemplateChange}
                        onDownload={downloadResume}
                      />
                    </div>
                  </div>
                  
                  {/* Final Preview Tips */}
                  <div className="md:col-span-1">
                    <div className="cosmic-ai-card min-h-[300px]">
                      <div className="relative z-10 p-space-4">
                        <div className="flex items-center gap-space-2 mb-space-5">
                          <div className="h-8 w-8 rounded-full bg-gradient-to-br from-purple-600 to-indigo-800 flex items-center justify-center">
                            <Check className="h-4 w-4 text-white" />
                          </div>
                          <h3 className="font-medium text-white text-lg">
                            Final Checks
                          </h3>
                        </div>

                        <div className="space-y-space-4">
                          <p className="text-sm text-blue-100">
                            Before downloading, review your resume for these common issues:
                          </p>
                          
                          <div className="space-y-space-2 text-sm">
                            <div className="p-space-2 rounded bg-white/5 border border-white/10 flex items-start">
                              <Check className="h-4 w-4 text-green-500 mt-0.5 mr-2 flex-shrink-0" />
                              <span>Check for spelling and grammar errors</span>
                            </div>
                            <div className="p-space-2 rounded bg-white/5 border border-white/10 flex items-start">
                              <Check className="h-4 w-4 text-green-500 mt-0.5 mr-2 flex-shrink-0" />
                              <span>Ensure consistent formatting throughout</span>
                            </div>
                            <div className="p-space-2 rounded bg-white/5 border border-white/10 flex items-start">
                              <Check className="h-4 w-4 text-green-500 mt-0.5 mr-2 flex-shrink-0" />
                              <span>Verify all contact information is correct</span>
                            </div>
                            <div className="p-space-2 rounded bg-white/5 border border-white/10 flex items-start">
                              <Check className="h-4 w-4 text-green-500 mt-0.5 mr-2 flex-shrink-0" />
                              <span>Confirm dates are accurate and consistent</span>
                            </div>
                          </div>
                          
                          <button 
                            className="w-full mt-space-4 py-2 px-3 bg-blue-600/30 hover:bg-blue-600/50 rounded-md text-white text-sm transition-colors"
                            onClick={() => setIsDialogOpen(true)}
                          >
                            Get final AI review
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>

      {/* Floating AI Assistant Button */}
      <div className="fixed bottom-6 right-6 z-50 group">
        <div className="absolute -inset-0.5 rounded-full bg-blue-500 opacity-75 blur-sm group-hover:opacity-100 transition duration-300 animate-pulse"></div>
        <CosmicButton
          variant="primary"
          onClick={() => setIsDialogOpen(!isDialogOpen)}
          className="relative h-14 w-14 rounded-full p-0 shadow-lg group-hover:scale-105 transition duration-300"
          aria-label="Open AI Assistant"
        >
          <div className="absolute inset-0 rounded-full border border-white/20 animate-ping opacity-40"></div>
          <Sparkles className="h-5 w-5 text-white" />
        </CosmicButton>
        <span className="absolute top-0 right-16 bg-black/80 text-white text-sm py-1 px-2 rounded opacity-0 group-hover:opacity-100 transition-opacity duration-300 whitespace-nowrap">
          AI Assistant
        </span>
      </div>

      {/* AI Assistant Chat Box */}
      {isDialogOpen && (
        <div className="fixed bottom-24 right-6 z-50 w-96 max-w-full shadow-xl rounded-lg overflow-hidden transition-all duration-300 ease-in-out cosmic-ai-card border-0">
          <div className="bg-gradient-to-r from-blue-900 to-purple-900 p-space-4 flex justify-between items-center border-b border-blue-500/30">
            <div className="flex items-center gap-2">
              <div className="h-8 w-8 rounded-full bg-gradient-to-br from-blue-600 to-indigo-800 flex items-center justify-center">
                <Sparkles className="h-4 w-4 text-white" />
              </div>
              <h3 className="text-white font-medium text-lg">AI Resume Assistant</h3>
            </div>
            <CosmicButton
              variant="ghost"
              onClick={() => setIsDialogOpen(false)}
              className="h-8 w-8 rounded-full p-0 hover:bg-white/10"
              aria-label="Close"
            >
              <X className="h-4 w-4 text-white" />
            </CosmicButton>
          </div>
          <div className="bg-black/90 border-x border-blue-500/30 border-b p-space-5 h-96 overflow-y-auto">
            <AIAssistant
              resumeId={resumeId?.toString()}
              onApplySummary={handleApplySummary}
              onApplyBulletPoint={handleApplyBulletPoint}
              onApplySkill={handleApplySkill}
              resume={resume || {
                title: "My Professional Resume",
                personalInfo: {
                  firstName: "",
                  lastName: "",
                  email: "",
                  phone: "",
                  headline: "",
                  summary: "",
                },
                experience: [],
                education: [],
                skills: [],
                projects: [],
                template: "professional",
              }}
              activeTab={activeSection || 'contact'}
            />
          </div>
        </div>
      )}
      </div>
    </div>
  );
}
```
### refactored-resume-builder.tsx
```tsx
import React, { useState, useRef, useEffect } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { cn } from "@/lib/utils";
import { useTheme } from "@/contexts/ThemeContext";
import PageHeader from "@/components/page-header";

// Resume components
import ResumeTips from "@/components/resume-tips";
import Navbar from "@/components/navbar";
import ResumeTemplate, {
  ProfessionalTemplate,
  CreativeTemplate,
  ExecutiveTemplate,
  ModernTemplate,
  MinimalTemplate,
  IndustryTemplate,
  BoldTemplate,
  TemplatePreviewProfessional,
  TemplatePreviewCreative,
  TemplatePreviewExecutive,
  TemplatePreviewModern,
  TemplatePreviewMinimal,
  TemplatePreviewIndustry,
  TemplatePreviewBold,
} from "@/components/resume-template";

// Import our modular resume section components
import { PersonalInfoSection } from "@/components/resume/PersonalInfoSection";
import { ExperienceSection } from "@/components/resume/ExperienceSection";
import { EducationSection } from "@/components/resume/EducationSection";
import { SkillsSection } from "@/components/resume/SkillsSection";
import { ProjectsSection } from "@/components/resume/ProjectsSection";

// Keep legacy imports for now to ensure backward compatibility during refactoring
import {
  ResumeExperienceSection,
  ResumeEducationSection,
  ResumeSkillsSection,
  ResumeProjectsSection,
  ExperienceItem,
  EducationItem,
  SkillItem,
  ProjectItem,
} from "@/components/resume-section";
import { Resume } from "@/components/resume-template";

// UI Components
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { CosmicButton } from "@/components/cosmic-button-refactored";
import RichTextEditor from "@/components/rich-text-editor";

// Icons
import {
  FileText,
  GraduationCap,
  Briefcase,
  Code,
  Award,
  FolderKanban,
  FolderOpen,
  Save,
  Upload,
  Loader2,
  Cpu,
  Check,
  RefreshCw,
  Sparkles,
  Plus,
  Maximize2,
  Printer,
  ChevronDown,
  Download,
  Minus,
  User,
  X,
  Zap,
} from "lucide-react";

// UI Components
import { Badge } from "@/components/ui/badge";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@/components/ui/collapsible";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
  DialogClose,
} from "@/components/ui/dialog";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";

// AI and Background Components
import AIAssistant from "@/components/ai-assistant";
// Using global theme from cosmic-theme.css instead of custom starfield

// Component for professional summary AI suggestions
interface SummarySuggestionsProps {
  resumeId: string;
  onApply: (summary: string) => void;
}

type SummaryLength = "short" | "medium" | "long";

function SummarySuggestions({ resumeId, onApply }: SummarySuggestionsProps) {
  const { toast } = useToast();
  const [isGenerating, setIsGenerating] = useState(false);
  const [summaries, setSummaries] = useState<string[]>([]);
  const [lastUsedLength, setLastUsedLength] = useState<SummaryLength>("medium");
  const [generationCount, setGenerationCount] = useState(0);
  const [refreshCount, setRefreshCount] = useState<
    Record<SummaryLength, number>
  >({
    short: 0,
    medium: 0,
    long: 0,
  });

  // Generate AI summaries with length option
  const handleGenerateSummaries = async (length: SummaryLength = "medium") => {
    setIsGenerating(true);

    // Reset refresh count if changing length type
    if (lastUsedLength !== length) {
      setLastUsedLength(length);
      setGenerationCount((prev) => prev + 1);
      setRefreshCount((prev) => ({ ...prev, [length]: 0 }));
    } else {
      // Increment refresh count for this length type
      const newRefreshCount = refreshCount[length] + 1;

      // Only allow up to 5 refreshes per length type
      if (newRefreshCount <= 5) {
        setRefreshCount((prev) => ({ ...prev, [length]: newRefreshCount }));
        setGenerationCount((prev) => prev + 1);
      } else {
        toast({
          title: "Refresh limit reached",
          description:
            "You've reached the maximum number of refreshes. Try a different length option.",
          variant: "default",
        });
        setIsGenerating(false);
        return;
      }
    }

    // Generate sample summaries based on resume content
    const getFallbackSummaries = (length: SummaryLength) => {
      // Short summaries
      if (length === "short") {
        return [
          "Skilled professional with a proven track record in delivering high-impact solutions.",
          "Results-oriented professional with expertise in strategic planning and execution.",
          "Dynamic professional with strong technical and communication skills.",
        ];
      }
      // Long summaries
      else if (length === "long") {
        return [
          "Accomplished professional with extensive experience driving innovation and operational excellence. Demonstrates exceptional ability to identify opportunities for improvement and implement strategic solutions that enhance business performance. Combines technical expertise with strong leadership capabilities to guide teams through complex projects and initiatives.",
          "Results-driven professional with a comprehensive background in developing and implementing strategic initiatives. Skilled at translating business requirements into effective solutions while maintaining a focus on quality and efficiency. Recognized for ability to collaborate across departments and deliver measurable improvements to organizational processes.",
          "Versatile professional with a proven track record of success across multiple domains. Leverages deep technical knowledge and business acumen to drive transformative change and achieve ambitious goals. Excels at building relationships with stakeholders at all levels and communicating complex concepts in accessible terms.",
        ];
      }
      // Medium summaries (default)
      else {
        return [
          "Accomplished professional with a proven track record of delivering innovative solutions. Adept at leveraging expertise to drive business outcomes and optimize processes.",
          "Results-driven professional combining technical knowledge with strong communication skills. Committed to continuous improvement and delivering high-quality work that exceeds expectations.",
          "Versatile and dedicated professional with strong problem-solving abilities. Effectively balances technical excellence with business requirements to create impactful solutions.",
        ];
      }
    };

    // If we have a valid resumeId (not "new" and not null), try to get AI suggestions
    if (resumeId && resumeId !== "new") {
      try {
        // Use the summaryOnly parameter to get complete summary rewrites
        // Add length parameter and randomSeed to ensure we get different results each time
        const res = await apiRequest(
          "GET",
          `/api/resumes/${resumeId}/suggestions?summaryOnly=true&length=${length}&seed=${generationCount}`,
        );
        const data = await res.json();

        if (
          data.success &&
          data.suggestions &&
          Array.isArray(data.suggestions)
        ) {
          setSummaries(data.suggestions.slice(0, 3));
          setIsGenerating(false);
          return;
        }
      } catch (error) {
        console.error("Error generating summaries:", error);
      }
    }

    // If we get here, either the API call failed or we don't have a valid resumeId
    // Use the fallback summaries
    setSummaries(getFallbackSummaries(length));
    setIsGenerating(false);
  };

  return (
    <div>
      {summaries.length === 0 ? (
        <div className="space-y-4 py-3">
          <div className="text-center">
            <h4 className="text-sm font-medium text-blue-300 mb-2">
              Choose Summary Length
            </h4>
            <div className="flex space-x-2 mb-4">
              <Button
                onClick={() => handleGenerateSummaries("short")}
                disabled={isGenerating}
                variant="outline"
                size="sm"
                className="flex-1 border-blue-500/30 text-blue-200 hover:bg-blue-900/30 hover:text-blue-100"
              >
                Short
              </Button>
              <Button
                onClick={() => handleGenerateSummaries("medium")}
                disabled={isGenerating}
                variant="outline"
                size="sm"
                className="flex-1 border-blue-500/30 text-blue-200 hover:bg-blue-900/30 hover:text-blue-100"
              >
                Medium
              </Button>
              <Button
                onClick={() => handleGenerateSummaries("long")}
                disabled={isGenerating}
                variant="outline"
                size="sm"
                className="flex-1 border-blue-500/30 text-blue-200 hover:bg-blue-900/30 hover:text-blue-100"
              >
                Long
              </Button>
            </div>
          </div>

          <Button
            onClick={() => handleGenerateSummaries("medium")}
            disabled={isGenerating}
            variant="outline"
            className="w-full flex items-center justify-center gap-2 bg-[rgba(20,30,70,0.6)] border-blue-500/30 text-blue-100"
          >
            {isGenerating ? (
              <>
                <Loader2 className="h-4 w-4 animate-spin" />
                Generating summaries...
              </>
            ) : (
              <>
                <Sparkles className="h-4 w-4" />
                Generate AI summaries
              </>
            )}
          </Button>
        </div>
      ) : (
        <div className="space-y-3">
          {summaries.map((summary, index) => (
            <div
              key={index}
              className="bg-[rgba(20,30,70,0.6)] p-3 rounded-md border border-blue-500/30 text-sm relative group backdrop-blur-sm"
            >
              <p className="text-gray-200">{summary}</p>
              <Button
                onClick={() => onApply(summary)}
                size="sm"
                className="mt-2 w-full flex items-center justify-center gap-1 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 border-0"
              >
                <Check className="h-3 w-3" />
                Use this summary
              </Button>
            </div>
          ))}
          <div className="flex space-x-2">
            <Button
              onClick={() => handleGenerateSummaries("short")}
              variant="ghost"
              size="sm"
              className="flex-1 items-center justify-center text-blue-400 hover:text-blue-300 hover:bg-blue-900/30"
            >
              <RefreshCw className="h-3 w-3 mr-1" />
              Short
            </Button>
            <Button
              onClick={() => handleGenerateSummaries("medium")}
              variant="ghost"
              size="sm"
              className="flex-1 items-center justify-center text-blue-400 hover:text-blue-300 hover:bg-blue-900/30"
            >
              <RefreshCw className="h-3 w-3 mr-1" />
              Medium
            </Button>
            <Button
              onClick={() => handleGenerateSummaries("long")}
              variant="ghost"
              size="sm"
              className="flex-1 items-center justify-center text-blue-400 hover:text-blue-300 hover:bg-blue-900/30"
            >
              <RefreshCw className="h-3 w-3 mr-1" />
              Long
            </Button>
          </div>
        </div>
      )}
    </div>
  );
}

// Component for experience bullet point AI suggestions
interface ExperienceSuggestionsProps {
  resumeId: string;
  jobTitle?: string;
  onApply: (bulletPoint: string) => void;
}

type BulletLength = "short" | "medium" | "long";

function ExperienceSuggestions({
  resumeId,
  jobTitle,
  onApply,
}: ExperienceSuggestionsProps) {
  const { toast } = useToast();
  const [isGenerating, setIsGenerating] = useState(false);
  const [bulletPoints, setBulletPoints] = useState<string[]>([]);
  const [lastUsedLength, setLastUsedLength] = useState<BulletLength>("medium");
  const [generationCount, setGenerationCount] = useState(0);
  const [refreshCount, setRefreshCount] = useState<
    Record<BulletLength, number>
  >({
    short: 0,
    medium: 0,
    long: 0,
  });

  // Generate AI bullet points for experience section with length options
  const handleGenerateBulletPoints = async (
    length: BulletLength = "medium",
  ) => {
    setIsGenerating(true);

    // Reset refresh count if changing length type
    if (lastUsedLength !== length) {
      setLastUsedLength(length);
      setGenerationCount((prev) => prev + 1);
      setRefreshCount((prev) => ({ ...prev, [length]: 0 }));
    } else {
      // Increment refresh count for this length type
      const newRefreshCount = refreshCount[length] + 1;

      // Only allow up to 5 refreshes per length type
      if (newRefreshCount <= 5) {
        setRefreshCount((prev) => ({ ...prev, [length]: newRefreshCount }));
        setGenerationCount((prev) => prev + 1);
      } else {
        toast({
          title: "Refresh limit reached",
          description:
            "You've reached the maximum number of refreshes. Try a different style option.",
          variant: "default",
        });
        setIsGenerating(false);
        return;
      }
    }

    // Generate fallback bullet points based on job title and length
    const getFallbackBulletPoints = (length: BulletLength) => {
      const jobTitle_safe = jobTitle || "professional";

      // Short bullet points
      if (length === "short") {
        return [
          `Improved ${jobTitle_safe} processes by 30%.`,
          `Led cross-functional teams to deliver key projects.`,
          `Reduced costs by 25% through strategic optimization.`,
          `Increased customer satisfaction scores to 95%.`,
          `Implemented innovative solutions with measurable results.`,
        ];
      }
      // Long bullet points
      else if (length === "long") {
        return [
          `Spearheaded a comprehensive overhaul of ${jobTitle_safe} processes, resulting in a 30% increase in operational efficiency while simultaneously reducing implementation costs by $150,000 annually and improving team morale through more streamlined workflows.`,
          `Led cross-functional team of 12 professionals in the successful delivery of 5 high-priority projects valued at $2.3M collectively, consistently meeting or exceeding stakeholder expectations while maintaining budget constraints and aggressive timeline requirements.`,
          `Implemented innovative ${jobTitle_safe} solutions that dramatically improved data processing capabilities by 45%, resulting in faster decision-making processes and enabling the business to respond more effectively to rapidly changing market conditions.`,
          `Developed and executed strategic initiatives that increased departmental productivity by 37% within the first quarter, recognized by senior leadership for exceptional performance and promoted to lead advanced projects with greater scope and complexity.`,
          `Redesigned critical ${jobTitle_safe} infrastructure, resulting in 99.9% uptime, a 28% reduction in maintenance costs, and significantly enhanced user experience as measured by a 40-point improvement in Net Promoter Score.`,
        ];
      }
      // Medium bullet points (default)
      else {
        return [
          `Implemented innovative solutions for ${jobTitle_safe} role, resulting in 35% efficiency improvement and $120K annual savings.`,
          `Led key projects as ${jobTitle_safe}, delivering results ahead of schedule and under budget while maintaining high quality standards.`,
          `Collaborated with cross-functional teams to enhance ${jobTitle_safe}-related processes, improving workflow efficiency by 28%.`,
          `Increased performance metrics by 40% through optimization of processes and implementation of best practices in the ${jobTitle_safe} department.`,
          `Developed and implemented testing protocols that reduced time by 25% while improving quality outcomes and customer satisfaction.`,
        ];
      }
    };

    // If we have a valid resumeId (not "new" and not null), try to get AI suggestions
    if (resumeId && resumeId !== "new") {
      try {
        // Use the experienceOnly parameter to get ATS-optimized bullet points
        let url = `/api/resumes/${resumeId}/suggestions?experienceOnly=true&length=${length}&seed=${generationCount}`;
        if (jobTitle) {
          url += `&jobTitle=${encodeURIComponent(jobTitle)}`;
        }

        const res = await apiRequest("GET", url);
        const data = await res.json();

        if (
          data.success &&
          data.suggestions &&
          Array.isArray(data.suggestions)
        ) {
          setBulletPoints(data.suggestions);
          setIsGenerating(false);
          return;
        }
      } catch (error) {
        console.error("Error generating experience bullet points:", error);
      }
    }

    // If we get here, either the API call failed or we don't have a valid resumeId
    setBulletPoints(getFallbackBulletPoints(length));
    setIsGenerating(false);
  };

  return (
    <div>
      {bulletPoints.length === 0 ? (
        <div className="space-y-4 py-3">
          <div className="text-center">
            <h4 className="text-sm font-medium text-blue-300 mb-2">
              Choose Bullet Point Style
            </h4>
            <div className="flex space-x-2 mb-4">
              <Button
                onClick={() => handleGenerateBulletPoints("short")}
                disabled={isGenerating}
                variant="outline"
                size="sm"
                className="flex-1 border-blue-500/30 text-blue-200 hover:bg-blue-900/30 hover:text-blue-100"
              >
                Concise
              </Button>
              <Button
                onClick={() => handleGenerateBulletPoints("medium")}
                disabled={isGenerating}
                variant="outline"
                size="sm"
                className="flex-1 border-blue-500/30 text-blue-200 hover:bg-blue-900/30 hover:text-blue-100"
              >
                Standard
              </Button>
              <Button
                onClick={() => handleGenerateBulletPoints("long")}
                disabled={isGenerating}
                variant="outline"
                size="sm"
                className="flex-1 border-blue-500/30 text-blue-200 hover:bg-blue-900/30 hover:text-blue-100"
              >
                Detailed
              </Button>
            </div>
          </div>

          <Button
            onClick={() => handleGenerateBulletPoints("medium")}
            disabled={isGenerating}
            variant="outline"
            className="w-full flex items-center justify-center gap-2 bg-[rgba(20,30,70,0.6)] border-blue-500/30 text-blue-100"
          >
            {isGenerating ? (
              <>
                <Loader2 className="h-4 w-4 animate-spin" />
                Generating bullet points...
              </>
            ) : (
              <>
                <Sparkles className="h-4 w-4" />
                Generate ATS-optimized bullet points
              </>
            )}
          </Button>
          <p className="text-xs text-gray-400 mt-2">
            Creates achievement-focused bullet points with keywords that ATS
            systems scan for
          </p>
        </div>
      ) : (
        <div className="space-y-3">
          {bulletPoints.map((bulletPoint, index) => (
            <div
              key={index}
              className="bg-[rgba(20,30,70,0.6)] p-3 rounded-md border border-blue-500/30 text-sm relative group backdrop-blur-sm"
            >
              <p className="text-gray-200">{bulletPoint}</p>
              <Button
                onClick={() => onApply(bulletPoint)}
                size="sm"
                className="mt-2 w-full flex items-center justify-center gap-1 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 border-0"
              >
                <Check className="h-3 w-3" />
                Use this bullet point
              </Button>
            </div>
          ))}
          <div className="flex space-x-2">
            <Button
              onClick={() => handleGenerateBulletPoints("short")}
              variant="ghost"
              size="sm"
              className="flex-1 items-center justify-center text-blue-400 hover:text-blue-300 hover:bg-blue-900/30"
            >
              <RefreshCw className="h-3 w-3 mr-1" />
              Concise
            </Button>
            <Button
              onClick={() => handleGenerateBulletPoints("medium")}
              variant="ghost"
              size="sm"
              className="flex-1 items-center justify-center text-blue-400 hover:text-blue-300 hover:bg-blue-900/30"
            >
              <RefreshCw className="h-3 w-3 mr-1" />
              Standard
            </Button>
            <Button
              onClick={() => handleGenerateBulletPoints("long")}
              variant="ghost"
              size="sm"
              className="flex-1 items-center justify-center text-blue-400 hover:text-blue-300 hover:bg-blue-900/30"
            >
              <RefreshCw className="h-3 w-3 mr-1" />
              Detailed
            </Button>
          </div>
        </div>
      )}
    </div>
  );
}

// Component for skills AI suggestions
interface SkillSuggestionsProps {
  resumeId: string;
  jobTitle?: string;
  onApply: (skill: string) => void;
}

type SkillsCategory = "technical" | "soft" | "industry";

function SkillSuggestions({
  resumeId,
  jobTitle,
  onApply,
}: SkillSuggestionsProps) {
  const { toast } = useToast();
  const [isGenerating, setIsGenerating] = useState(false);
  const [skills, setSkills] = useState<string[]>([]);
  const [lastUsedCategory, setLastUsedCategory] =
    useState<SkillsCategory>("technical");
  const [generationCount, setGenerationCount] = useState(0);
  const [refreshCount, setRefreshCount] = useState<
    Record<SkillsCategory, number>
  >({
    technical: 0,
    soft: 0,
    industry: 0,
  });

  // Generate AI skill suggestions with category options
  const handleGenerateSkills = async (
    category: SkillsCategory = "technical",
  ) => {
    setIsGenerating(true);

    // Reset refresh count if changing category type
    if (lastUsedCategory !== category) {
      setLastUsedCategory(category);
      setGenerationCount((prev) => prev + 1);
      setRefreshCount((prev) => ({ ...prev, [category]: 0 }));
    } else {
      // Increment refresh count for this category
      const newRefreshCount = refreshCount[category] + 1;

      // Only allow up to 5 refreshes per category
      if (newRefreshCount <= 5) {
        setRefreshCount((prev) => ({ ...prev, [category]: newRefreshCount }));
        setGenerationCount((prev) => prev + 1);
      } else {
        toast({
          title: "Refresh limit reached",
          description:
            "You've reached the maximum number of refreshes. Try a different skill category.",
          variant: "default",
        });
        setIsGenerating(false);
        return;
      }
    }

    // Generate fallback skills based on job title and category
    const getFallbackSkills = (category: SkillsCategory) => {
      const jobTitle_safe = jobTitle || "professional";

      // Technical skills
      if (category === "technical") {
        if (
          jobTitle_safe.toLowerCase().includes("developer") ||
          jobTitle_safe.toLowerCase().includes("engineer")
        ) {
          return [
            "JavaScript",
            "React",
            "Node.js",
            "TypeScript",
            "GraphQL",
            "AWS",
            "Docker",
            "CI/CD",
            "Git",
            "Agile Methodologies",
            "Python",
            "RESTful APIs",
            "SQL",
            "NoSQL",
            "Cloud Architecture",
          ];
        } else if (jobTitle_safe.toLowerCase().includes("design")) {
          return [
            "UI/UX Design",
            "Figma",
            "Adobe Creative Suite",
            "Wireframing",
            "Prototyping",
            "User Research",
            "Design Systems",
            "Typography",
            "Responsive Design",
            "Design Thinking",
            "Information Architecture",
          ];
        } else {
          return [
            "Microsoft Office",
            "SQL",
            "Database Management",
            "CRM Systems",
            "Business Intelligence",
            "Data Analysis",
            "Project Management Software",
            "ERP Systems",
            "Cloud Computing",
            "Digital Marketing Tools",
          ];
        }
      }
      // Soft skills
      else if (category === "soft") {
        return [
          "Communication",
          "Leadership",
          "Problem Solving",
          "Critical Thinking",
          "Teamwork",
          "Adaptability",
          "Time Management",
          "Emotional Intelligence",
          "Conflict Resolution",
          "Creativity",
          "Decision Making",
          "Active Listening",
        ];
      }
      // Industry-specific skills
      else {
        if (
          jobTitle_safe.toLowerCase().includes("developer") ||
          jobTitle_safe.toLowerCase().includes("engineer")
        ) {
          return [
            "Machine Learning",
            "Blockchain",
            "AR/VR Development",
            "IoT",
            "Cybersecurity",
            "DevOps",
            "Microservices",
            "Serverless Architecture",
            "API Gateway",
            "Kubernetes",
            "Containerization",
          ];
        } else if (jobTitle_safe.toLowerCase().includes("design")) {
          return [
            "Motion Graphics",
            "Augmented Reality Design",
            "Interaction Design",
            "Design Strategy",
            "Accessibility",
            "Brand Strategy",
            "Visual Identity",
            "UX Writing",
            "Product Design",
            "Design Sprints",
          ];
        } else if (jobTitle_safe.toLowerCase().includes("manager")) {
          return [
            "Agile Management",
            "Strategic Planning",
            "Stakeholder Management",
            "KPI Development",
            "Operational Excellence",
            "Change Management",
            "Risk Management",
            "Vendor Management",
            "Budget Forecasting",
          ];
        } else {
          return [
            "Industry Standards",
            "Regulatory Compliance",
            "Market Analysis",
            "Forecasting",
            "Process Optimization",
            "Quality Assurance",
            "Benchmarking",
            "Continuous Improvement",
            "Six Sigma",
          ];
        }
      }
    };

    // If we have a valid resumeId (not "new" and not null), try to get AI suggestions
    if (resumeId && resumeId !== "new") {
      try {
        // Use the skillsOnly parameter to get ATS-optimized skills
        // Add category parameter and randomSeed to ensure we get different results each time
        let url = `/api/resumes/${resumeId}/suggestions?skillsOnly=true&category=${category}&seed=${generationCount}`;
        if (jobTitle) {
          url += `&jobTitle=${encodeURIComponent(jobTitle)}`;
        }

        const res = await apiRequest("GET", url);
        const data = await res.json();

        if (
          data.success &&
          data.suggestions &&
          Array.isArray(data.suggestions)
        ) {
          setSkills(data.suggestions);
          setIsGenerating(false);
          return;
        }
      } catch (error) {
        console.error("Error generating skill suggestions:", error);
      }
    }

    // If we get here, either the API call failed or we don't have a valid resumeId
    setSkills(getFallbackSkills(category));
    setIsGenerating(false);
  };

  return (
    <div>
      {skills.length === 0 ? (
        <div className="space-y-4 py-3">
          <div className="text-center">
            <h4 className="text-sm font-medium text-blue-300 mb-2">
              Choose Skill Categories
            </h4>
            <div className="flex space-x-2 mb-4">
              <Button
                onClick={() => handleGenerateSkills("technical")}
                disabled={isGenerating}
                variant="outline"
                size="sm"
                className="flex-1 border-blue-500/30 text-blue-200 hover:bg-blue-900/30 hover:text-blue-100"
              >
                Technical
              </Button>
              <Button
                onClick={() => handleGenerateSkills("soft")}
                disabled={isGenerating}
                variant="outline"
                size="sm"
                className="flex-1 border-blue-500/30 text-blue-200 hover:bg-blue-900/30 hover:text-blue-100"
              >
                Soft Skills
              </Button>
              <Button
                onClick={() => handleGenerateSkills("industry")}
                disabled={isGenerating}
                variant="outline"
                size="sm"
                className="flex-1 border-blue-500/30 text-blue-200 hover:bg-blue-900/30 hover:text-blue-100"
              >
                Industry
              </Button>
            </div>
          </div>

          <Button
            onClick={() => handleGenerateSkills("technical")}
            disabled={isGenerating}
            variant="outline"
            className="w-full flex items-center justify-center gap-2 bg-[rgba(20,30,70,0.6)] border-blue-500/30 text-blue-100"
          >
            {isGenerating ? (
              <>
                <Loader2 className="h-4 w-4 animate-spin" />
                Generating skills...
              </>
            ) : (
              <>
                <Sparkles className="h-4 w-4" />
                Generate ATS-friendly skills
              </>
            )}
          </Button>
          <p className="text-xs text-gray-400 mt-2">
            Suggests skills that align with your experience and are frequently
            scanned by ATS systems
          </p>
        </div>
      ) : (
        <div>
          <div className="flex flex-wrap gap-2 mb-3">
            {skills.map((skill, index) => (
              <Badge
                key={index}
                variant="outline"
                className="py-1 px-3 cursor-pointer hover:bg-blue-600/30 flex items-center gap-1 bg-[rgba(20,30,70,0.6)] text-blue-100 border-blue-500/30 backdrop-blur-sm"
                onClick={() => onApply(skill)}
              >
                {skill}
                <span className="text-xs text-blue-400">
                  <Plus className="h-3 w-3" />
                </span>
              </Badge>
            ))}
          </div>
          <div className="flex space-x-2">
            <Button
              onClick={() => handleGenerateSkills("technical")}
              variant="ghost"
              size="sm"
              className="flex-1 items-center justify-center text-blue-400 hover:text-blue-300 hover:bg-blue-900/30"
            >
              <RefreshCw className="h-3 w-3 mr-1" />
              Technical
            </Button>
            <Button
              onClick={() => handleGenerateSkills("soft")}
              variant="ghost"
              size="sm"
              className="flex-1 items-center justify-center text-blue-400 hover:text-blue-300 hover:bg-blue-900/30"
            >
              <RefreshCw className="h-3 w-3 mr-1" />
              Soft Skills
            </Button>
            <Button
              onClick={() => handleGenerateSkills("industry")}
              variant="ghost"
              size="sm"
              className="flex-1 items-center justify-center text-blue-400 hover:text-blue-300 hover:bg-blue-900/30"
            >
              <RefreshCw className="h-3 w-3 mr-1" />
              Industry
            </Button>
          </div>
        </div>
      )}
    </div>
  );
}

// ... (previous imports remain unchanged)

// Preview component for the "Preview" section
// This component has been replaced by ResumePreviewComponent

function ResumePreviewComponent({ resume, onTemplateChange, onDownload }: { resume: Resume; onTemplateChange: (template: string) => void; onDownload?: () => void }) {
  // Local state for downloading
  const [isDownloading, setIsDownloading] = useState(false);

  // Function to handle download with progress indicator
  const handleDownload = async () => {
    if (isDownloading) return; // Prevent multiple clicks

    setIsDownloading(true);

    try {
      if (onDownload) {
        await onDownload();
      } else {
        // Fallback to print dialog if no download function provided
        window.print();
      }
    } catch (error) {
      console.error('Download error:', error);
      // Fallback to print dialog
      window.print();
    } finally {
      setIsDownloading(false);
    }
  };
  // Calculate an initial scale that will fit most resumes in the viewport
  // Starting with 0.85 instead of 1.0 to show more content initially
  const [scale, setScale] = useState(0.85); 
  const [isFullScreen, setIsFullScreen] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [isAutoAdjusting, setIsAutoAdjusting] = useState(false);
  const [editedResume, setEditedResume] = useState<Resume>(resume);
  const [fontScale, setFontScale] = useState(1); // For auto-adjusting font size
  const [spacingScale, setSpacingScale] = useState(1); // For auto-adjusting spacing
  const previewRef = useRef<HTMLDivElement>(null);
  const resumeContainerRef = useRef<HTMLDivElement>(null);
  const { toast } = useToast();

  // Generate actual PDF file for download
  const downloadResume = async () => {
    try {
      // First set optimal settings for PDF generation
      const originalScale = scale;
      const originalFontScale = fontScale;
      const originalSpacingScale = spacingScale;

      // Set to 100% scale, reset font and spacing scales to 1
      setScale(1.0);
      setFontScale(1);
      setSpacingScale(1);

      // Add a loading toast to show progress
      toast({
        title: "Preparing PDF",
        description: "Optimizing your resume for PDF download...",
      });

      // Wait for the scale changes to apply
      setTimeout(async () => {
        if (!previewRef.current) return;

        // Create a virtual link element
        const link = document.createElement('a');

        // Generate a filename with the person's name (if available) or a default name
        const name = resume?.personalInfo?.firstName && resume?.personalInfo?.lastName ? 
          `${resume.personalInfo.firstName}_${resume.personalInfo.lastName}` : 
          'Resume';
        const fileName = `${name.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.pdf`;

        // Try server-side PDF generation first, then fall back to print dialog
        try {
          // Create a form to send to the server for PDF generation
          const formData = new FormData();
          formData.append('resumeData', JSON.stringify(resume));
          formData.append('template', resume.template || 'professional');

          // Send the resume data to the server for PDF generation
          const response = await fetch('/api/generate-pdf', {
            method: 'POST',
            body: formData
          });

          if (!response.ok) throw new Error('Failed to generate PDF');

          // Get the PDF blob from the response
          const blob = await response.blob();

          // Create a URL for the blob
          const url = window.URL.createObjectURL(blob);

          // Set up the download link
          link.href = url;
          link.download = fileName;
          link.click();

          // Clean up
          window.URL.revokeObjectURL(url);

          toast({
            title: "PDF Downloaded",
            description: `Your resume has been downloaded as ${fileName}`,
          });
        } catch (error) {
          console.error('Error downloading PDF from server:', error);

          // If server-side generation fails, try client-side printing
          toast({
            title: "Using Print Dialog",
            description: "Server PDF generation failed. Using browser print dialog instead.",
          });

          // Add print-specific styles to the document
          const style = document.createElement('style');
          style.id = 'print-resume-style';
          style.innerHTML = `
            @media print {
              body * {
                visibility: hidden;
              }
              #${previewRef.current.id || 'resume-preview'}, #${previewRef.current.id || 'resume-preview'} * {
                visibility: visible;
              }
              #${previewRef.current.id || 'resume-preview'} {
                position: absolute;
                left: 0;
                top: 0;
                width: 210mm;
                height: 297mm;
                margin: 0;
                padding: 0;
                transform: scale(1) !important;
              }
            }
          `;
          document.head.appendChild(style);

          // Create a unique id for the preview element if it doesn't have one
          if (!previewRef.current.id) {
            previewRef.current.id = 'resume-preview';
          }

          // Trigger print dialog after a brief delay
          setTimeout(() => {
            window.print();

            // Remove the print styles after printing
            setTimeout(() => {
              const printStyle = document.getElementById('print-resume-style');
              if (printStyle) document.head.removeChild(printStyle);
            }, 1000);
          }, 500);
        }

        // Restore the original scales
        setTimeout(() => {
          setScale(originalScale);
          setFontScale(originalFontScale);
          setSpacingScale(originalSpacingScale);
        }, 1000);
      }, 300);
    } catch (error) {
      console.error('Error preparing PDF download:', error);

      // Fall back to basic print dialog as last resort
      window.print();

      toast({
        title: "Using Print Dialog",
        description: "There was an issue preparing the PDF. Using browser print dialog instead.",
        variant: "destructive"
      });

      // Reset the scales
      setScale(0.85);
      setFontScale(1);
      setSpacingScale(1);
    }
  };

  // Toggle fullscreen mode
  const toggleFullScreen = () => {
    setIsFullScreen(!isFullScreen);
  };

  // Toggle edit mode
  const toggleEdit = () => {
    setIsEditing(!isEditing);
    if (isEditing) {
      // Apply changes from editedResume to the actual resume
      onTemplateChange(editedResume.template);

      // Dispatch event to update parent component
      const event = new CustomEvent('resumeEdited', {
        detail: { resume: editedResume }
      });
      document.dispatchEvent(event);
    }
  };

  // Handle field changes in the edit mode
  const handleFieldChange = (
    section: string,
    field: string,
    value: string,
    index?: number
  ) => {
    setEditedResume((prev) => {
      const newResume = { ...prev };

      if (section === "personalInfo") {
        newResume.personalInfo = { 
          ...newResume.personalInfo, 
          [field]: value 
        };
      } else if (section === "experience" && typeof index === 'number') {
        newResume.experience = [...newResume.experience];
        newResume.experience[index] = { 
          ...newResume.experience[index], 
          [field]: value 
        };
      } else if (section === "education" && typeof index === 'number') {
        newResume.education = [...newResume.education];
        newResume.education[index] = { 
          ...newResume.education[index], 
          [field]: value 
        };
      } else if (section === "skills" && typeof index === 'number') {
        newResume.skills = [...newResume.skills];
        newResume.skills[index] = { 
          ...newResume.skills[index], 
          [field]: value 
        };
      }

      return newResume;
    });
  };

  // Auto-adjust feature to fit content on one page
  const autoAdjust = () => {
    setIsAutoAdjusting(true);

    // First reset to default scale to get accurate measurements
    setScale(1.0);

    // Intelligent scaling algorithm to fit content
    setTimeout(() => {
      if (!previewRef.current) {
        setIsAutoAdjusting(false);
        return;
      }

      const contentHeight = previewRef.current.scrollHeight;
      const containerHeight = 297 * 3.78; // A4 height in pixels (297mm converted to px)

      // Calculate the required scaling factors
      const heightRatio = containerHeight / contentHeight;

      // Log for debugging
      console.log('Content height:', contentHeight, 'Container height:', containerHeight, 'Ratio:', heightRatio);

      // Apply the scaling depending on whether content is too large
      if (heightRatio < 1) {
        // Content is too large, scale down the font and spacing gradually

        // Calculate optimal font scaling - more gentle reduction for minor overflows
        let newFontScale = 1;
        if (heightRatio >= 0.9) { // Minor overflow (less than 10%)
          newFontScale = Math.max(0.9, heightRatio * 0.98);
        } else if (heightRatio >= 0.8) { // Moderate overflow (10-20%)
          newFontScale = Math.max(0.8, heightRatio * 0.95);
        } else { // Major overflow (>20%)
          newFontScale = Math.max(0.7, heightRatio * 0.9);
        }

        // Spacing can be reduced more aggressively than font size
        const newSpacingScale = Math.max(0.7, heightRatio * 0.85);

        // Set new scales
        setFontScale(newFontScale);
        setSpacingScale(newSpacingScale);

        // Also adjust the view scale for better visibility if content is very large
        if (heightRatio < 0.7) {
          // For very large content, zoom out to see more
          setScale(0.8);
        } else {
          // For moderately large content, keep scale at 0.85
          setScale(0.85);
        }

        toast({
          title: "Smart Fit Applied",
          description: `Content adjusted to fit on one page (${Math.round(newFontScale * 100)}% text scale)`,
        });
      } else {
        // Content fits already, reset to default
        setFontScale(1);
        setSpacingScale(1);

        // Set view scale to show the full page
        setScale(0.85);

        toast({
          title: "Smart Fit Reset",
          description: "Your content already fits on one page. Using default sizes.",
        });
      }

      setIsAutoAdjusting(false);
    }, 500);
  };

  // Keep editedResume in sync with resume props changes
  useEffect(() => {
    setEditedResume(resume);
  }, [resume]);

  return (
    <div className="space-y-4">
      {/* Controls */}
      <div className="flex flex-wrap justify-between items-center mb-4 gap-2">
        <div className="flex items-center gap-2">
          <h3 className="text-lg font-medium text-white">Resume Preview</h3>
          <Badge variant="outline" className="text-blue-300 border-blue-300/30">
            {Math.round(scale * 100)}%
          </Badge>
        </div>
        <div className="flex gap-2">
          <Button
            variant="outline"
            size="sm"
            onClick={() => setScale(Math.max(0.5, scale - 0.1))}
            disabled={scale <= 0.5}
            className="flex items-center text-white border-white/20 hover:bg-white/10"
          >
            <Minus className="h-4 w-4" />
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={() => setScale(Math.min(1.5, scale + 0.1))}
            disabled={scale >= 1.5}
            className="flex items-center text-white border-white/20 hover:bg-white/10"
          >
            <Plus className="h-4 w-4" />
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={autoAdjust}
            disabled={isAutoAdjusting}
            className="flex items-center gap-1 text-white border-white/20 hover:bg-white/10"
            title="Automatically adjust font size and spacing to fit content on one page without changing zoom level"
          >
            {isAutoAdjusting ? (
              <Loader2 className="h-4 w-4 animate-spin" />
            ) : (
              <Zap className="h-4 w-4" />
            )}
            Smart Fit
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={toggleFullScreen}
            className="flex items-center gap-1 text-white border-white/20 hover:bg-white/10"
          >
            <Maximize2 className="h-4 w-4" />
            {isFullScreen ? "Exit Full Screen" : "Full Screen"}
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={toggleEdit}
            className="flex items-center gap-1 text-white border-white/20 hover:bg-white/10"
          >
            {isEditing ? (
              <>
                <Check className="h-4 w-4" />
                Save
              </>
            ) : (
              <>
                <FileText className="h-4 w-4" />
                Edit
              </>
            )}
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={handleDownload}
            className="flex items-center gap-1 text-white border-white/20 hover:bg-white/10"
            disabled={isDownloading}
          >
            {isDownloading ? (
              <Loader2 className="h-4 w-4 animate-spin mr-1" />
            ) : (
              <Download className="h-4 w-4 mr-1" />
            )}
            {isDownloading ? "Generating..." : "Download PDF"}
          </Button>
        </div>
      </div>

      {/* Resume Preview */}
      <div
        ref={resumeContainerRef}
        className={cn(
          "bg-white/5 backdrop-blur-sm rounded-xl border border-white/10 shadow-xl overflow-auto scroll-smooth",
          isFullScreen
            ? "fixed inset-0 z-50 m-0 p-8 bg-black/90"
            : "p-4 h-[80vh] flex items-center justify-center" // Center the preview vertically and horizontally
        )}
      >
        <div
          ref={previewRef}
          className="resume-content-container transition-all duration-300 mx-auto bg-white shadow-lg print:shadow-none"
          data-font-scale={fontScale.toString()}
          data-spacing-scale={spacingScale.toString()}
          style={{
            transform: `scale(${scale})`,
            width: "210mm", // A4 width
            minHeight: "297mm", // A4 height (minimum to ensure proper proportions)
            maxHeight: "297mm", // A4 height (maximum to ensure proper proportions)
            transformOrigin: "center", // Center transform origin for better viewing 
            fontSize: `${fontScale * 100}%`, // Dynamic font scaling
            lineHeight: `${spacingScale * 1.5}`, // Dynamic line height scaling
            overflowY: isEditing ? "auto" : "hidden", // Hide overflow when not editing
            boxShadow: "0 4px 24px rgba(0, 0, 0, 0.15)", // Add shadow for better visibility
            marginTop: scale < 1 ? "0" : "2rem", // Add margin when zoomed in
            marginBottom: scale < 1 ? "0" : "2rem", // Add margin when zoomed in
          }}
        >
          {isEditing ? (
            <div className="p-6 bg-white text-black h-full">
              {/* Personal Info Section */}
              <div className="mb-6 pb-4 border-b border-gray-200">
                <h2 className="text-2xl font-bold mb-2">
                  <Input
                    value={editedResume.personalInfo.firstName + " " + editedResume.personalInfo.lastName}
                    onChange={(e) => {
                      const [firstName, ...lastNameParts] = e.target.value.split(" ");
                      handleFieldChange("personalInfo", "firstName", firstName || "");
                      handleFieldChange("personalInfo", "lastName", lastNameParts.join(" ") || "");
                    }}
                    className="border border-gray-200 p-1 text-2xl font-bold w-full bg-white"
                  />
                </h2>
                <div className="flex flex-wrap gap-3 text-sm mb-4">
                  <div className="flex-1 min-w-[200px]">
                    <label className="text-xs text-gray-500 block mb-1">Email</label>
                    <Input
                      value={editedResume.personalInfo.email}
                      onChange={(e) => handleFieldChange("personalInfo", "email", e.target.value)}
                      className="border border-gray-200 p-1 text-sm w-full bg-white"
                      placeholder="Email"
                    />
                  </div>
                  <div className="flex-1 min-w-[200px]">
                    <label className="text-xs text-gray-500 block mb-1">Phone</label>
                    <Input
                      value={editedResume.personalInfo.phone}
                      onChange={(e) => handleFieldChange("personalInfo", "phone", e.target.value)}
                      className="border border-gray-200 p-1 text-sm w-full bg-white"
                      placeholder="Phone"
                    />
                  </div>
                </div>
                <div>
                  <RichTextEditor
                    label="Professional Summary"
                    value={editedResume.personalInfo.summary}
                    onChange={(value) => handleFieldChange("personalInfo", "summary", value)}
                    placeholder="Professional Summary"
                    rows={4}
                  />
                </div>
              </div>

              {/* Experience Section */}
              <div className="mb-6">
                <h3 className="text-lg font-semibold mb-3">Experience</h3>
                {editedResume.experience.map((exp, index) => (
                  <div key={exp.id} className="mb-4 pb-4 bg-gray-900/50 border border-blue-500/30 rounded-md p-4">
                    <div className="flex flex-wrap gap-3 mb-2">
                      <div className="flex-1 min-w-[200px]">
                        <label className="text-xs text-gray-500 block mb-1">Job Title</label>
                        <Input
                          value={exp.title}
                          onChange={(e) => handleFieldChange("experience", "title", e.target.value, index)}
                          className="cosmic-navy-input"
                        />
                      </div>
                      <div className="flex-1 min-w-[200px]">
                        <label className="text-xs text-gray-500 block mb-1">Company</label>
                        <Input
                          value={exp.company}
                          onChange={(e) => handleFieldChange("experience", "company", e.target.value, index)}
                          className="cosmic-navy-input"
                        />
                      </div>
                    </div>
                    <div className="flex flex-wrap gap-3 mb-2">
                      <div className="flex-1 min-w-[200px]">
                        <label className="text-xs text-gray-500 block mb-1">Start Date</label>
                        <Input
                          value={exp.startDate}
                          onChange={(e) => handleFieldChange("experience", "startDate", e.target.value, index)}
                          className="cosmic-navy-input"
                        />
                      </div>
                      <div className="flex-1 min-w-[200px]">
                        <label className="text-xs text-gray-500 block mb-1">End Date</label>
                        <Input
                          value={exp.endDate}
                          onChange={(e) => handleFieldChange("experience", "endDate", e.target.value, index)}
                          className="cosmic-navy-input"
                        />
                      </div>
                    </div>
                    <div>
                      <RichTextEditor
                        label="Description"
                        value={exp.description}
                        onChange={(value) => handleFieldChange("experience", "description", value, index)}
                        placeholder="Job description and achievements"
                        rows={3}
                      />
                    </div>
                  </div>
                ))}
              </div>

              {/* Skills Section */}
              <div className="mb-6">
                <h3 className="text-lg font-semibold mb-3">Skills</h3>
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-2">
                  {editedResume.skills.map((skill, index) => (
                    <div key={skill.id} className="bg-gray-900/50 border border-blue-500/30 rounded-md p-2">
                      <Input
                        value={skill.name}
                        onChange={(e) => handleFieldChange("skills", "name", e.target.value, index)}
                        className="cosmic-navy-input border-none p-0 text-sm w-full"
                      />
                    </div>
                  ))}
                </div>
              </div>

              {/* Education Section - Simplified */}
              <div className="mb-6">
                <h3 className="text-lg font-semibold mb-3">Education</h3>
                {editedResume.education.map((edu, index) => (
                  <div key={edu.id} className="mb-4 pb-4 bg-gray-900/50 border border-blue-500/30 rounded-md p-4">
                    <div className="flex flex-wrap gap-3 mb-2">
                      <div className="flex-1 min-w-[200px]">
                        <label className="text-xs text-gray-500 block mb-1">Degree</label>
                        <Input
                          value={edu.degree}
                          onChange={(e) => handleFieldChange("education", "degree", e.target.value, index)}
                          className="cosmic-navy-input"
                        />
                      </div>
                      <div className="flex-1 min-w-[200px]">
                        <label className="text-xs text-gray-500 block mb-1">Institution</label>
                        <Input
                          value={edu.institution}
                          onChange={(e) => handleFieldChange("education", "institution", e.target.value, index)}
                          className="cosmic-navy-input"
                        />
                      </div>
                    </div>
                    <div className="flex flex-wrap gap-3 mb-2">
                      <div className="flex-1 min-w-[200px]">
                        <label className="text-xs text-gray-500 block mb-1">Start Date</label>
                        <Input
                          value={edu.startDate}
                          onChange={(e) => handleFieldChange("education", "startDate", e.target.value, index)}
                          className="cosmic-navy-input"
                          placeholder="MM/YYYY"
                        />
                      </div>
                      <div className="flex-1 min-w-[200px]">
                        <label className="text-xs text-gray-500 block mb-1">End Date</label>
                        <Input
                          value={edu.endDate}
                          onChange={(e) => handleFieldChange("education", "endDate", e.target.value, index)}
                          className="cosmic-navy-input"
                          placeholder="MM/YYYY or Present"
                        />
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          ) : (
            <div className="bg-white text-black p-8">
              {resume.template === "creative" ? (
                <CreativeTemplate resume={resume} />
              ) : resume.template === "executive" ? (
                <ExecutiveTemplate resume={resume} />
              ) : resume.template === "modern" ? (
                <ModernTemplate resume={resume} />
              ) : resume.template === "minimal" ? (
                <MinimalTemplate resume={resume} />
              ) : resume.template === "industry" ? (
                <IndustryTemplate resume={resume} />
              ) : resume.template === "bold" ? (
                <BoldTemplate resume={resume} />
              ) : (
                <ProfessionalTemplate resume={resume} />
              )}
            </div>
          )}
        </div>
      </div>

      {/* Template Selection */}
      <div className="mt-8 bg-gray-900/50 border border-blue-500/30 rounded-md p-6">
        <h3 className="text-lg font-semibold mb-4 text-white">Choose a Template</h3>
        <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-4">
          {[
            { name: "professional", preview: TemplatePreviewProfessional },
            { name: "creative", preview: TemplatePreviewCreative },
            { name: "executive", preview: TemplatePreviewExecutive },
            { name: "modern", preview: TemplatePreviewModern },
            { name: "minimal", preview: TemplatePreviewMinimal },
            { name: "industry", preview: TemplatePreviewIndustry },
            { name: "bold", preview: TemplatePreviewBold },
          ].map((template) => (
            <div
              key={template.name}
              className={cn(
                "cursor-pointer p-3 rounded-lg transition-all backdrop-blur-sm",
                resume.template === template.name
                  ? "border-2 border-blue-500 shadow-lg bg-blue-500/10"
                  : "border border-white/20 hover:border-blue-400/50 hover:bg-blue-500/5"
              )}
              onClick={() => onTemplateChange(template.name)}
            >
              <div className="h-32 mb-2">
                <template.preview />
              </div>
              <h4 className="font-medium text-center text-white capitalize">{template.name}</h4>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

export default function ResumeBuilder() {
  const { toast } = useToast();
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [searchParams] = useState(
    () => new URLSearchParams(window.location.search),
  );

  const [resumeSaved, setResumeSaved] = useState(false);
  const [activeSection, setActiveSection] = useState<string>("profile");
  const [isUploading, setIsUploading] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [resumeId, setResumeId] = useState<number | null>(null);
  const [isTailoredResume, setIsTailoredResume] = useState<boolean>(
    searchParams.get("tailored") === "true",
  );
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [showTips, setShowTips] = useState<
    "summary" | "experience" | "skills" | null
  >(null);

  // Reference to the resume preview component
  const previewRef = useRef<HTMLDivElement>(null);

  // Function to download the resume as PDF
  const downloadResume = async () => {
    try {
      // Generate a clean printable HTML version of the resume
      const printableHTML = generatePrintableHTML(resume);

      // Generate a clean filename with the person's name or a default name
      const name = resume?.personalInfo?.firstName && resume?.personalInfo?.lastName ? 
        `${resume.personalInfo.firstName}_${resume.personalInfo.lastName}_Resume` : 
        'Resume';
      const fileName = `${name.replace(/\s+/g, '_')}`;

      toast({
        title: "Preparing Resume",
        description: "Opening print dialog...",
      });

      // Create a blob with the HTML content
      const blob = new Blob([printableHTML], { type: 'text/html' });
      const url = window.URL.createObjectURL(blob);

      // Open the HTML in a new window for printing
      const printWindow = window.open(url, '_blank');

      if (!printWindow) {
        throw new Error('Popup blocked. Please allow popups for this site.');
      }

      // Clean up the blob URL after the window is opened
      setTimeout(() => {
        window.URL.revokeObjectURL(url);
      }, 1000);

      toast({
        title: "Print Dialog Opened",
        description: "Use your browser's print function to save as PDF.",
      });
    } catch (error) {
      console.error('Error generating printable version:', error);

      // Fall back to the browser print dialog for the current page
      toast({
        title: "Using Print Dialog",
        description: "Failed to generate optimized version. Try printing this page directly.",
        variant: "destructive"
      });
    }
  };

  // Function to generate a clean, printable HTML version of the resume
  function generatePrintableHTML(resumeData: Resume): string {
    // Get current Smart Fit settings if they exist in the window object
    const smartFit = {
      // Check the previewRef's ResumePreviewComponent if possible
      fontScale: document.querySelector('.resume-content-container')?.getAttribute('data-font-scale') || '1',
      spacingScale: document.querySelector('.resume-content-container')?.getAttribute('data-spacing-scale') || '1'
    };

    // Convert to numbers
    const fontScale = parseFloat(smartFit.fontScale);
    const spacingScale = parseFloat(smartFit.spacingScale);

    console.log('Print with Smart Fit settings:', { fontScale, spacingScale });

    // Basic styling for the resume with Smart Fit adjustments applied
    const styles = `
      <style>
        @media print {
          @page { 
            size: A4;
            margin: 10mm;
          }
        }

        body {
          font-family: 'Arial', sans-serif;
          line-height: ${1.5 * spacingScale};
          color: #333;
          margin: 0;
          padding: 0;
          background: white;
          font-size: ${16 * fontScale}px;
        }

        .resume-container {
          width: 100%;
          max-width: 800px;
          margin: 0 auto;
          padding: 20px;
          box-sizing: border-box;
          background: white;
        }

        .header {
          text-align: center;
          margin-bottom: ${20 * spacingScale}px;
        }

        .header h1 {
          margin: 0;
          font-size: ${28 * fontScale}px;
          color: #2a3f5f;
        }

        .header .contact {
          margin-top: ${10 * spacingScale}px;
          font-size: ${14 * fontScale}px;
        }

        .section {
          margin-bottom: ${20 * spacingScale}px;
        }

        .section-title {
          font-size: ${18 * fontScale}px;
          font-weight: bold;
          border-bottom: 2px solid #2a3f5f;
          margin-bottom: ${10 * spacingScale}px;
          padding-bottom: ${5 * spacingScale}px;
          color: #2a3f5f;
        }

        .experience-item, .education-item, .project-item {
          margin-bottom: ${15 * spacingScale}px;
        }

        .item-header {
          display: flex;
          justify-content: space-between;
          font-weight: bold;
        }

        .item-title {
          font-weight: bold;
        }

        .item-subtitle {
          font-style: italic;
        }

        .item-date {
          color: #666;
        }

        .item-description {
          margin-top: ${5 * spacingScale}px;
        }

        .skills-list {
          display: flex;
          flex-wrap: wrap;
          gap: ${10 * spacingScale}px;
        }

        .skill-item {
          background-color: #f5f5f5;
          border-radius: 3px;
          padding: ${3 * spacingScale}px ${8 * spacingScale}px;
          font-size: ${14 * fontScale}px;
        }
      </style>
    `;

    // Get personal info
    const { firstName, lastName, email, phone, headline, summary } = resumeData.personalInfo;
    const fullName = `${firstName} ${lastName}`.trim() || 'Your Name';

    // Generate header section
    const headerSection = `
      <div class="header">
        <h1>${fullName}</h1>
        ${headline ? `<div class="headline">${headline}</div>` : ''}
        <div class="contact">
          ${email ? `<span>${email}</span>` : ''}
          ${email && phone ? ' | ' : ''}
          ${phone ? `<span>${phone}</span>` : ''}
        </div>
      </div>
    `;

    // Generate summary section
    const summarySection = summary ? `
      <div class="section">
        <div class="section-title">Summary</div>
        <div class="summary-content">${summary}</div>
      </div>
    ` : '';

    // Generate experience section
    let experienceSection = '';
    if (resumeData.experience && resumeData.experience.length > 0) {
      const experienceItems = resumeData.experience
        .map(exp => `
          <div class="experience-item">
            <div class="item-header">
              <span class="item-title">${exp.title || ''}</span>
              <span class="item-date">${exp.startDate || ''} - ${exp.endDate || 'Present'}</span>
            </div>
            <div class="item-subtitle">${exp.company || ''}</div>
            <div class="item-description">${exp.description || ''}</div>
          </div>
        `)
        .join('');

      experienceSection = `
        <div class="section">
          <div class="section-title">Experience</div>
          ${experienceItems}
        </div>
      `;
    }

    // Generate education section
    let educationSection = '';
    if (resumeData.education && resumeData.education.length > 0) {
      const educationItems = resumeData.education
        .map(edu => `
          <div class="education-item">
            <div class="item-header">
              <span class="item-title">${edu.degree || ''}</span>
              <span class="item-date">${edu.startDate || ''} - ${edu.endDate || ''}</span>
            </div>
            <div class="item-subtitle">${edu.institution || ''}</div>
            ${edu.description ? `<div class="item-description">${edu.description}</div>` : ''}
          </div>
        `)
        .join('');

      educationSection = `
        <div class="section">
          <div class="section-title">Education</div>
          ${educationItems}
        </div>
      `;
    }

    // Generate skills section
    let skillsSection = '';
    if (resumeData.skills && resumeData.skills.length > 0) {
      const skillItems = resumeData.skills
        .map(skill => `<div class="skill-item">${skill.name || ''}</div>`)
        .join('');

      skillsSection = `
        <div class="section">
          <div class="section-title">Skills</div>
          <div class="skills-list">
            ${skillItems}
          </div>
        </div>
      `;
    }

    // Generate projects section
    let projectsSection = '';
    if (resumeData.projects && resumeData.projects.length > 0) {
      const projectItems = resumeData.projects
        .map(project => `
          <div class="project-item">
            <div class="item-title">${project.title || ''}</div>
            <div class="item-description">${project.description || ''}</div>
            ${project.technologies && project.technologies.length ? 
              `<div class="item-technologies">Technologies: ${project.technologies.join(', ')}</div>` : ''}
            ${project.link ? `<div class="item-link">Link: ${project.link}</div>` : ''}
          </div>
        `)
        .join('');

      projectsSection = `
        <div class="section">
          <div class="section-title">Projects</div>
          ${projectItems}
        </div>
      `;
    }

    // Add auto-print script with styles to hide URL in footer
    const printScript = `
      <script>
        window.onload = function() {
          setTimeout(function() {
            window.print();
          }, 1000);
        };
      </script>
      <style>
        /* Hide URL/links in print footer */
        @media print {
          @page {
            margin-bottom: 0;
          }
          body {
            -webkit-print-color-adjust: exact !important;
            print-color-adjust: exact !important;
          }
          /* Hide any URLs that might appear in the footer when printing */
          html {
            height: 100vh;
            overflow: hidden;
          }
        }
      </style>
    `;

    // Combine all sections
    return `
      <!DOCTYPE html>
      <html lang="en">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>${fullName} - Resume</title>
        ${styles}
        ${printScript}
      </head>
      <body>
        <div class="resume-container">
          ${headerSection}
          ${summarySection}
          ${experienceSection}
          ${educationSection}
          ${skillsSection}
          ${projectsSection}
        </div>
      </body>
      </html>
    `;
  }

  // Initial resume state
  const [resume, setResume] = useState<Resume>({
    title: "My Professional Resume",
    personalInfo: {
      firstName: "",
      lastName: "",
      email: "",
      phone: "",
      headline: "",
      summary: "",
    },
    experience: [],
    education: [],
    skills: [],
    projects: [],
    template: "professional",
  });

  // Get all resumes for the load resume dropdown
  const { data: userResumes = [] } = useQuery({
    queryKey: ['/api/resumes'],
    enabled: true,
  });

  // Add a recovery mechanism - check if we have saved resume data in sessionStorage
  // and use it if the current resume is empty
  useEffect(() => {
    if (!resume.personalInfo.firstName && !resume.personalInfo.lastName) {
      try {
        // Try to recover from sessionStorage
        const savedData = sessionStorage.getItem('loadedResumeData');
        if (savedData) {
          const parsedData = JSON.parse(savedData);
          console.log("Recovering resume data from sessionStorage:", parsedData);

          if (parsedData.resumeData) {
            // Apply the recovered data if we don't already have data
            setResume(parsedData.resumeData as Resume);

            // If we know the ID, set it
            if (parsedData.resumeData.id) {
              setResumeId(parsedData.resumeData.id);
            }

            toast({
              title: "Resume Data Recovered",
              description: "Your resume data has been recovered from a previous session.",
            });
          }
        }
      } catch (error) {
        console.error("Error recovering resume data:", error);
      }
    }
  }, [resume]);

  // Parse URL parameters on component mount
  useEffect(() => {
    // Check for resume ID in URL parameters
    const resumeIdParam = searchParams.get("id");
    const isEditMode = searchParams.get("edit") === "true";

    if (resumeIdParam) {
      try {
        const id = parseInt(resumeIdParam, 10);
        if (!isNaN(id)) {
          setResumeId(id);

          // Check if we have pre-loaded resume data from editing
          if (isEditMode) {
            const storedResumeData = localStorage.getItem('editingResume');
            if (storedResumeData) {
              try {
                const parsedData = JSON.parse(storedResumeData);
                console.log("Found pre-loaded resume data:", parsedData);

                if (parsedData.resumeData) {
                  const resumeData = parsedData.resumeData;

                  // Process the resume data to ensure it has the proper structure
                  // The data comes with a nested 'content' object that contains all resume sections
                  const content = resumeData.content || {};

                  const completeResume = {
                    id: resumeData.id,
                    title: resumeData.title || "Untitled Resume",
                    personalInfo: {
                      firstName: content.personalInfo?.firstName || "",
                      lastName: content.personalInfo?.lastName || "",
                      email: content.personalInfo?.email || "",
                      phone: content.personalInfo?.phone || "",
                      headline: content.personalInfo?.headline || "",
                      summary: content.personalInfo?.summary || ""
                    },
                    experience: Array.isArray(content.experience) ? content.experience.map((exp: any) => ({
                      ...exp,
                      id: exp.id || crypto.randomUUID(),
                    })) : [],
                    education: Array.isArray(content.education) ? content.education.map((edu: any) => ({
                      ...edu,
                      id: edu.id || crypto.randomUUID(),
                    })) : [],
                    skills: Array.isArray(content.skills) ? content.skills.map((skill: any) => ({
                      ...skill,
                      id: skill.id || crypto.randomUUID(),
                    })) : [],
                    projects: Array.isArray(content.projects) ? content.projects.map((project: any) => ({
                      ...project,
                      id: project.id || crypto.randomUUID(),
                    })) : [],
                    template: resumeData.template || "professional"
                  };

                  // Update the resume state directly with the loaded data
                  setResume(completeResume as Resume);
                  setActiveSection("profile");

                  // Show success toast
                  toast({
                    title: "Resume Loaded Successfully",
                    description: `"${completeResume.title}" has been loaded for editing`,
                  });

                  // Clear the localStorage to prevent stale data
                  localStorage.removeItem('editingResume');
                }
              } catch (parseError) {
                console.error("Error parsing stored resume data:", parseError);
              }
            }
          }
        }
      } catch (e) {
        console.error("Error parsing resume ID from URL", e);
      }
    }

    // Check for template in URL parameters
    const templateParam = searchParams.get("template");
    if (templateParam) {
      setResume(prev => ({
        ...prev,
        template: templateParam
      }));
    }
  }, [searchParams]);

  // Fetch resume data if resumeId exists
  const { data: fetchedResume } = useQuery({
    queryKey: ["/api/resumes", resumeId],
    enabled: !!resumeId,
  });

  // Use useEffect to handle the data instead of onSuccess
  useEffect(() => {
    if (fetchedResume) {
      console.log("Resume data fetched:", JSON.stringify(fetchedResume, null, 2));

      try {
        // The API returns resume data with a nested 'content' object
        const content = fetchedResume.content || {};
        console.log("Resume content extracted:", content);

        // Ensure we have complete data structure for all fields
        const completeResume = {
          id: fetchedResume.id,
          title: fetchedResume.title || "Untitled Resume",
          personalInfo: {
            firstName: content.personalInfo?.firstName || "",
            lastName: content.personalInfo?.lastName || "",
            email: content.personalInfo?.email || "",
            phone: content.personalInfo?.phone || "",
            headline: content.personalInfo?.headline || "",
            summary: content.personalInfo?.summary || ""
          },
          experience: Array.isArray(content.experience) ? content.experience.map((exp: any) => ({
            ...exp,
            id: exp.id || crypto.randomUUID(), // Ensure each experience has an ID
          })) : [],
          education: Array.isArray(content.education) ? content.education.map((edu: any) => ({
            ...edu,
            id: edu.id || crypto.randomUUID(), // Ensure each education has an ID
          })) : [],
          skills: Array.isArray(content.skills) ? content.skills.map((skill: any) => ({
            ...skill,
            id: skill.id || crypto.randomUUID(), // Ensure each skill has an ID
          })) : [],
          projects: Array.isArray(content.projects) ? content.projects.map((project: any) => ({
            ...project,
            id: project.id || crypto.randomUUID(), // Ensure each project has an ID
          })) : [],
          template: fetchedResume.template || "professional"
        };

        console.log("Processed resume to load:", JSON.stringify(completeResume, null, 2));

        // Force a complete state update by creating a brand new object
        setResume(completeResume as Resume);

        // Set a debug flag in local storage to help with diagnostics
        localStorage.setItem('lastLoadedResume', JSON.stringify({
          resumeId: completeResume.id,
          firstName: completeResume.personalInfo.firstName,
          lastName: completeResume.personalInfo.lastName,
          timestamp: new Date().toISOString()
        }));

        // Show success toast when resume is fully loaded
        toast({
          title: "Resume Loaded Successfully",
          description: `"${completeResume.title}" has been loaded with ${completeResume.experience.length} experiences, ${completeResume.skills.length} skills, and ${completeResume.education.length} education entries.`,
        });
      } catch (error) {
        console.error("Error processing fetched resume:", error);
        toast({
          title: "Error Loading Resume",
          description: "There was a problem processing the resume data. Please try again.",
          variant: "destructive",
        });
      }
    }
  }, [fetchedResume, toast]);

  // Listen for resume edit events from the ResumePreviewComponent
  useEffect(() => {
    const handleResumeEdited = (event: Event) => {
      // Type assertion to access custom event detail
      const customEvent = event as CustomEvent;
      if (customEvent.detail && customEvent.detail.resume) {
        setResume(customEvent.detail.resume);
        toast({
          title: "Resume Updated",
          description: "Your changes in the preview have been applied.",
        });
      }
    };

    // Add event listener
    document.addEventListener('resumeEdited', handleResumeEdited);

    // Clean up
    return () => {
      document.removeEventListener('resumeEdited', handleResumeEdited);
    };
  }, []);

  // Handle tailored resume data from localStorage
  useEffect(() => {
    // Only check for tailored resume data on initial component mount
    // to avoid conflicts with other state updates
    const tailoredResumeData = localStorage.getItem("tailoredResume");

    if (tailoredResumeData) {
      try {
        const parsedData = JSON.parse(tailoredResumeData);

        // Immediately switch to profile tab for better UX
        setActiveSection("profile");

        // Create a new resume with the tailored content or update existing
        const hasExistingData =
          resume.personalInfo.firstName ||
          resume.personalInfo.lastName ||
          resume.experience.length > 0 ||
          resume.skills.length > 0;

        if (hasExistingData) {
          // Update existing resume with tailored content
          setResume((currentResume) => ({
            ...currentResume,
            personalInfo: {
              ...currentResume.personalInfo,
              // Only override summary from personalInfo
              summary:
                parsedData.personalInfo?.summary ||
                currentResume.personalInfo.summary,
            },
            // Replace experience and skills completely with tailored content
            experience: parsedData.experience || currentResume.experience,
            skills: parsedData.skills || currentResume.skills,
          }));

          toast({
            title: "Resume Updated",
            description:
              "Your resume has been updated with job-specific tailored content.",
          });
        } else {
          // Create a new resume with the tailored content
          setResume((currentResume) => ({
            ...currentResume,
            personalInfo: {
              ...currentResume.personalInfo,
              ...parsedData.personalInfo,
            },
            experience: parsedData.experience || [],
            skills: parsedData.skills || [],
          }));

          toast({
            title: "Tailored Resume Created",
            description:
              "A new resume has been created with job-specific content.",
          });
        }

        // Clear the localStorage data to prevent reapplying
        localStorage.removeItem("tailoredResume");

        // Remove the tailored parameter from URL
        window.history.replaceState(null, "", window.location.pathname);
      } catch (error) {
        console.error("Error applying tailored resume:", error);
        toast({
          title: "Error",
          description: "Failed to apply tailored resume data.",
          variant: "destructive",
        });
      }
    }
    // Run this effect only once on component mount (empty dependency array)
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // Auto-save resume to localStorage when user makes changes
  useEffect(() => {
    // Don't auto-save if just initialized with default values
    if (resume.personalInfo.firstName || resume.personalInfo.lastName || resume.experience.length > 0) {
      // Save current resume state to localStorage
      localStorage.setItem('autoSavedResume', JSON.stringify({
        resumeId: resumeId,
        resumeData: resume,
        timestamp: new Date().toISOString()
      }));

      console.log("Auto-saved resume to localStorage");
    }
  }, [resume, resumeId]);

  // Check for auto-saved resume data when component mounts
  useEffect(() => {
    // Only load from auto-save if we don't already have content in our resume
    if (!resume.personalInfo.firstName && !resume.personalInfo.lastName && resume.experience.length === 0) {
      try {
        const autoSavedData = localStorage.getItem('autoSavedResume');
        if (autoSavedData) {
          const parsedData = JSON.parse(autoSavedData);
          console.log("Found auto-saved resume data:", parsedData);

          // Check if the data is not too old (within 24 hours)
          const savedTime = new Date(parsedData.timestamp).getTime();
          const currentTime = new Date().getTime();
          const hoursDiff = (currentTime - savedTime) / (1000 * 60 * 60);

          if (hoursDiff < 24) {
            // Apply the auto-saved data
            if (parsedData.resumeData) {
              setResume(parsedData.resumeData as Resume);

              // If we have a resumeId saved, use it
              if (parsedData.resumeId) {
                setResumeId(parsedData.resumeId);
              }

              toast({
                title: "Recovered Unsaved Changes",
                description: "Your previously unsaved work has been restored.",
              });
            }
          } else {
            // Data is too old, clear it
            localStorage.removeItem('autoSavedResume');
          }
        }
      } catch (error) {
        console.error("Error loading auto-saved resume:", error);
      }
    }
  }, []);

  // Save resume mutation
  const saveResumeMutation = useMutation({
    mutationFn: async (resumeData: Resume) => {
      if (resumeId) {
        const res = await apiRequest(
          "PATCH",
          `/api/resumes/${resumeId}`,
          resumeData,
        );
        return await res.json();
      } else {
        const res = await apiRequest("POST", "/api/resumes", resumeData);
        return await res.json();
      }
    },
    onSuccess: (data) => {
      setResumeId(data.id);
      setResumeSaved(true);

      toast({
        title: "Resume saved",
        description: "Your resume has been saved successfully.",
      });

      queryClient.invalidateQueries({ queryKey: ["/api/resumes"] });

      // Clear the auto-saved data since we've now properly saved the resume
      localStorage.removeItem('autoSavedResume');
    },
    onError: (error) => {
      console.error("Error saving resume:", error);
      toast({
        title: "Error saving resume",
        description: "There was an error saving your resume. Please try again.",
        variant: "destructive",
      });
    },
  });

  // Save resume handler
  const handleSaveResume = () => {
    setIsSaving(true);
    saveResumeMutation.mutate(resume);
    setIsSaving(false);
  };

  // Update personal info fields
  const updatePersonalInfo = (field: string, value: string) => {
    setResume({
      ...resume,
      personalInfo: {
        ...resume.personalInfo,
        [field]: value,
      },
    });
  };

  // Template change handler
  const handleTemplateChange = (template: string) => {
    setResume({
      ...resume,
      template,
    });
  };

  // File upload handler
  const handleFileUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    setIsUploading(true);

    const formData = new FormData();
    formData.append("file", file);

    try {
      const res = await apiRequest("POST", "/api/resumes/parse", formData);
      const parsedData = await res.json();

      if (parsedData.success) {
        // Update resume state with parsed data
        setResume({
          ...resume,
          personalInfo: {
            ...resume.personalInfo,
            ...parsedData.data.personalInfo,
          },
          experience: parsedData.data.experience || [],
          education: parsedData.data.education || [],
          skills: parsedData.data.skills || [],
        });

        toast({
          title: "Resume uploaded",
          description: "Your resume has been parsed successfully.",
        });
      } else {
        toast({
          title: "Error parsing resume",
          description:
            parsedData.error || "There was an error parsing your resume.",
          variant: "destructive",
        });
      }
    } catch (error) {
      console.error("Error uploading resume:", error);
      toast({
        title: "Error uploading resume",
        description:
          "There was an error uploading your resume. Please try again.",
        variant: "destructive",
      });
    }

    setIsUploading(false);

    // Reset file input
    if (fileInputRef.current) {
      fileInputRef.current.value = "";
    }
  };

  // Apply AI suggestions to experience section
  const handleApplyBulletPoint = (bulletPoint: string) => {
    if (activeSection === "experience" && resume.experience.length > 0) {
      // Apply to the most recent experience item
      const updatedExperience = [...resume.experience];
      const lastIndex = updatedExperience.length - 1;

      // Get the current description
      const currentDescription = updatedExperience[lastIndex].description;

      // Append the new bullet point if not empty
      const newDescription = currentDescription
        ? `${currentDescription}\n• ${bulletPoint}`
        : `• ${bulletPoint}`;

      updatedExperience[lastIndex] = {
        ...updatedExperience[lastIndex],
        description: newDescription,
      };

      setResume({
        ...resume,
        experience: updatedExperience,
      });

      toast({
        title: "Bullet point added",
        description:
          "AI-generated bullet point has been added to your experience.",
      });
    } else {
      // Create a new experience item with the bullet point
      const newExperience: ExperienceItem = {
        id: `exp-${Date.now()}`,
        title: "Position Title",
        company: "Company Name",
        startDate: "2022-01",
        endDate: "Present",
        description: `• ${bulletPoint}`,
      };

      setResume({
        ...resume,
        experience: [...resume.experience, newExperience],
      });

      // Switch to experience tab
      setActiveSection("experience");

      toast({
        title: "Experience added",
        description:
          "New experience with AI-generated bullet point has been added.",
      });
    }
  };

  // Apply AI summary to personal info
  const handleApplySummary = (summary: string) => {
    // Check if we already have content in the summary
    const currentSummary = resume.personalInfo.summary;

    // If the summary is empty, just use the suggestion
    // Otherwise, append the new suggestion with a space
    const newSummary = currentSummary
      ? `${currentSummary} ${summary}`
      : summary;

    updatePersonalInfo("summary", newSummary);

    toast({
      title: "Summary enhanced",
      description: "AI-generated content has been added to your summary.",
    });
  };

  // Apply AI skill to skills section
  const handleApplySkill = (skillName: string) => {
    // Check if skill already exists
    if (
      resume.skills.some(
        (skill) => skill.name.toLowerCase() === skillName.toLowerCase(),
      )
    ) {
      toast({
        title: "Skill already exists",
        description: `"${skillName}" is already in your skills list.`,
        variant: "destructive",
      });
      return;
    }

    const newSkill: SkillItem = {
      id: `skill-${Date.now()}`,
      name: skillName,
      proficiency: 3, // Default to medium proficiency
    };

    setResume({
      ...resume,
      skills: [...resume.skills, newSkill],
    });

    toast({
      title: "Skill added",
      description: `"${skillName}" has been added to your skills.`,
    });
  };

  // Handle file input click
  const handleFileInputClick = () => {
    fileInputRef.current?.click();
  };

  const { isDarkMode } = useTheme();

  return (
    <div className="cosmic-app-container flex flex-col min-h-screen">
      <Navbar />
      <div className="cosmic-main-content container pt-12 pb-20 px-4 md:px-6 max-w-7xl mx-auto relative z-10">
        {/* Page Header */}
        <PageHeader 
          title={<span className="cosmic-text-gradient">Resume Builder</span>}
          subtitle="Create a professional resume that passes ATS systems and gets you hired."
          actions={
            <div className="flex space-x-3">
              {/* Load Saved Resume Dropdown */}
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <CosmicButton 
                  variant="outline" 
                  className="cosmic-dropdown-trigger"
                  iconLeft={<FolderOpen className="h-4 w-4" />}
                >
                  Load Resume
                </CosmicButton>
              </DropdownMenuTrigger>
              <DropdownMenuContent className="cosmic-dropdown-content w-56">
                <DropdownMenuLabel className="cosmic-dropdown-label">Your Saved Resumes</DropdownMenuLabel>
                <DropdownMenuSeparator className="cosmic-dropdown-separator" />
                {Array.isArray(userResumes) && userResumes.length > 0 ? (
                  userResumes.map((savedResume: any) => (
                    <DropdownMenuItem
                      key={savedResume.id}
                      className="cosmic-dropdown-item"
                      onClick={async () => {
                        try {
                          // Ensure we have a valid resume ID before using it
                          if (savedResume && typeof savedResume.id === 'number') {
                            console.log("Loading resume with ID:", savedResume.id);

                            // Show loading toast
                            toast({
                              title: "Loading Resume",
                              description: `Loading ${savedResume.title || "Untitled Resume"}...`,
                            });

                            // Directly fetch the resume data instead of relying on useQuery
                            try {
                              const response = await fetch(`/api/resumes/${savedResume.id}`);

                              if (!response.ok) {
                                throw new Error(`Error fetching resume: ${response.status}`);
                              }

                              const resumeData = await response.json() as {
                                id?: number;
                                title?: string;
                                content?: {
                                  personalInfo?: any;
                                  experience?: any[];
                                  education?: any[];
                                  skills?: any[];
                                  projects?: any[];
                                };
                                template?: string;
                              };
                              console.log("Direct fetch resume data:", JSON.stringify(resumeData, null, 2));

                              // The API returns resume data with a nested 'content' object
                              const content = resumeData.content || {};
                              console.log("Resume content extracted:", content);

                              // Process the resume data
                              const completeResume = {
                                id: resumeData.id,
                                title: resumeData.title || "Untitled Resume",
                                personalInfo: {
                                  firstName: content.personalInfo?.firstName || "",
                                  lastName: content.personalInfo?.lastName || "",
                                  email: content.personalInfo?.email || "",
                                  phone: content.personalInfo?.phone || "",
                                  headline: content.personalInfo?.headline || "",
                                  summary: content.personalInfo?.summary || ""
                                },
                                experience: Array.isArray(content.experience) ? content.experience.map((exp: any) => ({
                                  ...exp,
                                  id: exp.id || crypto.randomUUID(),
                                })) : [],
                                education: Array.isArray(content.education) ? content.education.map((edu: any) => ({
                                  ...edu,
                                  id: edu.id || crypto.randomUUID(),
                                })) : [],
                                skills: Array.isArray(content.skills) ? content.skills.map((skill: any) => ({
                                  ...skill,
                                  id: skill.id || crypto.randomUUID(),
                                })) : [],
                                projects: Array.isArray(content.projects) ? content.projects.map((project: any) => ({
                                  ...project,
                                  id: project.id || crypto.randomUUID(),
                                })) : [],
                                template: resumeData.template || "professional"
                              };

                              // Preserve the reference to the complete resume for later
                              const finalResumeData = {...completeResume};

                              // Set the resume ID and update the UI state
                              setResumeId(savedResume.id);
                              setActiveSection("profile");

                              // Force a complete state update by creating a brand new object
                              // We wrap this in setTimeout to ensure it runs after other state changes
                              setResume(finalResumeData as Resume);

                              // Add a safety net: store the loaded resume in sessionStorage
                              // so we can recover if state gets lost
                              sessionStorage.setItem('loadedResumeData', JSON.stringify({
                                resumeData: finalResumeData,
                                timestamp: new Date().toISOString()
                              }));

                              // Set a debug flag in local storage
                              localStorage.setItem('lastLoadedResume', JSON.stringify({
                                resumeId: completeResume.id,
                                firstName: completeResume.personalInfo.firstName,
                                lastName: completeResume.personalInfo.lastName,
                                timestamp: new Date().toISOString()
                              }));

                              // Show success toast
                              toast({
                                title: "Resume Loaded Successfully",
                                description: `"${completeResume.title}" has been loaded with ${completeResume.experience.length} experiences, ${completeResume.skills.length} skills, and ${completeResume.education.length} education entries.`,
                              });

                            } catch (fetchError) {
                              console.error("Error fetching resume data:", fetchError);
                              toast({
                                title: "Error Loading Resume",
                                description: "Failed to fetch resume data. Please try again.",
                                variant: "destructive",
                              });
                            }
                          } else {
                            console.error("Invalid resume ID:", savedResume);
                            toast({
                              title: "Error Loading Resume",
                              description: "Invalid resume ID. Please try again.",
                              variant: "destructive",
                            });
                          }
                        } catch (error) {
                          console.error("Error when loading resume:", error);
                          toast({
                            title: "Error Loading Resume",
                            description: "Failed to load the selected resume.",
                            variant: "destructive",
                          });
                        }
                      }}
                    >
                      <FileText className="h-4 w-4 mr-2" />
                      {savedResume.title}
                    </DropdownMenuItem>
                  ))
                ) : (
                  <DropdownMenuItem disabled className="cosmic-dropdown-item-disabled">
                    No saved resumes found
                  </DropdownMenuItem>
                )}
              </DropdownMenuContent>
            </DropdownMenu>

            <CosmicButton
              variant="primary"
              onClick={handleSaveResume}
              disabled={isSaving}
              isLoading={isSaving}
              loadingText="Saving..."
              iconLeft={!isSaving ? <Save /> : undefined}
            >
              Save Resume
            </CosmicButton>

            <CosmicButton
              variant="secondary"
              onClick={handleFileInputClick}
              disabled={isUploading}
              isLoading={isUploading}
              loadingText="Uploading..."
              iconLeft={!isUploading ? <Upload /> : undefined}
            >
              Upload Existing Resume
            </CosmicButton>

            <input
              type="file"
              ref={fileInputRef}
              onChange={handleFileUpload}
              accept=".pdf,.docx,.txt"
              className="hidden"
            />
          </div>
          }
        />

        {/* Main content area */}
        <div className="cosmic-card border border-white/10 rounded-xl shadow-lg backdrop-blur-md overflow-hidden">
          {/* Horizontal Tab Navigation */}
          <div className="relative">
            <div>
              <Tabs
                value={activeSection}
                onValueChange={setActiveSection}
                className="cosmic-tabs"
              >
                <TabsList className="cosmic-tabs-list">
                  <TabsTrigger
                    value="profile"
                    className="cosmic-tab-trigger"
                  >
                    <FileText className="h-4 w-4 mr-2" />
                    PROFILE
                  </TabsTrigger>
                  <TabsTrigger
                    value="experience"
                    className="cosmic-tab-trigger"
                  >
                    <Briefcase className="h-4 w-4 mr-2" />
                    EXPERIENCE
                  </TabsTrigger>
                  <TabsTrigger
                    value="education"
                    className="cosmic-tab-trigger"
                  >
                    <GraduationCap className="h-4 w-4 mr-2" />
                    EDUCATION
                  </TabsTrigger>
                  <TabsTrigger
                    value="skills"
                    className="cosmic-tab-trigger"
                  >
                    <Code className="h-4 w-4 mr-2" />
                    SKILLS
                  </TabsTrigger>
                  <TabsTrigger
                    value="projects"
                    className="cosmic-tab-trigger"
                  >
                    <FolderKanban className="h-4 w-4 mr-2" />
                    PROJECTS
                  </TabsTrigger>
                  <TabsTrigger
                    value="preview"
                    className="cosmic-tab-trigger"
                  >
                    <Maximize2 className="h-4 w-4 mr-2" />
                    PREVIEW
                  </TabsTrigger>
                </TabsList>
              </Tabs>
            </div>

            {/* Tab Content */}
            <div 
              className="cosmic-content-container p-6 md:p-8"
              style={{
                lineHeight: "1.6", // Improved line height for readability
                minHeight: "calc(100vh - 200px)", // Ensure content area fills viewport
              }}
            >
              {/* Profile Section */}
              {activeSection === "profile" && (
                <div className="grid grid-cols-1 md:grid-cols-3 gap-10">
                  {/* Tailored Resume Banner - show briefly when coming from job details */}
                  {isTailoredResume && (
                    <div className="md:col-span-3 mb-space-4">
                      <div className="cosmic-card border border-green-500/30 bg-green-900/20 p-space-4 rounded-lg relative overflow-hidden backdrop-blur-sm">
                        <div className="absolute top-0 right-0 w-64 h-64 bg-green-500/10 rounded-full blur-3xl"></div>
                        <div className="relative z-10">
                          <div className="flex items-center mb-space-2">
                            <Sparkles className="h-5 w-5 mr-space-2 text-green-400" />
                            <h3 className="font-medium text-xl text-white">
                              Job-Tailored Resume
                            </h3>
                          </div>
                          <p className="text-gray-300 mb-space-2">
                            Your resume is being updated with tailored content
                            optimized for the job description. Review each
                            section and make any additional adjustments before
                            saving.
                          </p>
                        </div>
                      </div>
                    </div>
                  )}

                  {/* Welcome Banner - only show when resume is empty */}
                  {!resume?.personalInfo?.firstName &&
                    !resume?.personalInfo?.lastName && (
                      <div className="md:col-span-3 mb-space-4">
                        <div className="cosmic-card border border-blue-500/30 bg-blue-900/20 p-space-6 rounded-lg relative overflow-hidden backdrop-blur-sm">
                          <div className="absolute top-0 right-0 w-64 h-64 bg-blue-500/10 rounded-full blur-3xl"></div>
                          <div className="relative z-10">
                            <div className="flex items-center mb-space-3">
                              <Upload className="h-5 w-5 mr-space-2 text-blue-400" />
                              <h3 className="font-medium text-xl text-white">
                                Upload Your Existing Resume
                              </h3>
                            </div>
                            <p className="text-gray-300 mb-space-4">
                              Skip manual entry by uploading your existing
                              resume. Our AI will automatically extract your
                              information and fill out this form for you.
                            </p>
                            <div className="flex flex-wrap gap-space-3">
                              <CosmicButton
                                variant="primary"
                                onClick={handleFileInputClick}
                                iconLeft={<Upload />}
                              >
                                Upload PDF, DOCX, or TXT
                              </CosmicButton>
                              <p className="text-sm text-gray-400 flex items-center">
                                <span className="mr-space-1">or</span> fill out the
                                form manually below
                              </p>
                            </div>
                          </div>
                        </div>
                      </div>
                    )}
                  <div className="md:col-span-2 space-y-8">
                    <div className="cosmic-resume-section mb-8">
                      <div className="mb-10 ml-3">
                        <h2 className="cosmic-section-title-large">
                          <User className="cosmic-section-icon h-6 w-6 text-blue-400" />
                          Contact Information
                        </h2>
                      </div>

                      <div className="grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-8 mb-12">
                        <div className="cosmic-form-group">
                          <Label htmlFor="firstName" className="cosmic-form-label">
                            First Name
                          </Label>
                          <Input
                            id="firstName"
                            value={resume?.personalInfo?.firstName || ""}
                            onChange={(e) =>
                              updatePersonalInfo("firstName", e.target.value)
                            }
                            className="cosmic-navy-input"
                            placeholder="Dylan"
                          />
                        </div>
                        <div className="cosmic-form-group">
                          <Label htmlFor="lastName" className="cosmic-form-label">
                            Last Name
                          </Label>
                          <Input
                            id="lastName"
                            value={resume?.personalInfo?.lastName || ""}
                            onChange={(e) =>
                              updatePersonalInfo("lastName", e.target.value)
                            }
                            className="cosmic-navy-input"
                            placeholder="Spivack"
                          />
                        </div>
                        <div className="cosmic-form-group">
                          <Label htmlFor="email" className="cosmic-form-label">
                            Email
                          </Label>
                          <Input
                            id="email"
                            type="email"
                            value={resume?.personalInfo?.email || ""}
                            onChange={(e) =>
                              updatePersonalInfo("email", e.target.value)
                            }
                            className="cosmic-navy-input"
                            placeholder="john.doe@example.com"
                          />
                        </div>
                        <div className="cosmic-form-group">
                          <Label htmlFor="phone" className="cosmic-form-label">
                            Phone
                          </Label>
                          <Input
                            id="phone"
                            value={resume?.personalInfo?.phone || ""}
                            onChange={(e) =>
                              updatePersonalInfo("phone", e.target.value)
                            }
                            className="cosmic-navy-input"
                            placeholder="(555) 123-4567"
                          />
                        </div>
                      </div>

                      <div className="mb-12 border-b border-gray-700 pb-10">
                        <div className="cosmic-form-group">
                          <Label htmlFor="headline" className="cosmic-form-label">
                            Professional Headline
                          </Label>
                          <Input
                            id="headline"
                            value={resume?.personalInfo?.headline || ""}
                            onChange={(e) =>
                              updatePersonalInfo("headline", e.target.value)
                            }
                            className="cosmic-navy-input"
                            placeholder="Frontend Developer | React & TypeScript Specialist"
                          />
                          <p className="mt-2 text-xs text-blue-300/70">A brief title that describes your professional identity</p>
                        </div>
                      </div>

                      <div>
                        <div className="cosmic-form-group">
                          <Label htmlFor="summary" className="cosmic-form-label">
                            Professional Summary
                          </Label>
                          <Textarea
                            id="summary"
                            value={resume?.personalInfo?.summary || ""}
                            onChange={(e) =>
                              updatePersonalInfo("summary", e.target.value)
                            }
                            className="cosmic-navy-input cosmic-form-textarea min-h-[120px]"
                            rows={5}
                            placeholder="Experienced Staff Development RN with a proven track record in long-term care, adept at enhancing staff competencies through targeted training and compassionate leadership. Holds an RN license with a commitment to high-quality healthcare and improving patient outcomes."
                          />
                          <div className="mt-space-4 text-xs text-blue-100/80 bg-blue-500/5 p-space-4 rounded-lg border border-blue-500/20">
                            <p className="mb-space-2 text-blue-300 font-medium">
                              Tips for a great summary:
                            </p>
                            <ul className="list-disc pl-space-4 space-y-space-1">
                              <li>Keep it concise (3-5 sentences)</li>
                              <li>Highlight your most relevant experience</li>
                              <li>
                                Focus on achievements rather than responsibilities
                              </li>
                              <li>
                                Include keywords relevant to your target position
                              </li>
                            </ul>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* AI Tips Section */}
                  <div className="md:col-span-1">
                    <div className="cosmic-ai-card min-h-[300px]">
                      <div className="cosmic-glow cosmic-glow-top-right"></div>
                      <div className="cosmic-glow cosmic-glow-bottom-left"></div>
                      
                      <div className="relative z-10">
                        <div className="flex items-center gap-2 mb-5">
                          <div className="h-8 w-8 rounded-full bg-gradient-to-br from-blue-600 to-indigo-800 flex items-center justify-center">
                            <Cpu className="h-4 w-4 text-white" />
                          </div>
                          <h3 className="font-medium text-white text-lg">
                            AI Resume Assistant
                          </h3>
                        </div>

                        <div className="w-full space-y-4">
                          <ResumeTips
                            resumeId={resumeId}
                            onApplySuggestion={(suggestion) => {
                              // Check if we already have content in the summary
                              const currentSummary =
                                resume?.personalInfo?.summary || "";

                              // If the summary is empty, just use the suggestion
                              // Otherwise, append the new suggestion with a space
                              const newSummary = currentSummary
                                ? `${currentSummary} ${suggestion}`
                                : suggestion;

                              setResume({
                                ...resume,
                                personalInfo: {
                                  ...resume.personalInfo,
                                  summary: newSummary,
                                },
                              });

                              toast({
                                title: "Summary Enhanced",
                                description:
                                  "AI-generated content has been added to your summary.",
                              });
                            }}
                            suggestionType="summary"
                            multiSelect={true}
                          />
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {/* Experience Section */}
              {activeSection === "experience" && (
                <div className="grid grid-cols-1 md:grid-cols-3 gap-10">
                  <div className="md:col-span-2">
                    <div className="cosmic-section-header flex justify-between items-center mb-space-4">
                      <h2 className="cosmic-section-title flex items-center">
                        <Briefcase className="cosmic-section-icon h-5 w-5 mr-space-2" />
                        Work Experience
                      </h2>
                    </div>

                    <ResumeExperienceSection
                      experiences={resume?.experience || []}
                      onUpdate={(experiences) => {
                        setResume({
                          ...resume,
                          experience: experiences,
                        });
                      }}
                    />
                  </div>

                  {/* Tips for Experience */}
                  <div className="md:col-span-1">
                    <div className="cosmic-ai-card min-h-[300px]">
                      <div className="relative z-10">
                        <div className="flex items-center gap-2 mb-5">
                          <div className="h-8 w-8 rounded-full bg-gradient-to-br from-blue-600 to-indigo-800 flex items-center justify-center">
                            <Briefcase className="h-4 w-4 text-white" />
                          </div>
                          <h3 className="font-medium text-white text-lg">
                            AI Experience Assistant
                          </h3>
                        </div>

                        <div className="w-full space-y-4">
                          <ResumeTips
                            resumeId={resumeId}
                            onApplySuggestion={(bulletPoint) => {
                              if (resume?.experience?.length > 0) {
                                // Apply to the most recent experience item
                                const updatedExperience = [
                                  ...resume.experience,
                                ];
                                const lastIndex = updatedExperience.length - 1;

                                // Get the current description
                                const currentDescription =
                                  updatedExperience[lastIndex].description;

                                // Append the new bullet point if not empty
                                const newDescription = currentDescription
                                  ? `${currentDescription}\n• ${bulletPoint}`
                                  : `• ${bulletPoint}`;

                                updatedExperience[lastIndex] = {
                                  ...updatedExperience[lastIndex],
                                  description: newDescription,
                                };

                                setResume({
                                  ...resume,
                                  experience: updatedExperience,
                                });
                              }
                              toast({
                                title: "Bullet point added",
                                description:
                                  "AI-generated bullet point has been added to your experience.",
                              });
                            }}
                            suggestionType="bullet"
                            multiSelect={true}
                          />
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {/* Education Section */}
              {activeSection === "education" && (
                <div className="grid grid-cols-1 md:grid-cols-3 gap-10">
                  <div className="md:col-span-2">
                    <div className="cosmic-section-header flex justify-between items-center mb-space-4">
                      <h2 className="cosmic-section-title flex items-center">
                        <GraduationCap className="cosmic-section-icon h-5 w-5 mr-space-2" />
                        Education
                      </h2>
                    </div>

                    <ResumeEducationSection
                      education={resume?.education || []}
                      onUpdate={(education) => {
                        setResume({
                          ...resume,
                          education,
                        });
                      }}
                    />

                    <div className="mt-space-4 text-xs text-gray-300 bg-white/5 p-space-4 rounded-lg border border-white/10">
                      <p className="mb-space-2 text-blue-300 font-medium">
                        Tips for education section:
                      </p>
                      <ul className="list-disc pl-space-4 space-y-space-1">
                        <li>List your most recent education first</li>
                        <li>Include relevant coursework and achievements</li>
                        <li>Mention academic honors and awards</li>
                        <li>Only include GPA if it strengthens your profile</li>
                      </ul>
                    </div>
                  </div>

                  {/* Education AI Assistant */}
                  <div className="md:col-span-1">
                    <div className="cosmic-ai-card min-h-[300px]">
                      <div className="relative z-10 p-space-4">
                        <div className="flex items-center gap-space-2 mb-space-5">
                          <div className="h-8 w-8 rounded-full bg-gradient-to-br from-purple-600 to-indigo-800 flex items-center justify-center">
                            <GraduationCap className="h-4 w-4 text-white" />
                          </div>
                          <h3 className="font-medium text-white text-lg">
                            Education Assistant
                          </h3>
                        </div>

                        <div className="space-y-space-4">
                          <p className="text-sm text-blue-100">
                            Enhance your education section with these tips from our AI assistant:
                          </p>

                          <div className="space-y-space-2 text-sm">
                            <div className="p-space-2 rounded bg-white/5 border border-white/10 hover:bg-white/10 transition-colors cursor-pointer">
                              Focus on relevant coursework that aligns with your target job
                            </div>
                            <div className="p-space-2 rounded bg-white/5 border border-white/10 hover:bg-white/10 transition-colors cursor-pointer">
                              Highlight leadership roles in student organizations
                            </div>
                            <div className="p-space-2 rounded bg-white/5 border border-white/10 hover:bg-white/10 transition-colors cursor-pointer">
                              Include special projects, research, or thesis work
                            </div>
                            <div className="p-space-2 rounded bg-white/5 border border-white/10 hover:bg-white/10 transition-colors cursor-pointer">
                              List certifications or specialized training programs
                            </div>
                          </div>

                          <button 
                            className="w-full mt-space-4 py-2 px-3 bg-blue-600/30 hover:bg-blue-600/50 rounded-md text-white text-sm transition-colors"
                            onClick={() => setIsDialogOpen(true)}
                          >
                            Get AI suggestions
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {/* Skills Section */}
              {activeSection === "skills" && (
                <div className="grid grid-cols-1 md:grid-cols-3 gap-10">
                  <div className="md:col-span-2">
                    <div className="cosmic-section-header flex justify-between items-center mb-space-4">
                      <h2 className="cosmic-section-title flex items-center">
                        <Code className="cosmic-section-icon h-5 w-5 mr-space-2" />
                        Skills
                      </h2>
                    </div>

                    <ResumeSkillsSection
                      skills={resume?.skills || []}
                      onUpdate={(skills) => {
                        setResume({
                          ...resume,
                          skills,
                        });
                      }}
                    />

                    <div className="mt-space-4 text-xs text-gray-300 bg-gray-900/50 p-space-4 rounded-lg border border-blue-500/30">
                      <p className="mb-space-2 text-blue-300 font-medium">
                        Tips for showcasing skills:
                      </p>
                      <ul className="list-disc pl-space-4 space-y-space-1">
                        <li>Include a mix of technical and soft skills</li>
                        <li>Prioritize skills mentioned in job descriptions</li>
                        <li>Be honest about your proficiency levels</li>
                        <li>Group similar skills together</li>
                      </ul>
                    </div>
                  </div>

                  {/* Tips for Skills */}
                  <div className="md:col-span-1">
                    <div className="cosmic-ai-card min-h-[300px]">
                      <div className="relative z-10 p-space-4">
                        <div className="flex items-center gap-space-2 mb-space-5">
                          <div className="h-8 w-8 rounded-full bg-gradient-to-br from-purple-600 to-indigo-800 flex items-center justify-center">
                            <Code className="h-4 w-4 text-white" />
                          </div>
                          <h3 className="font-medium text-white text-lg">
                            AI Skills Assistant
                          </h3>
                        </div>

                        <div className="w-full space-y-space-4">
                          <ResumeTips
                            resumeId={resumeId}
                            onApplySuggestion={(skill) => {
                              if (
                                !resume?.skills?.some(
                                  (s) =>
                                    s.name.toLowerCase() ===
                                    skill.toLowerCase(),
                                )
                              ) {
                                const newSkill = {
                                  id: `skill-${Date.now()}`,
                                  name: skill,
                                  proficiency: 3,
                                };

                                setResume({
                                  ...resume,
                                  skills: [...(resume?.skills || []), newSkill],
                                });

                                toast({
                                  title: "Skill added",
                                  description: `"${skill}" has been added to your skills.`,
                                });
                              } else {
                                toast({
                                  title: "Skill already exists",
                                  description: `"${skill}" is already in your skills list.`,
                                  variant: "destructive",
                                });
                              }
                            }}
                            suggestionType="skill"
                            multiSelect={true}
                          />
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {/* Projects Section */}
              {activeSection === "projects" && (
                <div className="grid grid-cols-1 md:grid-cols-3 gap-10">
                  <div className="md:col-span-2">
                    <div className="cosmic-section-header flex justify-between items-center mb-space-4">
                      <h2 className="cosmic-section-title flex items-center">
                        <FolderKanban className="cosmic-section-icon h-5 w-5 mr-space-2" />
                        Projects
                      </h2>
                      <Button 
                        variant="outline" 
                        size="sm" 
                        className="ml-auto"
                        onClick={() => {
                          // Add an empty project
                          const newProject = {
                            id: `project-${Date.now()}`,
                            title: "",
                            description: "",
                            technologies: [],
                          };
                          setResume({
                            ...resume,
                            projects: [...(resume?.projects || []), newProject],
                          });
                        }}
                      >
                        Add Project
                      </Button>
                    </div>

                    <ResumeProjectsSection
                      projects={resume?.projects || []}
                      onUpdate={(projects) => {
                        setResume({
                          ...resume,
                          projects,
                        });
                      }}
                    />

                    <div className="mt-space-4 text-xs text-gray-300 bg-gray-900/50 p-space-4 rounded-lg border border-blue-500/30">
                      <p className="mb-space-2 text-blue-300 font-medium">
                        Tips for adding projects:
                      </p>
                      <ul className="list-disc pl-4 space-y-1">
                        <li>Include personal projects or significant academic/work initiatives</li>
                        <li>Highlight technologies and methodologies used</li>
                        <li>Detail your specific contributions to team projects</li>
                        <li>Add links to repositories or live demos when available</li>
                      </ul>
                    </div>
                  </div>

                  {/* Projects AI Assistant */}
                  <div className="md:col-span-1">
                    <div className="cosmic-ai-card min-h-[300px]">
                      <div className="relative z-10 p-space-4">
                        <div className="flex items-center gap-space-2 mb-space-5">
                          <div className="h-8 w-8 rounded-full bg-gradient-to-br from-purple-600 to-indigo-800 flex items-center justify-center">
                            <FolderKanban className="h-4 w-4 text-white" />
                          </div>
                          <h3 className="font-medium text-white text-lg">
                            Projects Assistant
                          </h3>
                        </div>

                        <div className="space-y-space-4">
                          <p className="text-sm text-blue-100">
                            Enhance your projects section with these formatting tips:
                          </p>

                          <div className="space-y-space-2 text-sm">
                            <div className="p-space-2 rounded bg-gray-900/50 border border-blue-500/30 hover:bg-blue-500/10 transition-colors cursor-pointer">
                              Use action verbs to describe your contributions
                            </div>
                            <div className="p-space-2 rounded bg-gray-900/50 border border-blue-500/30 hover:bg-blue-500/10 transition-colors cursor-pointer">
                              Quantify achievements with metrics when possible
                            </div>
                            <div className="p-space-2 rounded bg-gray-900/50 border border-blue-500/30 hover:bg-blue-500/10 transition-colors cursor-pointer">
                              Showcase problem-solving and technical skills
                            </div>
                            <div className="p-space-2 rounded bg-gray-900/50 border border-blue-500/30 hover:bg-blue-500/10 transition-colors cursor-pointer">
                              Include the business impact of your project
                            </div>
                          </div>

                          <button 
                            className="w-full mt-space-4 py-2 px-3 bg-blue-600/30 hover:bg-blue-600/50 rounded-md text-white text-sm transition-colors"
                            onClick={() => setIsDialogOpen(true)}
                          >
                            Get AI suggestions
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {/* Preview Section */}
              {activeSection === "preview" && (
                <div className="grid grid-cols-1 md:grid-cols-4 gap-10">
                  <div className="md:col-span-3 text-white">
                    <div className="cosmic-section-header flex justify-between items-center mb-space-6">
                      <h2 className="cosmic-section-title flex items-center">
                        <Maximize2 className="cosmic-section-icon h-5 w-5 mr-space-2" />
                        Resume Preview
                      </h2>
                      <CosmicButton
                        variant="outline"
                        onClick={downloadResume}
                        iconLeft={<Download className="h-4 w-4" />}
                      >
                        Download PDF
                      </CosmicButton>
                    </div>
                    <div className="cosmic-card border border-white/10 backdrop-blur-sm p-space-8 rounded-xl shadow-lg">
                      <ResumePreviewComponent
                        resume={resume || {
                          title: "My Professional Resume",
                          personalInfo: {
                            firstName: "",
                            lastName: "",
                            email: "",
                            phone: "",
                            headline: "",
                            summary: "",
                          },
                          experience: [],
                          education: [],
                          skills: [],
                          projects: [],
                          template: "professional",
                        }}
                        onTemplateChange={handleTemplateChange}
                        onDownload={downloadResume}
                      />
                    </div>
                  </div>

                  {/* Final Preview Tips */}
                  <div className="md:col-span-1">
                    <div className="cosmic-ai-card min-h-[300px]">
                      <div className="relative z-10 p-space-4">
                        <div className="flex items-center gap-space-2 mb-space-5">
                          <div className="h-8 w-8 rounded-full bg-gradient-to-br from-purple-600 to-indigo-800 flex items-center justify-center">
                            <Check className="h-4 w-4 text-white" />
                          </div>
                          <h3 className="font-medium text-white text-lg">
                            Final Checks
                          </h3>
                        </div>

                        <div className="space-y-space-4">
                          <p className="text-sm text-blue-100">
                            Before downloading, review your resume for these common issues:
                          </p>

                          <div className="space-y-space-2 text-sm">
                            <div className="p-space-2 rounded bg-gray-900/50 border border-blue-500/30 flex items-start">
                              <Check className="h-4 w-4 text-green-500 mt-0.5 mr-2 flex-shrink-0" />
                              <span>Check for spelling and grammar errors</span>
                            </div>
                            <div className="p-space-2 rounded bg-gray-900/50 border border-blue-500/30 flex items-start">
                              <Check className="h-4 w-4 text-green-500 mt-0.5 mr-2 flex-shrink-0" />
                              <span>Ensure consistent formatting throughout</span>
                            </div>
                            <div className="p-space-2 rounded bg-gray-900/50 border border-blue-500/30 flex items-start">
                              <Check className="h-4 w-4 text-green-500 mt-0.5 mr-2 flex-shrink-0" />
                              <span>Verify all contact information is correct</span>
                            </div>
                            <div className="p-space-2 rounded bg-gray-900/50 border border-blue-500/30 flex items-start">
                              <Check className="h-4 w-4 text-green-500 mt-0.5 mr-2 flex-shrink-0" />
                              <span>Confirm dates are accurate and consistent</span>
                            </div>
                          </div>

                          <button 
                            className="w-full mt-space-4 py-2 px-3 bg-blue-600/30 hover:bg-blue-600/50 rounded-md text-white text-sm transition-colors"
                            onClick={() => setIsDialogOpen(true)}
                          >
                            Get final AI review
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>

      {/* Floating AI Assistant Button */}
      <div className="fixed bottom-6 right-6 z-50 group">
        <div className="absolute -inset-0.5 rounded-full bg-blue-500 opacity-75 blur-sm group-hover:opacity-100 transition duration-300 animate-pulse"></div>
        <CosmicButton
          variant="primary"
          onClick={() => setIsDialogOpen(!isDialogOpen)}
          className="relative h-14 w-14 rounded-full p-0 shadow-lg group-hover:scale-105 transition duration-300"
          aria-label="Open AI Assistant"
        >
          <div className="absolute inset-0 rounded-full border border-white/20 animate-ping opacity-40"></div>
          <Sparkles className="h-5 w-5 text-white" />
        </CosmicButton>
        <span className="absolute top-0 right-16 bg-black/80 text-white text-sm py-1 px-2 rounded opacity-0 group-hover:opacity-100 transition-opacity duration-300 whitespace-nowrap">
          AI Assistant
        </span>
      </div>

      {/* AI Assistant Chat Box */}
      {isDialogOpen && (
        <div className="fixed bottom-24 right-6 z-50 w-96 max-w-full shadow-xl rounded-lg overflow-hidden transition-all duration-300 ease-in-out cosmic-ai-card border-0">
          <div className="bg-gradient-to-r from-blue-900 to-purple-900 p-space-4 flex justify-between items-center border-b border-blue-500/30">
            <div className="flex items-center gap-2">
              <div className="h-8 w-8 rounded-full bg-gradient-to-br from-blue-600 to-indigo-800 flex items-center justify-center">
                <Sparkles className="h-4 w-4 text-white" />
              </div>
              <h3 className="text-white font-medium text-lg">AI Resume Assistant</h3>
            </div>
            <CosmicButton
              variant="ghost"
              onClick={() => setIsDialogOpen(false)}
              className="h-8 w-8 rounded-full p-0 hover:bg-white/10"
              aria-label="Close"
            >
              <X className="h-4 w-4 text-white" />
            </CosmicButton>
          </div>
          <div className="bg-black/90 border-x border-blue-500/30 border-b p-space-5 h-96 overflow-y-auto">
            <AIAssistant
              resumeId={resumeId?.toString()}
              onApplySummary={handleApplySummary}
              onApplyBulletPoint={handleApplyBulletPoint}
              onApplySkill={handleApplySkill}
              resume={resume || {
                title: "My Professional Resume",
                personalInfo: {
                  firstName: "",
                  lastName: "",
                  email: "",
                  phone: "",
                  headline: "",
                  summary: "",
                },
                experience: [],
                education: [],
                skills: [],
                projects: [],
                template: "professional",
              }}
              activeTab={activeSection || 'contact'}
            />
          </div>
        </div>
      )}
      </div>
    </div>
  );
}
```
### resumes-page.tsx
```tsx
import { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import { Link, useLocation } from 'wouter';
import { 
  FileText, 
  Plus, 
  BarChart2, 
  Search, 
  Calendar, 
  Briefcase,
  Download,
  Edit,
  Copy,
  Trash2,
  Upload
} from 'lucide-react';
import Navbar from '@/components/navbar';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Badge } from '@/components/ui/badge';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Label } from '@/components/ui/label';
import { Skeleton } from '@/components/ui/skeleton';
import { Resume as ResumeType } from '@shared/schema';
import { 
  TemplatePreviewProfessional,
  TemplatePreviewCreative,
  TemplatePreviewExecutive,
  TemplatePreviewModern,
  TemplatePreviewMinimal,
  TemplatePreviewIndustry,
  TemplatePreviewBold
} from '@/components/resume-template';

import { useToast } from '@/hooks/use-toast';
import { useAuth } from '@/hooks/use-auth';
import { useGuestMode } from '@/hooks/use-guest-mode';

interface Resume extends ResumeType {
  personalInfo?: {
    headline?: string;
    firstName?: string;
    lastName?: string;
    email?: string;
    phone?: string;
    summary?: string;
  };
  experience?: any[];
  education?: any[];
  skills?: any[];
  projects?: any[];
}

export default function ResumesPage() {
  const [, navigate] = useLocation();
  const { user } = useAuth();
  const { isGuestMode, showGuestModal } = useGuestMode();
  const { toast } = useToast();

  // State for UI
  const [searchQuery, setSearchQuery] = useState('');
  const [activeTab, setActiveTab] = useState('my-resumes');

  // Query resumes
  const { data: resumes = [], isLoading, error } = useQuery<Resume[]>({
    queryKey: ['/api/resumes'],
    enabled: true,
  });

  // Filter resumes based on search query
  const filteredResumes = searchQuery.trim() !== '' 
    ? resumes.filter((resume: Resume) => 
        (resume.title?.toLowerCase().includes(searchQuery.toLowerCase()) ||
         resume.personalInfo?.headline?.toLowerCase().includes(searchQuery.toLowerCase()) ||
         resume.personalInfo?.firstName?.toLowerCase().includes(searchQuery.toLowerCase()) ||
         resume.personalInfo?.lastName?.toLowerCase().includes(searchQuery.toLowerCase()))
      )
    : resumes;

  // Template options for new resume
  const resumeTemplates = [
    {
      id: 'professional',
      name: 'Professional',
      description: 'Clean, organized layout for corporate settings',
      color: 'bg-gradient-to-r from-blue-500 to-blue-700'
    },
    {
      id: 'creative',
      name: 'Creative',
      description: 'Dynamic design for creative industries',
      color: 'bg-gradient-to-r from-purple-500 to-pink-500'
    },
    {
      id: 'executive',
      name: 'Executive',
      description: 'Sophisticated style for senior positions',
      color: 'bg-gradient-to-r from-gray-700 to-gray-900'
    },
    {
      id: 'modern',
      name: 'Modern',
      description: 'Contemporary look with balanced elements',
      color: 'bg-gradient-to-r from-emerald-500 to-teal-700'
    },
    {
      id: 'minimalist',
      name: 'Minimalist',
      description: 'Simple, focused design with essential info',
      color: 'bg-gradient-to-r from-amber-500 to-orange-600'
    },
    {
      id: 'industry',
      name: 'Industry',
      description: 'Specialized format for technical roles',
      color: 'bg-gradient-to-r from-indigo-500 to-indigo-700'
    },
    {
      id: 'bold',
      name: 'Bold',
      description: 'Strong visual impact with clear hierarchy',
      color: 'bg-gradient-to-r from-red-500 to-rose-700'
    }
  ];

  // Handle resume creation
  const handleCreateNewResume = (templateType: string) => {
    if (isGuestMode) {
      showGuestModal();
      return;
    }

    // Navigate to resume builder with template type
    navigate(`/resume-builder?template=${templateType}`);
  };

  // Handle resume actions
  const handleResumeAction = async (action: string, id?: string | number) => {
    if (isGuestMode && (action === 'edit' || action === 'delete' || action === 'duplicate')) {
      showGuestModal();
      return;
    }

    switch(action) {
      case 'edit':
        try {
          // Show loading toast
          toast({
            title: "Loading Resume",
            description: "Preparing to edit resume...",
          });
          
          // Directly fetch the resume data before navigating
          const response = await fetch(`/api/resumes/${id}`);
          
          if (!response.ok) {
            throw new Error(`Error fetching resume: ${response.status}`);
          }
          
          const resumeData = await response.json();
          console.log("Resume to edit:", resumeData);
          
          // Store resume data in localStorage for resume-builder to use
          localStorage.setItem('editingResume', JSON.stringify({
            resumeData,
            timestamp: new Date().toISOString()
          }));
          
          // Navigate to edit page
          navigate(`/resume-builder?id=${id}&edit=true`);
        } catch (error) {
          console.error("Error loading resume for editing:", error);
          toast({
            title: "Error Loading Resume",
            description: "Failed to load resume for editing. Please try again.",
            variant: "destructive",
          });
        }
        break;
      case 'download':
        toast({
          title: "Resume Download",
          description: "Your resume is being prepared for download.",
        });
        break;
      case 'duplicate':
        toast({
          title: "Resume Duplicated",
          description: "A copy of your resume has been created.",
        });
        break;
      case 'delete':
        try {
          // Show loading toast
          toast({
            title: "Deleting Resume",
            description: "Please wait while we remove your resume...",
          });
          
          // Call the API to delete the resume
          const response = await fetch(`/api/resumes/${id}`, {
            method: 'DELETE',
          });
          
          if (!response.ok) {
            throw new Error(`Error deleting resume: ${response.status}`);
          }
          
          // Wait a moment before refreshing the page to allow the API to fully process
          setTimeout(() => {
            // Invalidate and refetch the resumes list
            window.location.reload();
          }, 500);
          
          // Show success toast
          toast({
            title: "Resume Deleted",
            description: "Your resume has been permanently removed.",
            variant: "destructive",
          });
        } catch (error) {
          console.error("Error deleting resume:", error);
          toast({
            title: "Error Deleting Resume",
            description: "Failed to delete the resume. Please try again.",
            variant: "destructive",
          });
        }
        break;
      case 'upload':
        toast({
          title: "Upload Resume",
          description: "This feature is coming soon!",
        });
        break;
    }
  };

  return (
    <>
      <Navbar />
      <div className="container pt-12 pb-10 px-4 md:px-6 max-w-7xl mx-auto min-h-screen relative z-10">
        <div className="flex items-center justify-between mb-6">
          <div>
            <h1 className="text-3xl font-bold tracking-tight cosmic-text-gradient">My Resumes</h1>
            <p className="text-muted-foreground">
              Manage and organize all your resumes in one place
            </p>
          </div>

          <div className="flex space-x-3">
            <Button 
              variant="outline" 
              size="sm"
              onClick={() => handleResumeAction('upload')}
              className="border-white/10 text-gray-200 hover:bg-white/10 hover:text-white"
            >
              <Upload className="mr-2 h-4 w-4 text-blue-400" />
              Upload Resume
            </Button>

            <Dialog>
              <DialogTrigger asChild>
                <Button size="sm" className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700">
                  <Plus className="mr-2 h-4 w-4" />
                  Create New Resume
                </Button>
              </DialogTrigger>
              <DialogContent className="sm:max-w-[600px] cosmic-card border-white/10">
                <DialogHeader>
                  <DialogTitle className="cosmic-text-gradient text-xl">Create a New Resume</DialogTitle>
                  <DialogDescription className="text-gray-300">
                    Choose a template to start building your new resume
                  </DialogDescription>
                </DialogHeader>

                <div className="grid grid-cols-2 gap-4 py-4">
                  {resumeTemplates.map((template) => (
                    <div 
                      key={template.id}
                      className="border border-white/10 bg-black/40 rounded-lg overflow-hidden hover:border-blue-500 transition-colors cursor-pointer cosmic-card-hover"
                      onClick={() => handleCreateNewResume(template.id)}
                    >
                      <div className={`h-6 ${template.color}`}></div>
                      <div className="p-4">
                        <h3 className="font-medium text-white mb-1">{template.name}</h3>
                        <p className="text-sm text-gray-300">{template.description}</p>
                      </div>
                    </div>
                  ))}
                </div>

                <DialogFooter>
                  <Button 
                    variant="outline" 
                    onClick={() => handleCreateNewResume('blank')}
                    className="border-white/10 text-gray-200 hover:bg-white/10 hover:text-white"
                  >
                    Start from Scratch
                  </Button>
                </DialogFooter>
              </DialogContent>
            </Dialog>
          </div>
        </div>

        <div className="mb-8">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-blue-400" />
            <Input
              placeholder="Search your resumes..."
              className="pl-10 bg-black/30 border-white/10 text-gray-200 focus:border-blue-500 focus:ring-blue-500"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
          </div>
        </div>

        <Tabs 
          defaultValue="my-resumes" 
          value={activeTab} 
          onValueChange={setActiveTab}
          className="cosmic-tabs"
        >
          <div className="border-b border-white/10 mb-6">
            <TabsList className="bg-transparent mb-[-1px]">
              <TabsTrigger 
                value="my-resumes" 
                className="rounded-b-none data-[state=active]:border-b-2 data-[state=active]:border-blue-500 data-[state=active]:text-blue-400 text-gray-300"
              >
                <FileText className="h-4 w-4 mr-2" />
                My Resumes
              </TabsTrigger>
              <TabsTrigger 
                value="templates" 
                className="rounded-b-none data-[state=active]:border-b-2 data-[state=active]:border-blue-500 data-[state=active]:text-blue-400 text-gray-300"
              >
                <BarChart2 className="h-4 w-4 mr-2" />
                Templates
              </TabsTrigger>
            </TabsList>
          </div>

          <TabsContent value="my-resumes" className="mt-0">
            {isLoading ? (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                {[...Array(6)].map((_, i) => (
                  <Card key={i} className="overflow-hidden cosmic-card border-white/10">
                    <CardHeader className="pb-2">
                      <Skeleton className="h-6 w-2/3 bg-white/10" />
                      <Skeleton className="h-4 w-full mt-2 bg-white/10" />
                    </CardHeader>
                    <CardContent>
                      <Skeleton className="h-24 w-full bg-white/10" />
                    </CardContent>
                    <CardFooter>
                      <div className="flex justify-between w-full">
                        <Skeleton className="h-9 w-1/3 bg-white/10" />
                        <Skeleton className="h-9 w-1/3 bg-white/10" />
                      </div>
                    </CardFooter>
                  </Card>
                ))}
              </div>
            ) : error ? (
              <Card className="cosmic-card border-white/10">
                <CardContent className="flex items-center justify-center p-6">
                  <p className="text-red-400">Error loading resumes. Please try again.</p>
                </CardContent>
              </Card>
            ) : filteredResumes.length === 0 ? (
              <Card className="border-dashed cosmic-card border-white/10">
                <CardContent className="flex flex-col items-center justify-center p-10 text-center">
                  <FileText className="h-16 w-16 text-blue-400 mb-6 opacity-80" />
                  <h3 className="text-lg font-medium mb-3 text-white">No resumes found</h3>
                  <p className="text-gray-300 mb-6 max-w-md">
                    {searchQuery 
                      ? "No resumes match your search criteria. Try a different search term or clear the search."
                      : "You haven't created any resumes yet. Create your first resume or upload an existing one."}
                  </p>
                  <div className="flex gap-3">
                    <Dialog>
                      <DialogTrigger asChild>
                        <Button className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700">
                          <Plus className="mr-2 h-4 w-4" />
                          Create New Resume
                        </Button>
                      </DialogTrigger>
                      <DialogContent className="cosmic-card border-white/10">
                        {/* Template content is the same as above */}
                      </DialogContent>
                    </Dialog>
                    <Button 
                      variant="outline" 
                      onClick={() => handleResumeAction('upload')}
                      className="border-white/10 text-gray-200 hover:bg-white/10 hover:text-white"
                    >
                      <Upload className="mr-2 h-4 w-4 text-blue-400" />
                      Upload Resume
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ) : (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                {filteredResumes.map((resume: Resume) => (
                  <Card key={resume.id} className="overflow-hidden group cosmic-card border-white/10 hover:border-blue-500/50 transition-all duration-300">
                    <div className={`h-2 ${
                      resume.template === 'professional' ? 'bg-gradient-to-r from-blue-500 to-blue-700' :
                      resume.template === 'creative' ? 'bg-gradient-to-r from-purple-500 to-pink-500' :
                      resume.template === 'executive' ? 'bg-gradient-to-r from-gray-700 to-gray-900' :
                      resume.template === 'modern' ? 'bg-gradient-to-r from-emerald-500 to-teal-700' :
                      resume.template === 'minimalist' ? 'bg-gradient-to-r from-amber-500 to-orange-600' : 'bg-gradient-to-r from-blue-500 to-purple-600'
                    }`}></div>
                    <CardHeader className="pb-2">
                      <div className="flex justify-between items-start">
                        <CardTitle className="text-lg truncate text-white">{resume.title}</CardTitle>
                        <Badge variant="outline" className="text-xs border-white/20 text-blue-300 bg-blue-900/20">
                          {resume.template?.charAt(0).toUpperCase() + resume.template?.slice(1) || 'Basic'}
                        </Badge>
                      </div>
                      <CardDescription className="truncate text-gray-300">
                        {resume.personalInfo?.headline || 'No headline'}
                      </CardDescription>
                    </CardHeader>
                    <CardContent className="relative">
                      <div className="flex items-center text-sm text-gray-400 space-x-4 mb-4">
                        <div className="flex items-center">
                          <Calendar className="h-3.5 w-3.5 mr-1.5 text-blue-400" />
                          <span>Updated {new Date().toLocaleDateString()}</span>
                        </div>
                        <div className="flex items-center">
                          <Briefcase className="h-3.5 w-3.5 mr-1.5 text-blue-400" />
                          <span>{resume.experience?.length || 0} jobs</span>
                        </div>
                      </div>
                      <div className="aspect-[11/14] bg-black/50 rounded border border-white/10 flex items-center justify-center cosmic-glow-subtle">
                        <div className="text-center p-4">
                          <div className="text-xs text-gray-400">Preview</div>
                        </div>
                      </div>
                      <div className="absolute inset-0 bg-gradient-to-t from-black/80 to-transparent opacity-0 group-hover:opacity-100 flex items-end justify-center p-4 transition-opacity duration-300">
                        <Button 
                          onClick={() => handleResumeAction('edit', resume.id)}
                          className="bg-blue-600 hover:bg-blue-700 text-white"
                        >
                          Edit Resume
                        </Button>
                      </div>
                    </CardContent>
                    <CardFooter className="flex justify-between border-t border-white/5 bg-black/20 pt-3">
                      <Button 
                        variant="ghost" 
                        size="sm"
                        onClick={() => handleResumeAction('download', resume.id)}
                        className="text-gray-300 hover:text-white hover:bg-blue-800/20"
                      >
                        <Download className="h-4 w-4 mr-2 text-blue-400" />
                        Download
                      </Button>
                      <div className="flex gap-1">
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => handleResumeAction('edit', resume.id)}
                          className="h-8 w-8 text-gray-300 hover:text-white hover:bg-blue-800/20"
                        >
                          <Edit className="h-4 w-4 text-blue-400" />
                        </Button>
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => handleResumeAction('duplicate', resume.id)}
                          className="h-8 w-8 text-gray-300 hover:text-white hover:bg-blue-800/20"
                        >
                          <Copy className="h-4 w-4 text-blue-400" />
                        </Button>
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => handleResumeAction('delete', resume.id)}
                          className="h-8 w-8 text-gray-300 hover:text-white hover:bg-red-800/20"
                        >
                          <Trash2 className="h-4 w-4 text-red-400" />
                        </Button>
                      </div>
                    </CardFooter>
                  </Card>
                ))}
              </div>
            )}
          </TabsContent>

          <TabsContent value="templates" className="mt-0">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
              {resumeTemplates.map((template) => (
                <Card key={template.id} className="overflow-hidden group cosmic-card border-white/10 hover:border-blue-500/50 transition-all duration-300">
                  <div className={`h-2 ${template.color}`}></div>
                  <CardHeader className="pb-2">
                    <CardTitle className="text-lg text-white">{template.name}</CardTitle>
                    <CardDescription className="text-gray-300">
                      {template.description}
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="relative">
                    <div className="aspect-[11/14] bg-black/50 rounded border border-white/10 flex items-center justify-center cosmic-glow-subtle overflow-hidden">
                      {template.id === 'professional' && <TemplatePreviewProfessional />}
                      {template.id === 'creative' && <TemplatePreviewCreative />}
                      {template.id === 'executive' && <TemplatePreviewExecutive />}
                      {template.id === 'modern' && <TemplatePreviewModern />}
                      {template.id === 'minimalist' && <TemplatePreviewMinimal />}
                      {template.id === 'industry' && <TemplatePreviewIndustry />}
                      {template.id === 'bold' && <TemplatePreviewBold />}
                    </div>
                    <div className="absolute inset-0 bg-gradient-to-t from-black/80 to-transparent opacity-0 group-hover:opacity-100 flex items-end justify-center p-4 transition-opacity duration-300">
                      <Button 
                        onClick={() => handleCreateNewResume(template.id)}
                        className="bg-blue-600 hover:bg-blue-700 text-white"
                      >
                        Use This Template
                      </Button>
                    </div>
                  </CardContent>
                  <CardFooter className="flex justify-center border-t border-white/5 bg-black/20 pt-3">
                    <Button 
                      onClick={() => handleCreateNewResume(template.id)}
                      variant="ghost" 
                      size="sm"
                      className="text-gray-300 hover:text-white hover:bg-blue-800/20"
                    >
                      <Plus className="h-4 w-4 mr-2 text-blue-400" />
                      Create Resume
                    </Button>
                  </CardFooter>
                </Card>
              ))}
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </>
  );
}```
### refactored-resume-builder-education-tips.tsx
```tsx
// Education Tips Component that matches cosmic styling
export default function EducationTips() {
  return (
    <div className="bg-gray-900/50 border border-blue-500/30 rounded-md p-4 text-white text-sm">
      <p className="mb-3 text-blue-300 font-medium">
        Tips for education section:
      </p>
      <ul className="list-disc pl-5 space-y-2">
        <li>List your most recent education first</li>
        <li>Include relevant coursework and achievements</li>
        <li>Mention academic honors and awards</li>
        <li>Only include GPA if it strengthens your profile</li>
      </ul>
    </div>
  );
}```
## 2. Resume Components
### resume-section.tsx
```tsx
import { useState } from "react";
import { 
  Card, 
  CardContent 
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Trash2 } from "lucide-react";
import { 
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger 
} from "@/components/ui/collapsible";

export interface ExperienceItem {
  id: string;
  title: string;
  company: string;
  startDate: string;
  endDate: string;
  description: string;
}

export interface EducationItem {
  id: string;
  degree: string;
  institution: string;
  startDate: string;
  endDate: string;
  description: string;
}

export interface SkillItem {
  id: string;
  name: string;
  proficiency: number;
}

export interface ProjectItem {
  id: string;
  title: string;
  description: string;
  technologies: string[];
  link?: string;
}

interface ResumeExperienceSectionProps {
  experiences: ExperienceItem[];
  onUpdate: (experiences: ExperienceItem[]) => void;
}

interface ResumeEducationSectionProps {
  education: EducationItem[];
  onUpdate: (education: EducationItem[]) => void;
}

interface ResumeSkillsSectionProps {
  skills: SkillItem[];
  onUpdate: (skills: SkillItem[]) => void;
}

interface ResumeProjectsSectionProps {
  projects: ProjectItem[];
  onUpdate: (projects: ProjectItem[]) => void;
}

export function ResumeExperienceSection({ experiences, onUpdate }: ResumeExperienceSectionProps) {
  const [openId, setOpenId] = useState<string | null>(experiences[0]?.id || null);

  const handleAdd = () => {
    const newExp: ExperienceItem = {
      id: Date.now().toString(),
      title: "",
      company: "",
      startDate: "",
      endDate: "",
      description: "",
    };
    onUpdate([...experiences, newExp]);
    setOpenId(newExp.id);
  };

  const handleDelete = (id: string) => {
    onUpdate(experiences.filter((exp) => exp.id !== id));
    if (openId === id) {
      setOpenId(experiences[0]?.id !== id ? experiences[0]?.id : null);
    }
  };

  const handleChange = (id: string, field: keyof ExperienceItem, value: string) => {
    onUpdate(
      experiences.map((exp) =>
        exp.id === id ? { ...exp, [field]: value } : exp
      )
    );
  };

  return (
    <div>
      {experiences.length > 0 && (
        <div className="cosmic-add-button-container flex justify-end mb-4">
          <Button
            onClick={handleAdd}
            className="cosmic-add-experience bg-blue-600/30 hover:bg-blue-600/50 text-white border border-blue-500/30"
            variant="outline"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="mr-2">
              <line x1="12" y1="5" x2="12" y2="19"></line>
              <line x1="5" y1="12" x2="19" y2="12"></line>
            </svg>
            Add Experience
          </Button>
        </div>
      )}
      
      {experiences.map((exp) => (
        <Collapsible
          key={exp.id}
          open={openId === exp.id}
          onOpenChange={() => setOpenId(openId === exp.id ? null : exp.id)}
          className="cosmic-experience-item mb-4"
        >
          <div className="cosmic-experience-title-bar">
            <CollapsibleTrigger asChild>
              <Button 
                variant="ghost" 
                className="w-full justify-start p-0 hover:bg-transparent"
              >
                <div className="text-left">
                  <div className="cosmic-experience-title-text">
                    {exp.title || "Job Title"} - {exp.company || "Company"}
                  </div>
                </div>
              </Button>
            </CollapsibleTrigger>
            <Button
              variant="ghost"
              size="icon"
              onClick={(e) => {
                e.stopPropagation();
                handleDelete(exp.id);
              }}
              aria-label="Delete experience"
              className="cosmic-experience-delete"
            >
              <Trash2 className="h-4 w-4" />
            </Button>
          </div>
            
          <CollapsibleContent className="cosmic-experience-content">
            <div className="cosmic-experience-form">
              <div className="cosmic-form-group">
                <Label htmlFor={`job-title-${exp.id}`} className="cosmic-form-label">Job Title</Label>
                <Input
                  id={`job-title-${exp.id}`}
                  value={exp.title}
                  onChange={(e) => handleChange(exp.id, "title", e.target.value)}
                  className="cosmic-form-input"
                  placeholder="Freelance Coder"
                />
              </div>
              
              <div className="cosmic-form-group">
                <Label htmlFor={`company-${exp.id}`} className="cosmic-form-label">Company</Label>
                <Input
                  id={`company-${exp.id}`}
                  value={exp.company}
                  onChange={(e) => handleChange(exp.id, "company", e.target.value)}
                  className="cosmic-form-input"
                  placeholder="Programming"
                />
              </div>

              <div className="cosmic-form-group">
                <Label htmlFor={`start-date-${exp.id}`} className="cosmic-form-label">Start Date</Label>
                <Input
                  id={`start-date-${exp.id}`}
                  value={exp.startDate}
                  onChange={(e) => handleChange(exp.id, "startDate", e.target.value)}
                  className="cosmic-form-input"
                  placeholder="2021-03"
                />
              </div>

              <div className="cosmic-form-group">
                <Label htmlFor={`end-date-${exp.id}`} className="cosmic-form-label">End Date</Label>
                <Input
                  id={`end-date-${exp.id}`}
                  value={exp.endDate}
                  onChange={(e) => handleChange(exp.id, "endDate", e.target.value)}
                  className="cosmic-form-input"
                  placeholder="Present"
                />
              </div>

              <div className="cosmic-form-group cosmic-experience-form-full">
                <Label htmlFor={`description-${exp.id}`} className="cosmic-form-label">Responsibilities & Achievements</Label>
                <Textarea
                  id={`description-${exp.id}`}
                  value={exp.description}
                  onChange={(e) => handleChange(exp.id, "description", e.target.value)}
                  placeholder="Utilized Python automation to streamline client-specified tasks, efficiently reducing time commitments by 30%. Utilized Git for version control and project management, ensuring code quality and collaboration with other developers."
                  className="cosmic-form-input cosmic-form-textarea"
                  rows={5}
                />
              </div>
            </div>
          </CollapsibleContent>
        </Collapsible>
      ))}
      
      {experiences.length === 0 && (
        <button
          onClick={handleAdd}
          className="w-full py-3 mt-2 bg-blue-600/30 hover:bg-blue-600/50 text-white border border-blue-500/30 rounded-md flex items-center justify-center space-x-2"
        >
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
            <circle cx="12" cy="12" r="10"></circle>
            <line x1="12" y1="8" x2="12" y2="16"></line>
            <line x1="8" y1="12" x2="16" y2="12"></line>
          </svg>
          <span>Add Your First Experience</span>
        </button>
      )}
    </div>
  );
}

export function ResumeEducationSection({ education, onUpdate }: ResumeEducationSectionProps) {
  const [openId, setOpenId] = useState<string | null>(education[0]?.id || null);

  const handleAdd = () => {
    const newEdu: EducationItem = {
      id: Date.now().toString(),
      degree: "",
      institution: "",
      startDate: "",
      endDate: "",
      description: "",
    };
    onUpdate([...education, newEdu]);
    setOpenId(newEdu.id);
  };

  const handleDelete = (id: string) => {
    onUpdate(education.filter((edu) => edu.id !== id));
    if (openId === id) {
      setOpenId(education[0]?.id !== id ? education[0]?.id : null);
    }
  };

  const handleChange = (id: string, field: keyof EducationItem, value: string) => {
    onUpdate(
      education.map((edu) =>
        edu.id === id ? { ...edu, [field]: value } : edu
      )
    );
  };

  return (
    <div>
      {education.length > 0 && (
        <div className="cosmic-add-button-container flex justify-end mb-4">
          <Button
            onClick={handleAdd}
            className="cosmic-add-education bg-blue-600/30 hover:bg-blue-600/50 text-white border border-blue-500/30"
            variant="outline"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="mr-2">
              <line x1="12" y1="5" x2="12" y2="19"></line>
              <line x1="5" y1="12" x2="19" y2="12"></line>
            </svg>
            Add Education
          </Button>
        </div>
      )}
      
      {education.map((edu) => (
        <Collapsible
          key={edu.id}
          open={openId === edu.id}
          onOpenChange={() => setOpenId(openId === edu.id ? null : edu.id)}
          className="cosmic-education-item mb-4"
        >
          <div className="cosmic-education-title-bar">
            <CollapsibleTrigger asChild>
              <Button 
                variant="ghost" 
                className="w-full justify-start p-0 hover:bg-transparent"
              >
                <div className="text-left">
                  <div className="cosmic-education-title-text">
                    {edu.degree || "Degree"} - {edu.institution || "Institution"}
                  </div>
                </div>
              </Button>
            </CollapsibleTrigger>
            <Button
              variant="ghost"
              size="icon"
              onClick={(e) => {
                e.stopPropagation();
                handleDelete(edu.id);
              }}
              aria-label="Delete education"
              className="cosmic-experience-delete"
            >
              <Trash2 className="h-4 w-4" />
            </Button>
          </div>
            
          <CollapsibleContent className="cosmic-education-content">
            <div className="cosmic-education-form">
              <div className="cosmic-form-group">
                <Label htmlFor={`degree-${edu.id}`} className="cosmic-form-label">Degree</Label>
                <Input
                  id={`degree-${edu.id}`}
                  value={edu.degree}
                  onChange={(e) => handleChange(edu.id, "degree", e.target.value)}
                  className="cosmic-form-input"
                  placeholder="Bachelor of Science in Computer Science"
                />
              </div>
              
              <div className="cosmic-form-group">
                <Label htmlFor={`institution-${edu.id}`} className="cosmic-form-label">Institution</Label>
                <Input
                  id={`institution-${edu.id}`}
                  value={edu.institution}
                  onChange={(e) => handleChange(edu.id, "institution", e.target.value)}
                  className="cosmic-form-input"
                  placeholder="CU Denver"
                />
              </div>

              <div className="cosmic-form-group">
                <Label htmlFor={`start-date-${edu.id}`} className="cosmic-form-label">Start Date</Label>
                <Input
                  id={`start-date-${edu.id}`}
                  value={edu.startDate}
                  onChange={(e) => handleChange(edu.id, "startDate", e.target.value)}
                  className="cosmic-form-input"
                  placeholder="2022-08"
                />
              </div>

              <div className="cosmic-form-group">
                <Label htmlFor={`end-date-${edu.id}`} className="cosmic-form-label">End Date</Label>
                <Input
                  id={`end-date-${edu.id}`}
                  value={edu.endDate}
                  onChange={(e) => handleChange(edu.id, "endDate", e.target.value)}
                  className="cosmic-form-input"
                  placeholder="2026-05"
                />
              </div>

              <div className="cosmic-form-group cosmic-education-form-full">
                <Label htmlFor={`description-${edu.id}`} className="cosmic-form-label">Description</Label>
                <Textarea
                  id={`description-${edu.id}`}
                  value={edu.description}
                  onChange={(e) => handleChange(edu.id, "description", e.target.value)}
                  placeholder="Currently pursuing a degree with a focus on software development, data analysis, and algorithms."
                  className="cosmic-form-input cosmic-form-textarea"
                  rows={4}
                />
              </div>
            </div>
          </CollapsibleContent>
        </Collapsible>
      ))}
      
      {education.length === 0 && (
        <button
          onClick={handleAdd}
          className="w-full py-3 mt-2 bg-blue-600/30 hover:bg-blue-600/50 text-white border border-blue-500/30 rounded-md flex items-center justify-center space-x-2"
        >
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
            <circle cx="12" cy="12" r="10"></circle>
            <line x1="12" y1="8" x2="12" y2="16"></line>
            <line x1="8" y1="12" x2="16" y2="12"></line>
          </svg>
          <span>Add Your First Education</span>
        </button>
      )}
    </div>
  );
}

export function ResumeSkillsSection({ skills, onUpdate }: ResumeSkillsSectionProps) {
  const handleAdd = () => {
    const newSkill: SkillItem = {
      id: Date.now().toString(),
      name: "",
      proficiency: 3,
    };
    onUpdate([...skills, newSkill]);
  };

  const handleDelete = (id: string) => {
    onUpdate(skills.filter((skill) => skill.id !== id));
  };

  const handleChange = (id: string, field: keyof SkillItem, value: string | number) => {
    onUpdate(
      skills.map((skill) =>
        skill.id === id ? { ...skill, [field]: value } : skill
      )
    );
  };

  return (
    <div>
      {skills.length > 0 && (
        <div className="cosmic-add-button-container flex justify-end mb-4">
          <Button
            onClick={handleAdd}
            className="cosmic-add-skill bg-blue-600/30 hover:bg-blue-600/50 text-white border border-blue-500/30"
            variant="outline"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="mr-2">
              <line x1="12" y1="5" x2="12" y2="19"></line>
              <line x1="5" y1="12" x2="19" y2="12"></line>
            </svg>
            Add Skill
          </Button>
        </div>
      )}
      
      <div className="cosmic-skills-grid">
        {skills.map((skill) => (
          <div key={skill.id} className="cosmic-skill-item">
            <Input
              value={skill.name}
              onChange={(e) => handleChange(skill.id, "name", e.target.value)}
              placeholder="Python"
              className="cosmic-form-input flex-grow"
            />
            <div className="relative ml-2">
              <select
                value={skill.proficiency}
                onChange={(e) => handleChange(skill.id, "proficiency", parseInt(e.target.value))}
                className="cosmic-form-input appearance-none pr-8"
              >
                <option value={1}>Beginner</option>
                <option value={2}>Intermediate</option>
                <option value={3}>Advanced</option>
                <option value={4}>Expert</option>
                <option value={5}>Master</option>
              </select>
              <svg className="absolute right-2 top-1/2 transform -translate-y-1/2 h-4 w-4 opacity-70" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                <polyline points="6 9 12 15 18 9"></polyline>
              </svg>
            </div>
            <Button 
              variant="ghost" 
              size="icon" 
              onClick={() => handleDelete(skill.id)}
              aria-label="Delete skill"
              className="ml-1 cosmic-experience-delete"
            >
              <Trash2 className="h-4 w-4" />
            </Button>
          </div>
        ))}
      </div>
      
      {skills.length === 0 && (
        <button
          onClick={handleAdd}
          className="w-full py-3 mt-2 bg-blue-600/30 hover:bg-blue-600/50 text-white border border-blue-500/30 rounded-md flex items-center justify-center space-x-2"
        >
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
            <circle cx="12" cy="12" r="10"></circle>
            <line x1="12" y1="8" x2="12" y2="16"></line>
            <line x1="8" y1="12" x2="16" y2="12"></line>
          </svg>
          <span>Add Your First Skill</span>
        </button>
      )}
    </div>
  );
}

export function ResumeProjectsSection({ projects, onUpdate }: ResumeProjectsSectionProps) {
  const [openId, setOpenId] = useState<string | null>(projects[0]?.id || null);

  const handleAdd = () => {
    const newProject: ProjectItem = {
      id: Date.now().toString(),
      title: "",
      description: "",
      technologies: [],
      link: "",
    };
    onUpdate([...projects, newProject]);
    setOpenId(newProject.id);
  };

  const handleDelete = (id: string) => {
    onUpdate(projects.filter((project) => project.id !== id));
    if (openId === id) {
      setOpenId(projects[0]?.id !== id ? projects[0]?.id : null);
    }
  };

  const handleChange = (id: string, field: keyof ProjectItem, value: string | string[]) => {
    onUpdate(
      projects.map((project) =>
        project.id === id ? { ...project, [field]: value } : project
      )
    );
  };

  return (
    <div>
      {projects.length > 0 && (
        <div className="cosmic-add-button-container flex justify-end mb-4">
          <Button
            onClick={handleAdd}
            className="cosmic-add-project bg-blue-600/30 hover:bg-blue-600/50 text-white border border-blue-500/30"
            variant="outline"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="mr-2">
              <line x1="12" y1="5" x2="12" y2="19"></line>
              <line x1="5" y1="12" x2="19" y2="12"></line>
            </svg>
            Add Project
          </Button>
        </div>
      )}
      
      {projects.map((project) => (
        <Collapsible
          key={project.id}
          open={openId === project.id}
          onOpenChange={() => setOpenId(openId === project.id ? null : project.id)}
          className="cosmic-projects-item mb-4"
        >
          <div className="cosmic-projects-title-bar">
            <CollapsibleTrigger asChild>
              <Button 
                variant="ghost" 
                className="w-full justify-start p-0 hover:bg-transparent"
              >
                <div className="text-left">
                  <div className="cosmic-projects-title-text">
                    {project.title || "Python App Project"} {project.technologies.length > 0 && 
                      `(${project.technologies.slice(0, 3).join(", ")}${project.technologies.length > 3 ? '...' : ''})`
                    }
                  </div>
                </div>
              </Button>
            </CollapsibleTrigger>
            <Button
              variant="ghost"
              size="icon"
              onClick={(e) => {
                e.stopPropagation();
                handleDelete(project.id);
              }}
              aria-label="Delete project"
              className="cosmic-experience-delete"
            >
              <Trash2 className="h-4 w-4" />
            </Button>
          </div>
            
          <CollapsibleContent className="cosmic-projects-content">
            <div className="cosmic-projects-form">
              <div className="cosmic-form-group">
                <Label htmlFor={`title-${project.id}`} className="cosmic-form-label">Project Title</Label>
                <Input
                  id={`title-${project.id}`}
                  value={project.title}
                  onChange={(e) => handleChange(project.id, "title", e.target.value)}
                  className="cosmic-form-input"
                  placeholder="Python App Project"
                />
              </div>
              
              <div className="cosmic-form-group">
                <Label htmlFor={`description-${project.id}`} className="cosmic-form-label">Description</Label>
                <Textarea
                  id={`description-${project.id}`}
                  value={project.description}
                  onChange={(e) => handleChange(project.id, "description", e.target.value)}
                  className="cosmic-form-input cosmic-form-textarea"
                  placeholder="Developed a Python app for data analysis and visualization, using Pandas, NumPy, and Matplotlib to process and display data. Added features for data cleaning, statistical analysis, and interactive charts for enhanced data insights. Engineered this project in 170 hours, achieving 25% speedup over original requirements."
                  rows={5}
                />
              </div>

              <div className="cosmic-form-group">
                <Label htmlFor={`technologies-${project.id}`} className="cosmic-form-label">Technologies</Label>
                <Input
                  id={`technologies-${project.id}`}
                  value={project.technologies.join(", ")}
                  onChange={(e) => handleChange(project.id, "technologies", e.target.value.split(",").map(t => t.trim()))}
                  className="cosmic-form-input"
                  placeholder="Python, Pandas, NumPy, Matplotlib, SQL"
                />
              </div>

              <div className="cosmic-form-group">
                <Label htmlFor={`link-${project.id}`} className="cosmic-form-label">Project Link (optional)</Label>
                <div className="relative">
                  <Input
                    id={`link-${project.id}`}
                    value={project.link || ""}
                    onChange={(e) => handleChange(project.id, "link", e.target.value)}
                    className="cosmic-form-input pl-8"
                    placeholder="e.g. https://github.com/username/project"
                  />
                  <svg className="absolute left-2 top-1/2 transform -translate-y-1/2 h-4 w-4 opacity-70" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                    <path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"></path>
                    <path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"></path>
                  </svg>
                </div>
              </div>
            </div>
          </CollapsibleContent>
        </Collapsible>
      ))}
      
      {projects.length === 0 && (
        <button
          onClick={handleAdd}
          className="w-full py-3 mt-2 bg-blue-600/30 hover:bg-blue-600/50 text-white border border-blue-500/30 rounded-md flex items-center justify-center space-x-2"
        >
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
            <circle cx="12" cy="12" r="10"></circle>
            <line x1="12" y1="8" x2="12" y2="16"></line>
            <line x1="8" y1="12" x2="16" y2="12"></line>
          </svg>
          <span>Add Your First Project</span>
        </button>
      )}
    </div>
  );
}
```
### resume-template.tsx
```tsx
import { 
  Card, 
  CardHeader, 
  CardContent 
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Download } from "lucide-react";
import { 
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";

export interface PersonalInfo {
  firstName: string;
  lastName: string;
  email: string;
  phone: string;
  headline: string;
  summary: string;
}

export interface Resume {
  id?: string;
  title: string;
  personalInfo: PersonalInfo;
  experience: any[];
  education: any[];
  skills: any[];
  projects: any[];
  template: string;
}

interface TemplateOptionProps {
  name: string;
  description: string;
  preview: React.ReactNode;
  selected: boolean;
  onClick: () => void;
}

function TemplateOption({ name, description, preview, selected, onClick }: TemplateOptionProps) {
  return (
    <div
      onClick={onClick}
      className={`cursor-pointer relative rounded-lg border ${
        selected ? "ring-2 ring-offset-2 ring-primary-500 border-primary-400" : "border-secondary-300"
      } bg-white px-6 py-5 shadow-sm flex items-center space-x-3 hover:border-primary-400 focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-primary-500`}
    >
      <div className="flex-shrink-0 h-40 w-full">{preview}</div>
      <div className="flex-1 min-w-0">
        <p className="text-sm font-medium text-secondary-900">{name}</p>
        <p className="text-sm text-secondary-500 truncate">{description}</p>
      </div>
    </div>
  );
}

export function ProfessionalTemplate({ resume }: { resume: Resume }) {
  const { personalInfo, experience, education, skills } = resume;
  const fullName = `${personalInfo?.firstName || ''} ${personalInfo?.lastName || ''}`.trim();
  
  return (
    <div className="p-6 bg-white">
      <div className="text-center py-4 border-b border-gray-200 mb-6">
        <h1 className="text-2xl font-bold text-gray-900">{fullName || "Your Name"}</h1>
        <p className="text-gray-600 mt-1">{personalInfo?.headline || "Professional Headline"}</p>
        <div className="flex justify-center gap-4 mt-2 text-sm text-gray-500">
          {personalInfo?.email && <span>{personalInfo.email}</span>}
          {personalInfo?.phone && <span>{personalInfo.phone}</span>}
        </div>
      </div>
      
      {personalInfo?.summary && (
        <div className="mb-6">
          <h2 className="text-lg font-semibold text-gray-900 mb-2">Professional Summary</h2>
          <p className="text-gray-700">{personalInfo.summary}</p>
        </div>
      )}
      
      {experience && experience.length > 0 && (
        <div className="mb-6">
          <h2 className="text-lg font-semibold text-gray-900 mb-2">Experience</h2>
          {experience.map((job, index) => (
            <div key={index} className="mb-4">
              <div className="flex justify-between">
                <h3 className="font-semibold">{job.title || "Position Title"}</h3>
                <span className="text-gray-500 text-sm">{job.startDate} - {job.endDate}</span>
              </div>
              <p className="text-gray-600">{job.company || "Company Name"}</p>
              <p className="text-gray-700 mt-1 whitespace-pre-line">{job.description}</p>
            </div>
          ))}
        </div>
      )}
      
      {education && education.length > 0 && (
        <div className="mb-6">
          <h2 className="text-lg font-semibold text-gray-900 mb-2">Education</h2>
          {education.map((edu, index) => (
            <div key={index} className="mb-4">
              <div className="flex justify-between">
                <h3 className="font-semibold">{edu.degree || "Degree"}</h3>
                <span className="text-gray-500 text-sm">{edu.startDate} - {edu.endDate}</span>
              </div>
              <p className="text-gray-600">{edu.institution || "Institution"}</p>
              {edu.description && <p className="text-gray-700 mt-1">{edu.description}</p>}
            </div>
          ))}
        </div>
      )}
      
      {skills && skills.length > 0 && (
        <div>
          <h2 className="text-lg font-semibold text-gray-900 mb-2">Skills</h2>
          <div className="flex flex-wrap gap-2">
            {skills.map((skill, index) => (
              <span key={index} className="px-2 py-1 bg-gray-100 rounded-md text-gray-700 text-sm">
                {skill.name}
              </span>
            ))}
          </div>
        </div>
      )}
    </div>
  );
}

export function CreativeTemplate({ resume }: { resume: Resume }) {
  const { personalInfo, experience, education, skills } = resume;
  const fullName = `${personalInfo?.firstName || ''} ${personalInfo?.lastName || ''}`.trim();
  
  return (
    <div className="p-6 bg-white flex">
      <div className="w-1/3 bg-accent-100 p-6 rounded-l-lg">
        <div className="mb-8 text-center">
          <h1 className="text-xl font-bold text-accent-900">{fullName || "Your Name"}</h1>
          <p className="text-accent-700 mt-1 text-sm">{personalInfo?.headline || "Professional Headline"}</p>
        </div>
        
        <div className="mb-6">
          <h2 className="text-lg font-semibold text-accent-900 mb-2 border-b border-accent-200 pb-1">Contact</h2>
          <div className="text-sm space-y-2 text-accent-800">
            {personalInfo?.email && <p>{personalInfo.email}</p>}
            {personalInfo?.phone && <p>{personalInfo.phone}</p>}
          </div>
        </div>
        
        {skills && skills.length > 0 && (
          <div>
            <h2 className="text-lg font-semibold text-accent-900 mb-2 border-b border-accent-200 pb-1">Skills</h2>
            <div className="space-y-2">
              {skills.map((skill, index) => (
                <div key={index} className="text-sm text-accent-800">
                  <span>{skill.name}</span>
                  <div className="w-full h-1 bg-accent-200 rounded-full mt-1">
                    <div 
                      className="h-1 bg-accent-500 rounded-full" 
                      style={{ width: `${Math.min(skill.proficiency * 20, 100)}%` }}
                    ></div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
      
      <div className="w-2/3 p-6">
        {personalInfo?.summary && (
          <div className="mb-6">
            <h2 className="text-lg font-semibold text-gray-900 mb-2 border-b border-gray-200 pb-1">About Me</h2>
            <p className="text-gray-700">{personalInfo.summary}</p>
          </div>
        )}
        
        {experience && experience.length > 0 && (
          <div className="mb-6">
            <h2 className="text-lg font-semibold text-gray-900 mb-2 border-b border-gray-200 pb-1">Experience</h2>
            {experience.map((job, index) => (
              <div key={index} className="mb-4">
                <div className="flex justify-between items-center">
                  <h3 className="font-semibold">{job.title || "Position Title"}</h3>
                  <span className="text-gray-500 text-sm">{job.startDate} - {job.endDate}</span>
                </div>
                <p className="text-gray-600 italic">{job.company || "Company Name"}</p>
                <p className="text-gray-700 mt-1 whitespace-pre-line">{job.description}</p>
              </div>
            ))}
          </div>
        )}
        
        {education && education.length > 0 && (
          <div>
            <h2 className="text-lg font-semibold text-gray-900 mb-2 border-b border-gray-200 pb-1">Education</h2>
            {education.map((edu, index) => (
              <div key={index} className="mb-4">
                <div className="flex justify-between items-center">
                  <h3 className="font-semibold">{edu.degree || "Degree"}</h3>
                  <span className="text-gray-500 text-sm">{edu.startDate} - {edu.endDate}</span>
                </div>
                <p className="text-gray-600 italic">{edu.institution || "Institution"}</p>
                {edu.description && <p className="text-gray-700 mt-1">{edu.description}</p>}
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}

export function ExecutiveTemplate({ resume }: { resume: Resume }) {
  const { personalInfo, experience, education, skills } = resume;
  const fullName = `${personalInfo?.firstName || ''} ${personalInfo?.lastName || ''}`.trim();
  
  return (
    <div className="p-6 bg-white">
      <div className="bg-primary-600 text-white p-6 rounded-t-lg">
        <h1 className="text-2xl font-bold">{fullName || "Your Name"}</h1>
        <p className="text-primary-100 mt-1">{personalInfo?.headline || "Professional Headline"}</p>
        <div className="flex gap-4 mt-3 text-sm text-primary-100">
          {personalInfo?.email && <span>{personalInfo.email}</span>}
          {personalInfo?.phone && <span>{personalInfo.phone}</span>}
        </div>
      </div>
      
      <div className="p-6">
        {personalInfo?.summary && (
          <div className="mb-6">
            <h2 className="text-lg font-bold text-primary-900 mb-2">Executive Summary</h2>
            <p className="text-gray-700 border-l-2 border-primary-300 pl-4">{personalInfo.summary}</p>
          </div>
        )}
        
        {experience && experience.length > 0 && (
          <div className="mb-6">
            <h2 className="text-lg font-bold text-primary-900 mb-2">Professional Experience</h2>
            {experience.map((job, index) => (
              <div key={index} className="mb-4">
                <div className="flex justify-between items-baseline">
                  <h3 className="font-bold text-gray-900">{job.title || "Position Title"}</h3>
                  <span className="text-primary-600 font-medium text-sm">{job.startDate} - {job.endDate}</span>
                </div>
                <p className="text-primary-700 font-semibold">{job.company || "Company Name"}</p>
                <p className="text-gray-700 mt-1 whitespace-pre-line">{job.description}</p>
              </div>
            ))}
          </div>
        )}
        
        <div className="grid grid-cols-2 gap-6">
          {education && education.length > 0 && (
            <div>
              <h2 className="text-lg font-bold text-primary-900 mb-2">Education</h2>
              {education.map((edu, index) => (
                <div key={index} className="mb-4">
                  <h3 className="font-bold text-gray-900">{edu.degree || "Degree"}</h3>
                  <p className="text-primary-700">{edu.institution || "Institution"}</p>
                  <p className="text-gray-500 text-sm">{edu.startDate} - {edu.endDate}</p>
                </div>
              ))}
            </div>
          )}
          
          {skills && skills.length > 0 && (
            <div>
              <h2 className="text-lg font-bold text-primary-900 mb-2">Core Competencies</h2>
              <div className="grid grid-cols-2 gap-2">
                {skills.map((skill, index) => (
                  <div key={index} className="text-gray-700 flex items-center">
                    <span className="w-2 h-2 bg-primary-500 rounded-full mr-2"></span>
                    <span>{skill.name}</span>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

export function TemplatePreviewProfessional() {
  return (
    <div className="h-full w-full bg-secondary-100 rounded flex flex-col p-3">
      <div className="text-center py-2 border-b border-secondary-200">
        <div className="h-2 bg-secondary-300 rounded w-1/2 mx-auto mb-1"></div>
        <div className="h-2 bg-secondary-300 rounded w-3/4 mx-auto"></div>
      </div>
      <div className="flex-1 flex flex-col justify-around py-2">
        <div className="space-y-1">
          <div className="h-2 bg-secondary-300 rounded w-full"></div>
          <div className="h-2 bg-secondary-300 rounded w-5/6"></div>
        </div>
        <div className="space-y-1">
          <div className="h-2 bg-secondary-300 rounded w-full"></div>
          <div className="h-2 bg-secondary-300 rounded w-4/6"></div>
        </div>
      </div>
    </div>
  );
}

export function TemplatePreviewCreative() {
  return (
    <div className="h-full w-full bg-accent-100 rounded flex p-3">
      <div className="w-1/3 bg-accent-200 rounded-l"></div>
      <div className="w-2/3 flex flex-col p-2">
        <div className="text-center py-1">
          <div className="h-2 bg-accent-300 rounded w-1/2 mx-auto mb-1"></div>
          <div className="h-2 bg-accent-300 rounded w-3/4 mx-auto"></div>
        </div>
        <div className="flex-1 flex flex-col justify-around py-2">
          <div className="space-y-1">
            <div className="h-2 bg-accent-300 rounded w-full"></div>
            <div className="h-2 bg-accent-300 rounded w-5/6"></div>
          </div>
        </div>
      </div>
    </div>
  );
}

export function TemplatePreviewExecutive() {
  return (
    <div className="h-full w-full bg-secondary-100 rounded flex flex-col p-3">
      <div className="bg-primary-600 text-center py-2 rounded-t">
        <div className="h-2 bg-white bg-opacity-70 rounded w-1/2 mx-auto mb-1"></div>
        <div className="h-2 bg-white bg-opacity-70 rounded w-3/4 mx-auto"></div>
      </div>
      <div className="flex-1 flex flex-col justify-around py-2">
        <div className="space-y-1">
          <div className="h-2 bg-secondary-300 rounded w-full"></div>
          <div className="h-2 bg-secondary-300 rounded w-5/6"></div>
        </div>
        <div className="space-y-1">
          <div className="h-2 bg-secondary-300 rounded w-full"></div>
          <div className="h-2 bg-secondary-300 rounded w-4/6"></div>
        </div>
      </div>
    </div>
  );
}

export function TemplatePreviewModern() {
  return (
    <div className="h-full w-full bg-secondary-100 rounded flex flex-col p-3">
      <div className="bg-blue-500 h-2 w-full rounded-t"></div>
      <div className="flex-1 flex flex-col p-2">
        <div className="flex justify-between">
          <div className="h-3 bg-secondary-200 rounded w-1/3"></div>
          <div className="h-3 bg-secondary-200 rounded w-1/3"></div>
        </div>
        <div className="mt-3 space-y-1">
          <div className="h-2 bg-secondary-300 rounded w-full"></div>
          <div className="h-2 bg-secondary-300 rounded w-5/6"></div>
        </div>
      </div>
    </div>
  );
}

export function TemplatePreviewMinimal() {
  return (
    <div className="h-full w-full bg-white rounded flex flex-col p-3">
      <div className="border-b pb-2">
        <div className="h-3 bg-gray-200 rounded w-1/2 mb-1"></div>
      </div>
      <div className="flex-1 flex flex-col justify-around py-2">
        <div className="space-y-1">
          <div className="h-2 bg-gray-200 rounded w-full"></div>
          <div className="h-2 bg-gray-200 rounded w-5/6"></div>
        </div>
      </div>
    </div>
  );
}

export function TemplatePreviewIndustry() {
  return (
    <div className="h-full w-full bg-slate-100 rounded flex flex-col p-3">
      <div className="bg-slate-700 text-center py-2 rounded-t">
        <div className="h-2 bg-white bg-opacity-70 rounded w-1/2 mx-auto mb-1"></div>
      </div>
      <div className="flex-1 flex flex-col justify-around py-2">
        <div className="space-y-1">
          <div className="h-2 bg-slate-300 rounded w-full"></div>
          <div className="h-2 bg-slate-300 rounded w-5/6"></div>
        </div>
      </div>
    </div>
  );
}

export function TemplatePreviewBold() {
  return (
    <div className="h-full w-full bg-secondary-100 rounded flex flex-col p-3">
      <div className="bg-pink-600 text-center py-2 rounded-t">
        <div className="h-3 bg-white bg-opacity-70 rounded w-1/2 mx-auto mb-1"></div>
      </div>
      <div className="flex-1 flex flex-col justify-around py-2">
        <div className="space-y-1">
          <div className="h-2 bg-secondary-300 rounded w-full"></div>
          <div className="h-2 bg-secondary-300 rounded w-5/6"></div>
        </div>
      </div>
    </div>
  );
}

export function ModernTemplate({ resume }: { resume: Resume }) {
  const { personalInfo, experience, education, skills } = resume;
  const fullName = `${personalInfo?.firstName || ''} ${personalInfo?.lastName || ''}`.trim();
  
  return (
    <div className="p-6 bg-white">
      {/* Header with blue accent */}
      <div className="border-t-4 border-blue-500 pt-4 mb-6">
        <h1 className="text-2xl font-bold text-gray-900">{fullName || "Your Name"}</h1>
        <p className="text-blue-600 font-medium">{personalInfo?.headline || "Professional Headline"}</p>
        <div className="flex flex-wrap gap-4 mt-2 text-sm text-gray-600">
          {personalInfo?.email && <span className="flex items-center"><span className="mr-1">✉</span> {personalInfo.email}</span>}
          {personalInfo?.phone && <span className="flex items-center"><span className="mr-1">☎</span> {personalInfo.phone}</span>}
        </div>
      </div>
      
      {personalInfo?.summary && (
        <div className="mb-6">
          <h2 className="text-lg font-semibold text-gray-900 border-b border-gray-200 pb-1 mb-2">Profile</h2>
          <p className="text-gray-700">{personalInfo.summary}</p>
        </div>
      )}
      
      {experience && experience.length > 0 && (
        <div className="mb-6">
          <h2 className="text-lg font-semibold text-gray-900 border-b border-gray-200 pb-1 mb-2">Experience</h2>
          {experience.map((job, index) => (
            <div key={index} className="mb-4">
              <div className="flex flex-wrap justify-between items-baseline">
                <h3 className="font-bold text-gray-800">{job.title || "Position Title"}</h3>
                <span className="text-gray-500 text-sm">{job.startDate} - {job.endDate}</span>
              </div>
              <p className="text-blue-600 font-medium">{job.company || "Company Name"}</p>
              <p className="text-gray-700 mt-1 whitespace-pre-line">{job.description}</p>
            </div>
          ))}
        </div>
      )}
      
      {education && education.length > 0 && (
        <div className="mb-6">
          <h2 className="text-lg font-semibold text-gray-900 border-b border-gray-200 pb-1 mb-2">Education</h2>
          {education.map((edu, index) => (
            <div key={index} className="mb-4">
              <div className="flex flex-wrap justify-between items-baseline">
                <h3 className="font-bold text-gray-800">{edu.degree || "Degree"}</h3>
                <span className="text-gray-500 text-sm">{edu.startDate} - {edu.endDate}</span>
              </div>
              <p className="text-blue-600 font-medium">{edu.institution || "Institution"}</p>
              {edu.description && <p className="text-gray-700 mt-1">{edu.description}</p>}
            </div>
          ))}
        </div>
      )}
      
      {skills && skills.length > 0 && (
        <div>
          <h2 className="text-lg font-semibold text-gray-900 border-b border-gray-200 pb-1 mb-2">Skills</h2>
          <div className="flex flex-wrap gap-2">
            {skills.map((skill, index) => (
              <span key={index} className="px-3 py-1 bg-blue-50 text-blue-700 rounded-full text-sm">
                {skill.name}
              </span>
            ))}
          </div>
        </div>
      )}
    </div>
  );
}

export function MinimalTemplate({ resume }: { resume: Resume }) {
  const { personalInfo, experience, education, skills } = resume;
  const fullName = `${personalInfo?.firstName || ''} ${personalInfo?.lastName || ''}`.trim();
  
  return (
    <div className="p-6 bg-white">
      {/* Simple minimal header */}
      <div className="text-center mb-6">
        <h1 className="text-2xl font-normal text-gray-900">{fullName || "Your Name"}</h1>
        <p className="text-gray-600 mt-1">{personalInfo?.headline || "Professional Headline"}</p>
        <div className="flex justify-center gap-4 mt-2 text-sm text-gray-500">
          {personalInfo?.email && <span>{personalInfo.email}</span>}
          {personalInfo?.phone && <span>{personalInfo.phone}</span>}
        </div>
      </div>
      
      <div className="max-w-2xl mx-auto">
        {personalInfo?.summary && (
          <div className="mb-6">
            <p className="text-gray-700 italic">{personalInfo.summary}</p>
            <hr className="my-4 border-gray-200" />
          </div>
        )}
        
        {experience && experience.length > 0 && (
          <div className="mb-6">
            <h2 className="text-md uppercase tracking-wider text-gray-500 mb-3">Experience</h2>
            {experience.map((job, index) => (
              <div key={index} className="mb-4">
                <h3 className="font-medium text-gray-900">{job.title || "Position Title"} • {job.company || "Company Name"}</h3>
                <p className="text-gray-500 text-sm mb-1">{job.startDate} - {job.endDate}</p>
                <p className="text-gray-700">{job.description}</p>
              </div>
            ))}
          </div>
        )}
        
        {education && education.length > 0 && (
          <div className="mb-6">
            <h2 className="text-md uppercase tracking-wider text-gray-500 mb-3">Education</h2>
            {education.map((edu, index) => (
              <div key={index} className="mb-4">
                <h3 className="font-medium text-gray-900">{edu.degree || "Degree"} • {edu.institution || "Institution"}</h3>
                <p className="text-gray-500 text-sm mb-1">{edu.startDate} - {edu.endDate}</p>
                {edu.description && <p className="text-gray-700">{edu.description}</p>}
              </div>
            ))}
          </div>
        )}
        
        {skills && skills.length > 0 && (
          <div>
            <h2 className="text-md uppercase tracking-wider text-gray-500 mb-3">Skills</h2>
            <p className="text-gray-700">
              {skills.map((skill, i) => (
                <span key={i}>
                  {skill.name}{i < skills.length - 1 ? " • " : ""}
                </span>
              ))}
            </p>
          </div>
        )}
      </div>
    </div>
  );
}

export function IndustryTemplate({ resume }: { resume: Resume }) {
  const { personalInfo, experience, education, skills } = resume;
  const fullName = `${personalInfo?.firstName || ''} ${personalInfo?.lastName || ''}`.trim();
  
  return (
    <div className="p-0 bg-white">
      {/* Industry-specific header with color bar */}
      <div className="bg-slate-800 text-white p-6">
        <h1 className="text-2xl font-bold">{fullName || "Your Name"}</h1>
        <p className="text-slate-300 mt-1">{personalInfo?.headline || "Industry Professional"}</p>
        <div className="flex gap-4 mt-3 text-sm text-slate-300">
          {personalInfo?.email && <span>{personalInfo.email}</span>}
          {personalInfo?.phone && <span>{personalInfo.phone}</span>}
        </div>
      </div>
      
      <div className="p-6">
        {personalInfo?.summary && (
          <div className="mb-6">
            <h2 className="text-lg font-bold text-slate-800 mb-2">Professional Summary</h2>
            <div className="bg-slate-50 p-4 border-l-4 border-slate-400">
              <p className="text-slate-700">{personalInfo.summary}</p>
            </div>
          </div>
        )}
        
        {experience && experience.length > 0 && (
          <div className="mb-6">
            <h2 className="text-lg font-bold text-slate-800 mb-3">Industry Experience</h2>
            {experience.map((job, index) => (
              <div key={index} className="mb-4 pb-4 border-b border-slate-200">
                <div className="flex justify-between items-baseline">
                  <h3 className="font-semibold text-slate-800">{job.title || "Position Title"}</h3>
                  <span className="text-slate-500 text-sm">{job.startDate} - {job.endDate}</span>
                </div>
                <p className="text-slate-600 font-medium mb-2">{job.company || "Company Name"}</p>
                <p className="text-slate-700">{job.description}</p>
              </div>
            ))}
          </div>
        )}
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {education && education.length > 0 && (
            <div>
              <h2 className="text-lg font-bold text-slate-800 mb-3">Education</h2>
              {education.map((edu, index) => (
                <div key={index} className="mb-4">
                  <h3 className="font-semibold text-slate-800">{edu.degree || "Degree"}</h3>
                  <p className="text-slate-600">{edu.institution || "Institution"}</p>
                  <p className="text-slate-500 text-sm">{edu.startDate} - {edu.endDate}</p>
                  {edu.description && <p className="text-slate-700 mt-1">{edu.description}</p>}
                </div>
              ))}
            </div>
          )}
          
          {skills && skills.length > 0 && (
            <div>
              <h2 className="text-lg font-bold text-slate-800 mb-3">Industry Skills</h2>
              <div className="grid grid-cols-2 gap-2">
                {skills.map((skill, index) => (
                  <div key={index} className="flex items-center">
                    <span className="w-2 h-2 bg-slate-400 rounded-full mr-2"></span>
                    <span className="text-slate-700">{skill.name}</span>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

export function BoldTemplate({ resume }: { resume: Resume }) {
  const { personalInfo, experience, education, skills } = resume;
  const fullName = `${personalInfo?.firstName || ''} ${personalInfo?.lastName || ''}`.trim();
  
  return (
    <div className="p-0 bg-white">
      {/* Bold accent header */}
      <div className="bg-gradient-to-r from-pink-600 to-purple-600 text-white p-6">
        <h1 className="text-3xl font-bold">{fullName || "Your Name"}</h1>
        <p className="text-white mt-1 text-xl">{personalInfo?.headline || "Professional Headline"}</p>
        <div className="flex gap-4 mt-3 text-sm">
          {personalInfo?.email && <span>{personalInfo.email}</span>}
          {personalInfo?.phone && <span>{personalInfo.phone}</span>}
        </div>
      </div>
      
      <div className="p-6">
        {personalInfo?.summary && (
          <div className="mb-6">
            <h2 className="text-xl font-bold text-gray-900 mb-2">About Me</h2>
            <p className="text-gray-700 border-l-4 border-pink-500 pl-4 py-1">{personalInfo.summary}</p>
          </div>
        )}
        
        {experience && experience.length > 0 && (
          <div className="mb-6">
            <h2 className="text-xl font-bold text-gray-900 mb-3">Work Experience</h2>
            {experience.map((job, index) => (
              <div key={index} className="mb-5">
                <div className="flex flex-wrap justify-between items-baseline">
                  <h3 className="font-bold text-pink-600 text-lg">{job.title || "Position Title"}</h3>
                  <span className="text-gray-600 font-medium">{job.startDate} - {job.endDate}</span>
                </div>
                <p className="text-gray-800 font-bold">{job.company || "Company Name"}</p>
                <p className="text-gray-700 mt-2">{job.description}</p>
              </div>
            ))}
          </div>
        )}
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {education && education.length > 0 && (
            <div>
              <h2 className="text-xl font-bold text-gray-900 mb-3">Education</h2>
              {education.map((edu, index) => (
                <div key={index} className="mb-4">
                  <h3 className="font-bold text-gray-800">{edu.degree || "Degree"}</h3>
                  <p className="text-pink-600 font-semibold">{edu.institution || "Institution"}</p>
                  <p className="text-gray-600">{edu.startDate} - {edu.endDate}</p>
                </div>
              ))}
            </div>
          )}
          
          {skills && skills.length > 0 && (
            <div>
              <h2 className="text-xl font-bold text-gray-900 mb-3">Skills & Expertise</h2>
              <div className="flex flex-wrap gap-2">
                {skills.map((skill, index) => (
                  <span key={index} className="px-3 py-1 bg-pink-100 text-pink-700 font-medium rounded-full">
                    {skill.name}
                  </span>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

interface ResumeTemplateProps {
  resume: Resume;
  onTemplateChange: (template: string) => void;
}

export default function ResumeTemplate({ resume, onTemplateChange }: ResumeTemplateProps) {
  const renderTemplate = () => {
    switch (resume.template) {
      case 'professional':
        return <ProfessionalTemplate resume={resume} />;
      case 'creative':
        return <CreativeTemplate resume={resume} />;
      case 'executive':
        return <ExecutiveTemplate resume={resume} />;
      case 'modern':
        return <ModernTemplate resume={resume} />;
      case 'minimal':
        return <MinimalTemplate resume={resume} />;
      case 'industry':
        return <IndustryTemplate resume={resume} />;
      case 'bold':
        return <BoldTemplate resume={resume} />;
      default:
        return <ProfessionalTemplate resume={resume} />;
    }
  };

  return (
    <Card>
      <CardHeader className="border-b border-secondary-200 px-4 py-4 sm:px-6 flex justify-between items-center">
        <h2 className="text-lg font-medium text-secondary-900">{resume.title || "Untitled Resume"}</h2>
        <div className="flex space-x-2">
          <Button 
            variant="outline" 
            size="sm" 
            className="text-xs"
            onClick={async () => {
              try {
                // Create a form for PDF generation
                const formData = new FormData();
                formData.append('resumeData', JSON.stringify(resume));
                formData.append('template', resume.template || 'professional');
                
                // Generate a filename with the person's name or a default name
                const name = resume?.personalInfo?.firstName && resume?.personalInfo?.lastName ? 
                  `${resume.personalInfo.firstName}_${resume.personalInfo.lastName}` : 
                  'Resume';
                const fileName = `${name.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.pdf`;
                
                // Send the resume data to the server for PDF generation
                const response = await fetch('/api/generate-pdf', {
                  method: 'POST',
                  body: formData
                });
                
                if (!response.ok) throw new Error('Failed to generate PDF');
                
                // Get the PDF blob from the response
                const blob = await response.blob();
                
                // Create a URL for the blob
                const url = window.URL.createObjectURL(blob);
                
                // Create a virtual link element for download
                const link = document.createElement('a');
                link.href = url;
                link.download = fileName;
                link.click();
                
                // Clean up
                window.URL.revokeObjectURL(url);
              } catch (error) {
                console.error('Error downloading PDF:', error);
                // Fall back to the form submission method
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = '/api/generate-pdf';
                form.target = '_blank';
                
                const resumeInput = document.createElement('input');
                resumeInput.type = 'hidden';
                resumeInput.name = 'resumeData';
                resumeInput.value = JSON.stringify(resume);
                form.appendChild(resumeInput);
                
                const templateInput = document.createElement('input');
                templateInput.type = 'hidden';
                templateInput.name = 'template';
                templateInput.value = resume.template || 'professional';
                form.appendChild(templateInput);
                
                document.body.appendChild(form);
                form.submit();
                document.body.removeChild(form);
              }
            }}
          >
            <Download className="h-3 w-3 mr-1" /> Download PDF
          </Button>
          
          <Dialog>
            <DialogTrigger asChild>
              <Button variant="outline" size="sm" className="text-xs">
                <Download className="h-3 w-3 mr-1" /> DOCX
              </Button>
            </DialogTrigger>
            <DialogContent>
              <DialogHeader>
                <DialogTitle>Export as DOCX</DialogTitle>
              </DialogHeader>
              <div className="py-4">
                <p className="text-secondary-600">
                  This would export your resume as a DOCX file in a real implementation.
                </p>
              </div>
            </DialogContent>
          </Dialog>
          
          <Dialog>
            <DialogTrigger asChild>
              <Button variant="outline" size="sm" className="text-xs">
                Templates
              </Button>
            </DialogTrigger>
            <DialogContent className="max-w-4xl">
              <DialogHeader>
                <DialogTitle>Choose a Resume Template</DialogTitle>
              </DialogHeader>
              <div className="mt-6 grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3">
                <TemplateOption
                  name="Professional"
                  description="Clean and modern"
                  preview={<TemplatePreviewProfessional />}
                  selected={resume.template === 'professional'}
                  onClick={() => onTemplateChange('professional')}
                />
                
                <TemplateOption
                  name="Creative"
                  description="Stand out with style"
                  preview={<TemplatePreviewCreative />}
                  selected={resume.template === 'creative'}
                  onClick={() => onTemplateChange('creative')}
                />
                
                <TemplateOption
                  name="Executive"
                  description="Elegant and professional"
                  preview={<TemplatePreviewExecutive />}
                  selected={resume.template === 'executive'}
                  onClick={() => onTemplateChange('executive')}
                />
              </div>
            </DialogContent>
          </Dialog>
        </div>
      </CardHeader>
      <CardContent className="p-0">
        {renderTemplate()}
      </CardContent>
    </Card>
  );
}
```
### resume-tips.tsx
```tsx
import React, { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Sparkles, Check, Plus, RefreshCw } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";

interface ResumeTipsProps {
  resumeId?: string | number | null;
  onApplySuggestion: (suggestion: string) => void;
  suggestionType: "summary" | "bullet" | "skill";
  multiSelect?: boolean;
}

export default function ResumeTips({ resumeId, onApplySuggestion, suggestionType, multiSelect = false }: ResumeTipsProps) {
  const [suggestions, setSuggestions] = useState<string[]>([]);
  const [appliedSuggestions, setAppliedSuggestions] = useState<string[]>([]);
  const [isGenerating, setIsGenerating] = useState(false);
  // Initialize default active tab based on suggestion type
  const getDefaultTab = () => {
    if (suggestionType === "skill") return "technical";
    return "medium"; // Default for summary and bullet
  };
  
  const [activeTab, setActiveTab] = useState<string>(getDefaultTab());
  const { toast } = useToast();

  const generateSuggestions = async (length: string = "medium") => {
    // Always force the generating state to ensure the spinner shows
    setIsGenerating(true);
    setActiveTab(length);
    
    // We no longer clear suggestions immediately as it causes a UI flicker
    // Instead, we'll replace them only when we have new ones
    
    // Set a small timeout to ensure the UI updates before making the API call
    // This helps give a clearer visual indication that the refresh is happening
    setTimeout(async () => {
      // If we don't have a valid resumeId, use fallback suggestions
      if (!resumeId || resumeId === "new") {
        // For skills, we need to handle different category options
        if (suggestionType === "skill") {
          setSuggestions(getFallbackSuggestions(length as any, suggestionType));
        } else {
          setSuggestions(getFallbackSuggestions(length as "short" | "medium" | "long", suggestionType));
        }
        setIsGenerating(false);
        return;
      }

      try {
        // Add a random seed to get different results each time
        const randomSeed = Math.floor(Math.random() * 10000);
        const endpoint = `/api/resumes/${resumeId}/suggestions?type=${suggestionType}&length=${length}&seed=${randomSeed}`;
        const res = await apiRequest("GET", endpoint);
        const data = await res.json();
        
        if (data.success && data.suggestions && Array.isArray(data.suggestions)) {
          setSuggestions(data.suggestions.slice(0, 3));
        } else {
          // Fallback if API doesn't return expected format
          if (suggestionType === "skill") {
            setSuggestions(getFallbackSuggestions(length as any, suggestionType));
          } else {
            setSuggestions(getFallbackSuggestions(length as "short" | "medium" | "long", suggestionType));
          }
        }
      } catch (error) {
        console.error(`Error generating ${suggestionType} suggestions:`, error);
        // Choose the right fallback based on suggestion type
        if (suggestionType === "skill") {
          setSuggestions(getFallbackSuggestions(length as any, suggestionType));
        } else {
          setSuggestions(getFallbackSuggestions(length as "short" | "medium" | "long", suggestionType));
        }
        toast({
          title: "Couldn't generate suggestions",
          description: "Using sample suggestions instead. Try again later.",
          variant: "destructive",
        });
      } finally {
        setIsGenerating(false);
      }
    }, 500); // Longer delay for better UX and to make the refresh more noticeable
  };

  const getFallbackSuggestions = (length: "short" | "medium" | "long", type: string) => {
    // Create a larger pool of suggestions and randomly select 3 of them
    // This helps ensure we get different suggestions each time
    let suggestionsPool: string[] = [];
    
    if (type === "summary") {
      // Short summaries
      if (length === "short") {
        suggestionsPool = [
          "Skilled professional with a proven track record in delivering high-impact solutions.",
          "Results-oriented professional with expertise in strategic planning and execution.",
          "Dynamic professional with strong technical and communication skills.",
          "Dedicated professional focused on continuous improvement and excellence.",
          "Analytical problem-solver with expertise in optimizing business processes.",
          "Innovative thinker committed to driving organizational success.",
          "Adaptable professional with a diverse skill set and practical experience.",
          "Achievement-focused individual with a history of exceeding targets."
        ];
      }
      // Long summaries
      else if (length === "long") {
        suggestionsPool = [
          "Accomplished professional with extensive experience driving innovation and operational excellence. Demonstrates exceptional ability to identify opportunities for improvement and implement strategic solutions that enhance business performance. Combines technical expertise with strong leadership capabilities to guide teams through complex projects and initiatives.",
          "Results-driven professional with a comprehensive background in developing and implementing strategic initiatives. Skilled at translating business requirements into effective solutions while maintaining a focus on quality and efficiency. Recognized for ability to collaborate across departments and deliver measurable improvements to organizational processes.",
          "Versatile professional with a proven track record of success across multiple domains. Leverages deep technical knowledge and business acumen to drive transformative change and achieve ambitious goals. Excels at building relationships with stakeholders at all levels and communicating complex concepts in accessible terms.",
          "Forward-thinking professional with a strategic mindset and demonstrated success in delivering impactful results. Combines analytical thinking with creative problem-solving to address complex challenges. Known for ability to lead cross-functional initiatives and align diverse stakeholders toward common objectives.",
          "Dedicated professional with extensive expertise in optimizing operations and driving sustainable growth. Utilizes data-driven insights to identify improvement opportunities and implement effective solutions. Proven ability to navigate dynamic environments while maintaining a focus on long-term strategic objectives.",
          "Accomplished leader with a track record of transforming organizational capabilities and enhancing performance metrics. Adept at identifying growth opportunities and implementing scalable solutions. Combines business acumen with technological expertise to deliver measurable improvements across multiple dimensions."
        ];
      }
      // Medium summaries (default)
      else {
        suggestionsPool = [
          "Accomplished professional with a proven track record of delivering innovative solutions. Adept at leveraging expertise to drive business outcomes and optimize processes.",
          "Results-driven professional combining technical knowledge with strong communication skills. Committed to continuous improvement and delivering high-quality work that exceeds expectations.",
          "Versatile and dedicated professional with strong problem-solving abilities. Effectively balances technical excellence with business requirements to create impactful solutions.",
          "Strategic thinker with expertise in identifying opportunities and implementing effective solutions. Demonstrates ability to collaborate across teams to achieve organizational objectives.",
          "Detail-oriented professional with a talent for analyzing complex situations and developing practical approaches. Consistently delivers results that drive business growth and operational excellence.",
          "Dynamic professional with a balanced approach to technical expertise and business acumen. Skilled at translating strategic vision into actionable plans with measurable outcomes."
        ];
      }
    } else if (type === "bullet") {
      // Experience bullet points
      if (length === "short") {
        suggestionsPool = [
          "Implemented process improvements that reduced costs by 15%.",
          "Led cross-functional team of 8 to deliver project ahead of schedule.",
          "Increased customer satisfaction ratings by 22% through service enhancements.",
          "Streamlined workflow resulting in 30% productivity increase.",
          "Developed training materials that improved team efficiency by 25%.",
          "Managed budget of $1.5M with consistent under-budget delivery.",
          "Launched successful marketing campaign that increased sales by 18%.",
          "Resolved critical system issues, reducing downtime by 40%."
        ];
      } else if (length === "long") {
        suggestionsPool = [
          "Spearheaded comprehensive process reengineering initiative that identified and eliminated redundancies, resulting in 15% reduction in operational costs and 30% increase in team productivity over a 6-month period.",
          "Led diverse cross-functional team of 8 professionals to deliver mission-critical project 2 weeks ahead of schedule, earning recognition from senior leadership and establishing new benchmark for project execution excellence.",
          "Conceptualized and implemented customer service enhancement program that increased satisfaction ratings by 22%, reduced complaint volume by 35%, and improved retention rates among high-value clients by 18% within first quarter of implementation.",
          "Pioneered data-driven decision-making approach across three departments, developing customized dashboards and KPI tracking mechanisms that enabled executive leadership to identify $2.3M in cost-saving opportunities within first year of implementation.",
          "Orchestrated complex system migration involving 15,000+ user accounts and 8TB of data with zero unplanned downtime, completing the transition 5 days ahead of schedule and $75,000 under budget while maintaining 99.9% data integrity.",
          "Redesigned customer onboarding process through comprehensive user experience research, resulting in 45% reduction in abandonment rates, 28% faster completion times, and 52% decrease in support tickets related to registration issues."
        ];
      } else {
        suggestionsPool = [
          "Implemented comprehensive process improvements that reduced operational costs by 15% while increasing team productivity by 30%.",
          "Led cross-functional team of 8 professionals to deliver project 2 weeks ahead of schedule, exceeding client expectations.",
          "Developed and implemented customer service enhancements that increased satisfaction ratings by 22% and improved retention rates.",
          "Managed $1.2M budget for departmental operations, consistently delivering under budget while meeting all performance objectives.",
          "Created and delivered training program that improved team efficiency by 25% and reduced onboarding time by two weeks.",
          "Redesigned workflow processes resulting in 35% increase in output quality and 28% reduction in production time."
        ];
      }
    } else if (type === "skill") {
      // Skill suggestions - we use a different set of categories for skills
      const skillLength = length as any; // Cast to any to avoid TypeScript errors
      
      if (skillLength === "technical" || skillLength === "short") {
        suggestionsPool = [
          "Data Analysis",
          "Project Management",
          "Cloud Computing",
          "SQL",
          "Python",
          "JavaScript",
          "Business Intelligence",
          "Microsoft Azure",
          "AWS",
          "System Architecture",
          "UX/UI Design",
          "CI/CD Pipeline Management"
        ];
      } else if (skillLength === "soft" || skillLength === "medium") {
        suggestionsPool = [
          "Strategic Communication",
          "Team Leadership",
          "Problem-solving",
          "Critical Thinking",
          "Negotiation",
          "Conflict Resolution",
          "Time Management",
          "Decision Making",
          "Emotional Intelligence",
          "Adaptability",
          "Active Listening",
          "Stakeholder Management"
        ];
      } else {
        suggestionsPool = [
          "Microsoft Office Suite",
          "Customer Relationship Management",
          "Process Optimization",
          "Budget Management",
          "Marketing Strategy",
          "Content Creation",
          "Social Media Management",
          "Supply Chain Management",
          "Healthcare Administration",
          "Financial Analysis",
          "Regulatory Compliance",
          "Risk Assessment"
        ];
      }
    } else {
      // Default fallback
      suggestionsPool = [
        "Sample suggestion 1",
        "Sample suggestion 2",
        "Sample suggestion 3",
        "Sample suggestion 4",
        "Sample suggestion 5"
      ];
    }
    
    // Randomly select 3 items from the suggestions pool
    // This ensures we get different suggestions each time
    const shuffled = [...suggestionsPool].sort(() => 0.5 - Math.random());
    return shuffled.slice(0, 3);
  };

  // Generate initial suggestions or when component props change
  React.useEffect(() => {
    // Reset state when resumeId or suggestionType changes
    if (!isGenerating) {
      generateSuggestions(activeTab);
    }
  }, [resumeId, suggestionType]);

  const getTipTitle = () => {
    switch (suggestionType) {
      case "summary":
        return "Professional Summary Suggestions";
      case "bullet":
        return "Experience Bullet Points";
      case "skill":
        return "Skill Suggestions";
      default:
        return "AI Suggestions";
    }
  };

  const getTipDescription = () => {
    switch (suggestionType) {
      case "summary":
        return "Choose a professional summary that highlights your strengths";
      case "bullet":
        return "Powerful bullet points to showcase your achievements";
      case "skill":
        return "Relevant skills for your professional profile";
      default:
        return "AI-generated content for your resume";
    }
  };

  const getLengthOptions = () => {
    if (suggestionType === "skill") {
      return (
        <TabsList className="cosmic-tabs-list grid w-full grid-cols-3 h-7">
          <TabsTrigger className="cosmic-tabs-trigger px-2 py-0 text-xs" value="technical" onClick={() => {
            setActiveTab("technical");
            generateSuggestions("technical");
          }}>Technical</TabsTrigger>
          <TabsTrigger className="cosmic-tabs-trigger px-2 py-0 text-xs" value="soft" onClick={() => {
            setActiveTab("soft");
            generateSuggestions("soft");
          }}>Soft</TabsTrigger>
          <TabsTrigger className="cosmic-tabs-trigger px-2 py-0 text-xs" value="industry" onClick={() => {
            setActiveTab("industry");
            generateSuggestions("industry");
          }}>Industry</TabsTrigger>
        </TabsList>
      );
    }
    
    return (
      <TabsList className="cosmic-tabs-list grid w-full grid-cols-3 h-7">
        <TabsTrigger className="cosmic-tabs-trigger px-2 py-0 text-xs" value="short" onClick={() => {
          setActiveTab("short");
          generateSuggestions("short");
        }}>Short</TabsTrigger>
        <TabsTrigger className="cosmic-tabs-trigger px-2 py-0 text-xs" value="medium" onClick={() => {
          setActiveTab("medium");
          generateSuggestions("medium");
        }}>Medium</TabsTrigger>
        <TabsTrigger className="cosmic-tabs-trigger px-2 py-0 text-xs" value="long" onClick={() => {
          setActiveTab("long");
          generateSuggestions("long");
        }}>Long</TabsTrigger>
      </TabsList>
    );
  };

  return (
    <Card className="cosmic-card cosmic-card-gradient border border-blue-500/30 shadow-lg max-w-full w-full">
      <CardHeader style={{ padding: "var(--space-3)" }}>
        <div className="flex items-center gap-2">
          <Sparkles className="h-4 w-4 text-blue-400" />
          <CardTitle className="text-sm text-blue-100">{getTipTitle()}</CardTitle>
        </div>
        <CardDescription className="text-xs text-blue-200/70">{getTipDescription()}</CardDescription>
      </CardHeader>
      
      <CardContent style={{ 
        padding: "var(--space-3)",
        paddingTop: "var(--space-1)"
      }}>
        <Tabs defaultValue={activeTab} value={activeTab} className="cosmic-tabs">
          {getLengthOptions()}
          
          <div style={{ 
            marginTop: "var(--space-2)", 
            gap: "var(--space-2)",
            display: "flex",
            flexDirection: "column"
          }}>
            {isGenerating ? (
              <div className="flex justify-center py-4">
                <div className="animate-spin h-6 w-6 border-2 border-blue-500 rounded-full border-t-transparent"></div>
              </div>
            ) : (
              <>
                {multiSelect && appliedSuggestions.length > 0 && (
                  <div className="mb-2">
                    <h4 className="cosmic-section-title text-xs font-medium text-blue-300 mb-1">Applied Suggestions</h4>
                    <div className="space-y-1.5">
                      {appliedSuggestions.map((applied, idx) => (
                        <div key={`applied-${idx}`} className="cosmic-item-container flex items-start p-1.5 rounded-md bg-blue-800/20 border border-blue-500/30">
                          <div className="flex-grow">
                            <p className="text-xs text-blue-100 leading-relaxed">{typeof applied === 'object' ? JSON.stringify(applied) : applied}</p>
                          </div>
                          <Button
                            variant="ghost"
                            size="sm"
                            className="cosmic-button-ghost h-5 w-5 p-0 ml-1 text-blue-300 hover:text-blue-100 hover:bg-blue-800/50"
                            onClick={() => {
                              setAppliedSuggestions(appliedSuggestions.filter((_, i) => i !== idx));
                            }}
                          >
                            <Check className="h-3 w-3" />
                          </Button>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
                
                <h4 className="cosmic-section-title text-xs font-medium text-blue-300 mb-1">Available Suggestions</h4>
                {suggestions.map((suggestion, index) => {
                  // For object suggestions, we need to stringify to check if they're already applied
                  const isApplied = typeof suggestion === 'object' 
                    ? appliedSuggestions.some(s => JSON.stringify(s) === JSON.stringify(suggestion))
                    : appliedSuggestions.includes(suggestion);
                  return (
                    <div 
                      key={index} 
                      className={`cosmic-item-container p-2 rounded-md bg-white/10 border transition-all cursor-pointer ${
                        isApplied 
                          ? "border-blue-500/40 bg-blue-800/20" 
                          : "border-blue-500/20 hover:border-blue-500/40"
                      }`}
                      onClick={() => {
                        if (multiSelect) {
                          if (!isApplied) {
                            const newApplied = [...appliedSuggestions, suggestion];
                            setAppliedSuggestions(newApplied);
                            onApplySuggestion(suggestion);
                          }
                        } else {
                          onApplySuggestion(suggestion);
                        }
                      }}
                    >
                      <p className="text-xs text-white leading-relaxed">{typeof suggestion === 'object' ? JSON.stringify(suggestion) : suggestion}</p>
                      <div className="flex justify-end mt-1">
                        <Button 
                          variant="ghost" 
                          size="sm" 
                          className="cosmic-button-ghost h-6 px-2 text-xs text-blue-300 hover:text-blue-100 hover:bg-blue-800/50"
                          onClick={(e) => {
                            e.stopPropagation();
                            if (multiSelect) {
                              if (!isApplied) {
                                const newApplied = [...appliedSuggestions, suggestion];
                                setAppliedSuggestions(newApplied);
                                onApplySuggestion(suggestion);
                              }
                            } else {
                              onApplySuggestion(suggestion);
                            }
                          }}
                        >
                          {multiSelect ? (
                            isApplied ? <Check className="h-4 w-4 mr-1" /> : <Plus className="h-4 w-4 mr-1" />
                          ) : null}
                          {multiSelect ? (isApplied ? "Added" : "Add") : "Apply"}
                        </Button>
                      </div>
                    </div>
                  );
                })}
              </>
            )}
          </div>
        </Tabs>
      </CardContent>
      
      <CardFooter style={{ 
        padding: "var(--space-3)",
        paddingTop: "var(--space-2)"
      }}>
        <Button 
          variant="outline" 
          style={{ height: "var(--space-8)" }}
          className="cosmic-button w-full text-xs text-blue-300 border-blue-500/30 hover:bg-blue-800/50 hover:text-blue-100"
          onClick={() => generateSuggestions(activeTab)}
          disabled={isGenerating}
        >
          {isGenerating ? (
            "Generating..."
          ) : (
            <>
              <RefreshCw className="w-3 h-3 mr-1" />
              Refresh Suggestions
            </>
          )}
        </Button>
      </CardFooter>
    </Card>
  );
}```
## 3. Resume Hooks
### use-resume-data.tsx
```tsx
import { useState, useEffect } from 'react';
import { useQuery, useMutation } from '@tanstack/react-query';
import { apiRequest, queryClient } from '@/lib/queryClient';
import { useToast } from '@/hooks/use-toast';
import { useLocation } from 'wouter';

// Resume and related types
export interface PersonalInfo {
  firstName: string;
  lastName: string;
  email: string;
  phone: string;
  headline: string;
  summary: string;
}

export interface ExperienceItem {
  id: string;
  title: string;
  company: string;
  startDate: string;
  endDate: string;
  description: string;
}

export interface EducationItem {
  id: string;
  degree: string;
  institution: string;
  startDate: string;
  endDate: string;
  description: string;
}

export interface SkillItem {
  id: string;
  name: string;
  proficiency: number;
  category?: string; // Added optional category property
}

export interface ProjectItem {
  id: string;
  title: string;
  description: string;
  technologies: string[];
  link?: string;
}

export interface Resume {
  id?: string;
  title: string;
  personalInfo: PersonalInfo;
  experience: ExperienceItem[];
  education: EducationItem[];
  skills: SkillItem[];
  projects: ProjectItem[];
  template: string;
}

// Initial blank resume state
const initialResume: Resume = {
  title: 'Untitled Resume',
  personalInfo: {
    firstName: '',
    lastName: '',
    email: '',
    phone: '',
    headline: '',
    summary: ''
  },
  experience: [],
  education: [],
  skills: [],
  projects: [],
  template: 'professional'
};

/**
 * Custom hook to manage resume data loading, saving, and updating
 */
export function useResumeData() {
  const { toast } = useToast();
  const [location] = useLocation();
  
  // Parse search parameters manually since wouter doesn't have useSearchParams
  const getSearchParams = () => {
    const url = new URL(window.location.href);
    return {
      get: (param: string) => url.searchParams.get(param)
    };
  };
  const searchParams = getSearchParams();

  // State for the resume data
  const [resume, setResume] = useState<Resume>(initialResume);
  const [resumeId, setResumeId] = useState<string | null>(null);
  const [activeSection, setActiveSection] = useState<string>('profile');
  const [isLoading, setIsLoading] = useState(false);
  const [isDirty, setIsDirty] = useState(false);
  
  // Extract resumeId from URL parameters
  useEffect(() => {
    const idFromUrl = searchParams.get('id');
    if (idFromUrl) {
      try {
        setResumeId(idFromUrl);
        
        // Try to load from localStorage first (for recovering from sessions)
        const savedResumeData = localStorage.getItem('editingResume');
        if (savedResumeData) {
          try {
            const savedResume = JSON.parse(savedResumeData);
            if (savedResume.id === idFromUrl) {
              setResume(savedResume as Resume);
              setActiveSection('profile');
              toast({
                title: 'Resume Loaded Successfully',
                description: `"${savedResume.title}" has been loaded for editing`,
              });
              localStorage.removeItem('editingResume');
            }
          } catch (parseError) {
            console.error('Error parsing stored resume data:', parseError);
          }
        }
      } catch (e) {
        console.error('Error parsing resume ID from URL', e);
      }
    }

    // Check for template in URL parameters
    const templateParam = searchParams.get('template');
    if (templateParam) {
      setResume(prev => ({
        ...prev,
        template: templateParam
      }));
    }
  }, [location, toast]);

  // Fetch resume data if resumeId exists
  const { data: fetchedResume, error: fetchError } = useQuery({
    queryKey: ['/api/resumes', resumeId],
    enabled: !!resumeId,
  });

  // Process fetched resume data
  useEffect(() => {
    if (fetchedResume) {
      try {
        // The API returns resume data with a nested 'content' object
        const content = fetchedResume.content || {};
        
        // Ensure we have complete data structure for all fields
        const completeResume = {
          id: fetchedResume.id,
          title: fetchedResume.title || 'Untitled Resume',
          personalInfo: {
            firstName: content.personalInfo?.firstName || '',
            lastName: content.personalInfo?.lastName || '',
            email: content.personalInfo?.email || '',
            phone: content.personalInfo?.phone || '',
            headline: content.personalInfo?.headline || '',
            summary: content.personalInfo?.summary || ''
          },
          experience: Array.isArray(content.experience) ? content.experience.map((exp: any) => ({
            ...exp,
            id: exp.id || crypto.randomUUID(), // Ensure each experience has an ID
          })) : [],
          education: Array.isArray(content.education) ? content.education.map((edu: any) => ({
            ...edu,
            id: edu.id || crypto.randomUUID(), // Ensure each education has an ID
          })) : [],
          skills: Array.isArray(content.skills) ? content.skills.map((skill: any) => ({
            ...skill,
            id: skill.id || crypto.randomUUID(), // Ensure each skill has an ID
          })) : [],
          projects: Array.isArray(content.projects) ? content.projects.map((project: any) => ({
            ...project,
            id: project.id || crypto.randomUUID(), // Ensure each project has an ID
          })) : [],
          template: fetchedResume.template || 'professional'
        };
        
        // Force a complete state update by creating a brand new object
        setResume(completeResume as Resume);
        
        toast({
          title: 'Resume Loaded',
          description: `"${completeResume.title}" has been loaded for editing`,
        });
      } catch (error) {
        console.error('Error processing resume data:', error);
        toast({
          title: 'Error Loading Resume',
          description: 'There was a problem loading your resume data.',
          variant: 'destructive',
        });
      }
    }
  }, [fetchedResume, toast]);

  // Handle errors from the query
  useEffect(() => {
    if (fetchError) {
      toast({
        title: 'Error Loading Resume',
        description: 'Failed to load the resume. Please try again.',
        variant: 'destructive',
      });
    }
  }, [fetchError, toast]);

  // Save Resume Mutation
  const saveMutation = useMutation({
    mutationFn: async (resumeData: Resume) => {
      setIsLoading(true);
      try {
        // Determine if we're creating a new resume or updating an existing one
        const method = resumeData.id ? 'PATCH' : 'POST';
        const endpoint = resumeData.id 
          ? `/api/resumes/${resumeData.id}` 
          : '/api/resumes';
        
        // Convert the resume state to the API expected format
        const apiResumeData = {
          title: resumeData.title,
          content: {
            personalInfo: resumeData.personalInfo,
            experience: resumeData.experience,
            education: resumeData.education,
            skills: resumeData.skills,
            projects: resumeData.projects
          },
          template: resumeData.template
        };
        
        const result = await apiRequest(endpoint, {
          method,
          body: JSON.stringify(apiResumeData),
        });
        
        setIsDirty(false);
        return result;
      } catch (error) {
        console.error('Error saving resume:', error);
        throw error;
      } finally {
        setIsLoading(false);
      }
    },
    onSuccess: (data) => {
      // Update the resume with the response data (in case of new resume creation)
      if (data && data.id) {
        setResumeId(data.id);
        setResume(prev => ({ ...prev, id: data.id }));
        
        // Update the URL without page reload
        const url = new URL(window.location.href);
        url.searchParams.set('id', data.id);
        window.history.pushState({}, '', url.toString());
      }
      
      toast({
        title: 'Resume Saved',
        description: 'Your resume has been saved successfully.',
      });
      
      // Invalidate the resumes query to refresh list views
      queryClient.invalidateQueries({ queryKey: ['/api/resumes'] });
    },
    onError: (error) => {
      console.error('Mutation error:', error);
      toast({
        title: 'Error Saving Resume',
        description: 'Failed to save your resume. Please try again.',
        variant: 'destructive',
      });
    }
  });

  // Update functions for resume sections
  const updatePersonalInfo = (field: keyof PersonalInfo, value: string) => {
    setResume(prev => ({
      ...prev,
      personalInfo: {
        ...prev.personalInfo,
        [field]: value
      }
    }));
    setIsDirty(true);
  };

  const updateExperienceList = (experiences: ExperienceItem[]) => {
    setResume(prev => ({
      ...prev,
      experience: experiences
    }));
    setIsDirty(true);
  };

  const updateEducationList = (education: EducationItem[]) => {
    setResume(prev => ({
      ...prev,
      education: education
    }));
    setIsDirty(true);
  };

  const updateSkillsList = (skills: SkillItem[]) => {
    setResume(prev => ({
      ...prev,
      skills: skills
    }));
    setIsDirty(true);
  };

  const updateProjectsList = (projects: ProjectItem[]) => {
    setResume(prev => ({
      ...prev,
      projects: projects
    }));
    setIsDirty(true);
  };

  const updateResumeTemplate = (template: string) => {
    setResume(prev => ({
      ...prev,
      template: template
    }));
    setIsDirty(true);
  };

  const updateResumeTitle = (title: string) => {
    setResume(prev => ({
      ...prev,
      title: title
    }));
    setIsDirty(true);
  };

  // Helper functions for adding new items
  const addExperience = () => {
    const newExperience: ExperienceItem = {
      id: crypto.randomUUID(),
      title: '',
      company: '',
      startDate: '',
      endDate: '',
      description: ''
    };
    updateExperienceList([...resume.experience, newExperience]);
    return newExperience.id;
  };

  const addEducation = () => {
    const newEducation: EducationItem = {
      id: crypto.randomUUID(),
      degree: '',
      institution: '',
      startDate: '',
      endDate: '',
      description: ''
    };
    updateEducationList([...resume.education, newEducation]);
    return newEducation.id;
  };

  const addSkill = (category?: string) => {
    const newSkill: SkillItem = {
      id: crypto.randomUUID(),
      name: '',
      proficiency: 3,
      category: category
    };
    updateSkillsList([...resume.skills, newSkill]);
    return newSkill.id;
  };

  const addProject = () => {
    const newProject: ProjectItem = {
      id: crypto.randomUUID(),
      title: '',
      description: '',
      technologies: []
    };
    updateProjectsList([...resume.projects, newProject]);
    return newProject.id;
  };

  // Save the resume
  const saveResume = () => {
    saveMutation.mutate(resume);
  };

  return {
    resume,
    setResume,
    resumeId,
    activeSection,
    setActiveSection,
    isLoading: isLoading || saveMutation.isPending,
    isDirty,
    updatePersonalInfo,
    updateExperienceList,
    updateEducationList,
    updateSkillsList,
    updateProjectsList,
    updateResumeTemplate,
    updateResumeTitle,
    addExperience,
    addEducation,
    addSkill,
    addProject,
    saveResume
  };
}```
