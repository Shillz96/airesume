}
Here's an enhanced version of your cosmic background component with improved visuals, performance optimizations, and additional features:
jsx
import { useEffect, useState, useCallback, useRef } from 'react';

export default function CosmicBackground() {
  const [isClient, setIsClient] = useState(false);
  const starfieldRef = useRef(null);
  const animationFrameRef = useRef(null);

  // Memoized shooting star creation function
  const createShootingStar = useCallback(() => {
    const starfield = starfieldRef.current;
    if (!starfield) return;

    const star = document.createElement('div');
    star.className = 'shooting-star';

    const startX = Math.random() * 100;
    const startY = Math.random() * 100;
    const angle = Math.random() * 60 - 30; // Wider angle range
    const duration = Math.random() * 0.5 + 0.5; // 0.5s to 1s

    star.style.top = `${startY}%`;
    star.style.left = `${startX}%`;
    star.style.transform = `rotate(${angle}deg)`;
    star.style.animationDuration = `${duration}s`;
    star.style.background = 'linear-gradient(to right, rgba(255,255,255,0), rgba(255,255,255,0.8), rgba(255,255,255,0))';

    starfield.appendChild(star);

    // Cleanup
    star.addEventListener('animationend', () => {
      if (star.parentNode) {
        star.parentNode.removeChild(star);
      }
    });
  }, []);

  useEffect(() => {
    setIsClient(true);

    const spawnStars = () => {
      createShootingStar();
      const nextSpawn = Math.random() * 2000 + 2000; // 2-4 seconds
      animationFrameRef.current = setTimeout(spawnStars, nextSpawn);
    };

    spawnStars();

    return () => {
      if (animationFrameRef.current) {
        clearTimeout(animationFrameRef.current);
      }
    };
  }, [createShootingStar]);

  if (!isClient) return null;

  return (
    <div className="cosmic-container relative w-full h-full overflow-hidden">
      {/* Starfield Background */}
      <div 
        ref={starfieldRef}
        className="starfield absolute inset-0 pointer-events-none bg-gradient-to-b from-gray-900 via-black to-gray-900"
      >
        {[...Array(150)].map((_, i) => {
          const size = Math.random() * 2 + 1;
          return (
            <div
              key={i}
              className="star absolute bg-white rounded-full"
              style={{
                width: `${size}px`,
                height: `${size}px`,
                top: `${Math.random() * 100}%`,
                left: `${Math.random() * 100}%`,
                opacity: Math.random() * 0.7 + 0.3,
                animation: `twinkle ${Math.random() * 4 + 2}s infinite ${Math.random()}s`,
                boxShadow: '0 0 4px rgba(255,255,255,0.3)',
              }}
            />
          );
        })}
      </div>

      {/* Enhanced Nebula Layers */}
      <div className="nebula-container absolute inset-0 pointer-events-none">
        <div 
          className="cosmic-nebula-1 absolute top-[10%] left-[15%] w-[35%] h-[35%] rounded-full filter blur-3xl opacity-25"
          style={{
            background: 'radial-gradient(circle, rgba(147,197,253,0.15) 0%, rgba(59,130,246,0) 70%)',
            animation: 'pulse-slow 8s infinite ease-in-out',
          }}
        />
        <div 
          className="cosmic-nebula-2 absolute bottom-[15%] right-[10%] w-[25%] h-[45%] rounded-full filter blur-3xl opacity-20"
          style={{
            background: 'radial-gradient(circle, rgba(192,132,252,0.15) 0%, rgba(107,33,168,0) 70%)',
            animation: 'pulse-slow2 10s infinite ease-in-out',
          }}
        />
        <div 
          className="cosmic-nebula-3 absolute top-[25%] right-[25%] w-[30%] h-[30%] rounded-full filter blur-3xl opacity-15"
          style={{
            background: 'radial-gradient(circle, rgba(103,232,249,0.15) 0%, rgba(6,182,212,0) 70%)',
            animation: 'pulse-slow3 12s infinite ease-in-out',
          }}
        />
      </div>
    </div>
  );
}

// Add these styles to your CSS file
const styles = `
  @keyframes twinkle {
    0%, 100% { opacity: 0.3; }
    50% { opacity: 1; }
  }

  @keyframes shooting-star {
    0% { transform: translate(0, 0) rotate(var(--angle)); opacity: 1; }
    100% { transform: translate(-500px, 500px) rotate(var(--angle)); opacity: 0; }
  }

  @keyframes pulse-slow {
    0%, 100% { transform: scale(1); opacity: 0.25; }
    50% { transform: scale(1.05); opacity: 0.35; }
  }

  @keyframes pulse-slow2 {
    0%, 100% { transform: scale(1); opacity: 0.2; }
    50% { transform: scale(1.1); opacity: 0.3; }
  }

  @keyframes pulse-slow3 {
    0%, 100% { transform: scale(1); opacity: 0.15; }
    50% { transform: scale(1.08); opacity: 0.25; }
  }

  .shooting-star {
    position: absolute;
    width: 100px;
    height: 2px;
    animation: shooting-star 1s linear;
    will-change: transform, opacity;
  }
`;

Key enhancements made:
Performance Optimization:
Added useRef for direct DOM access

Used useCallback for memoized star creation

Replaced setInterval with recursive setTimeout for better control

Added cleanup for animations
Visual Improvements:
Added gradient background to starfield

Enhanced nebulae with radial gradients and subtle scaling animations

Improved shooting stars with gradient trails and better animation

Added box-shadow to stars for subtle glow

Increased star count to 150

Better randomization of star sizes and animation timing
Code Structure:
Separated nebula layer from starfield

Added container div for better organization

Improved CSS variable usage for animations

Included necessary CSS animations in the code
Features:
Shooting stars now have variable duration

Wider angle range for shooting stars

Self-cleaning shooting stars using animationend event

More realistic nebula movement with scale animations
