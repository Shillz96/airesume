Steps to Implement the AI-Tailor Resume Feature
Extract Job Description Data:
When the user clicks the "AI-Tailor Resume" button, extract the job description, required skills, and other relevant details (e.g., job title, company, location) from the job listing.
Retrieve Userâ€™s Stored Resume Data:
Fetch the userâ€™s stored resume data (e.g., personal info, experience, skills, education) from the backend or local state.
Analyze and Tailor the Resume:
Use a simple keyword-matching algorithm (or an AI model in a production environment) to identify key skills, experiences, and qualifications from the job description.

Reorder or rephrase the userâ€™s resume data to emphasize relevant skills and experiences that match the job description.

Generate a tailored summary that incorporates keywords from the job description.
Display the Tailored Resume:
Show the tailored resume in a modal or dialog, allowing the user to review and edit it.

Provide an option to auto-fill the tailored data into the ResumeBuilder page fields (e.g., Professional Summary, Experience descriptions).
Apply with the Tailored Resume:
Allow the user to apply to the job directly with the tailored resume.
Integrate with the Cosmic Navigator Theme:
Style the modal and buttons to match the Cosmic Navigator theme (gradient background, starfield, neon accents, glassmorphism, GSAP animations).
Updated Code
Weâ€™ll create a new component for the job listing page (JobListing) and integrate the "AI-Tailor Resume" feature. Weâ€™ll also update the AIAssistant component to handle the tailoring process and auto-fill the tailored data into the ResumeBuilder fields.
New JobListing Component
This component represents the job listing shown in the screenshot. It includes the "AI-Tailor Resume" button, which triggers the tailoring process.
jsx
import React, { useState } from "react";
import { Button } from "@/components/ui/button";
import { Heart, Share2, Check, Sparkles } from "lucide-react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { useToast } from "@/hooks/use-toast";
import { useMutation } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";

// Mock job data (replace with API call in production)
const job = {
  id: "1",
  title: "Senior Frontend Developer",
  company: "TechGlobal Inc.",
  location: "San Francisco, CA (Remote)",
  description: "Looking for a senior frontend developer with expertise in React, TypeScript, and modern frontend architectures. You'll work on building scalable web applications used by millions of users.",
  skills: ["React", "TypeScript", "Redux", "CSS-in-JS"],
  posted: "2023-05-18T00:50:08.024Z",
  type: "Full-time",
  salary: "$108k-$144k",
  matchScore: 0,
  successRate: 20,
};

// Mock user resume data (replace with actual user data from backend)
const userResume = {
  personalInfo: {
    firstName: "John",
    lastName: "Doe",
    email: "john.doe@example.com",
    phone: "(555) 123-4567",
    headline: "Frontend Developer | React & TypeScript Specialist",
    summary: "Experienced frontend developer with a focus on building responsive and scalable web applications. Proficient in JavaScript, React, and CSS.",
  },
  experience: [
    {
      id: "exp-1",
      title: "Frontend Developer",
      company: "WebTech Solutions",
      startDate: "2020-01",
      endDate: "Present",
      description: "Developed and maintained web applications using React and JavaScript, improving user engagement by 25%.",
    },
  ],
  skills: ["JavaScript", "React", "CSS", "HTML"],
};

export default function JobListing() {
  const { toast } = useToast();
  const [tailoredResume, setTailoredResume] = useState(null);
  const [isApplying, setIsApplying] = useState(false);

  // Mutation to tailor the resume
  const { mutate: tailorResume, isPending: isTailoring } = useMutation({
    mutationFn: async () => {
      // In a real application, this would be an API call to an AI service
      // For now, we'll simulate the tailoring process
      const jobKeywords = [...job.skills, ...job.description.toLowerCase().match(/\b\w+\b/g).filter(word => word.length > 3)];
      const tailoredSummary = `Experienced ${job.title.toLowerCase()} with expertise in ${job.skills.join(", ")}. Skilled in building scalable web applications, as demonstrated by a ${userResume.experience[0].description.toLowerCase()}. Ready to contribute to ${job.company} by leveraging modern frontend architectures and delivering high-quality user experiences.`;
      
      const tailoredExperience = userResume.experience.map(exp => ({
        ...exp,
        description: `Enhanced ${exp.description.toLowerCase()} by incorporating ${job.skills[0]} and ${job.skills[1]} to align with modern frontend requirements.`,
      }));

      const tailoredSkills = [...new Set([...userResume.skills, ...job.skills])]; // Merge user skills with job skills

      return {
        personalInfo: {
          ...userResume.personalInfo,
          summary: tailoredSummary,
        },
        experience: tailoredExperience,
        skills: tailoredSkills,
      };
    },
    onSuccess: (data) => {
      setTailoredResume(data);
      toast({
        title: "Resume Tailored",
        description: "Your resume has been tailored for this position.",
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Error tailoring resume",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  // Mutation to apply to the job
  const { mutate: applyToJob } = useMutation({
    mutationFn: async () => {
      // Simulate applying to the job with the tailored resume
      const res = await apiRequest("POST", `/api/jobs/${job.id}/apply`, { resume: tailoredResume });
      return await res.json();
    },
    onSuccess: () => {
      toast({
        title: "Application Submitted",
        description: `Successfully applied to ${job.title} at ${job.company}.`,
      });
      setIsApplying(false);
    },
    onError: (error: Error) => {
      toast({
        title: "Error applying to job",
        description: error.message,
        variant: "destructive",
      });
      setIsApplying(false);
    },
  });

  const handleTailorResume = () => {
    tailorResume();
  };

  const handleApply = () => {
    if (!tailoredResume) {
      toast({
        title: "Tailor Resume First",
        description: "Please tailor your resume before applying.",
        variant: "destructive",
      });
      return;
    }
    setIsApplying(true);
    applyToJob();
  };

  return (
    <div className="bg-gradient-to-br from-[hsl(219,90%,10%)] to-[hsl(260,90%,10%)] text-white p-4 rounded-lg shadow-lg relative">
      {/* Starfield Background */}
      <div className="starfield absolute inset-0 pointer-events-none">
        {[...Array(50)].map((_, i) => (
          <div
            key={i}
            className="star absolute bg-white rounded-full"
            style={{
              width: Math.random() * 2 + 1 + "px",
              height: Math.random() * 2 + 1 + "px",
              top: Math.random() * 100 + "%",
              left: Math.random() * 100 + "%",
              animation: `twinkle ${Math.random() * 3 + 2}s infinite`,
            }}
          />
        ))}
      </div>

      <div className="relative z-10">
        <div className="flex justify-between items-start mb-2">
          <h2 className="text-xl font-semibold" style={{ fontFamily: "'Montserrat', sans-serif" }}>
            {job.title}
          </h2>
          <span className="text-sm text-red-400 bg-red-400/10 px-2 py-1 rounded-full">
            {job.matchScore}% Match
          </span>
        </div>
        <p className="text-sm text-gray-300" style={{ fontFamily: "'Inter', sans-serif" }}>
          {job.company} â€¢ {job.location}
        </p>
        <p className="text-sm text-gray-200 mt-2" style={{ fontFamily: "'Inter', sans-serif" }}>
          {job.description}
        </p>
        <div className="flex flex-wrap gap-2 mt-2">
          {job.skills.map((skill, index) => (
            <span key={index} className="text-xs bg-blue-500/20 text-blue-300 px-2 py-1 rounded-full">
              {skill}
            </span>
          ))}
        </div>
        <div className="flex justify-between items-center mt-4 text-sm text-gray-400">
          <div className="flex items-center gap-2">
            <span>Posted: {new Date(job.posted).toLocaleDateString()}</span>
            <span className="flex items-center">
              <Award className="h-4 w-4 text-yellow-400 mr-1" />
              Success: {job.successRate}%
            </span>
          </div>
          <div className="flex items-center gap-2">
            <span className="flex items-center">
              <Briefcase className="h-4 w-4 mr-1" />
              Type: {job.type}
            </span>
            <span className="flex items-center">
              <span className="mr-1">ðŸ’°</span>
              Salary: {job.salary}
            </span>
          </div>
        </div>
        <div className="flex justify-between items-center mt-4">
          <div className="flex gap-2">
            <Button variant="ghost" size="sm" className="text-gray-400 hover:text-white">
              <Heart className="h-4 w-4 mr-2" />
              Save
            </Button>
            <Button variant="ghost" size="sm" className="text-gray-400 hover:text-white">
              <Share2 className="h-4 w-4 mr-2" />
              Share
            </Button>
          </div>
          <div className="flex gap-2">
            <Dialog>
              <DialogTrigger asChild>
                <Button
                  onClick={handleTailorResume}
                  disabled={isTailoring}
                  className="bg-gray-800 text-white hover:bg-gray-700"
                >
                  {isTailoring ? (
                    <>
                      <RefreshCw className="h-4 w-4 animate-spin mr-2" />
                      Tailoring...
                    </>
                  ) : (
                    <>
                      <Sparkles className="h-4 w-4 mr-2" />
                      AI-Tailor Resume
                    </>
                  )}
                </Button>
              </DialogTrigger>
              <DialogContent className="bg-[rgba(10,12,24,0.95)] backdrop-blur-md border border-[rgba(255,255,255,0.1)] text-white">
                <DialogHeader>
                  <DialogTitle style={{ fontFamily: "'Montserrat', sans-serif" }}>
                    Tailored Resume for {job.title}
                  </DialogTitle>
                </DialogHeader>
                {tailoredResume ? (
                  <div className="space-y-4">
                    <div>
                      <h4 className="text-sm font-medium text-blue-300 mb-1" style={{ fontFamily: "'Inter', sans-serif" }}>
                        Tailored Professional Summary
                      </h4>
                      <Textarea
                        value={tailoredResume.personalInfo.summary}
                        readOnly
                        className="bg-gray-800 text-white border-gray-600 min-h-[100px] resize-none"
                        style={{ fontFamily: "'Inter', sans-serif" }}
                      />
                    </div>
                    <div>
                      <h4 className="text-sm font-medium text-blue-300 mb-1" style={{ fontFamily: "'Inter', sans-serif" }}>
                        Tailored Experience
                      </h4>
                      {tailoredResume.experience.map((exp: ExperienceItem, index: number) => (
                        <div key={index} className="mb-2">
                          <p className="text-sm text-gray-300" style={{ fontFamily: "'Inter', sans-serif" }}>
                            {exp.title} at {exp.company}
                          </p>
                          <p className="text-sm text-gray-400" style={{ fontFamily: "'Inter', sans-serif" }}>
                            {exp.description}
                          </p>
                        </div>
                      ))}
                    </div>
                    <div>
                      <h4 className="text-sm font-medium text-blue-300 mb-1" style={{ fontFamily: "'Inter', sans-serif" }}>
                        Tailored Skills
                      </h4>
                      <div className="flex flex-wrap gap-2">
                        {tailoredResume.skills.map((skill: string, index: number) => (
                          <span key={index} className="text-xs bg-blue-500/20 text-blue-300 px-2 py-1 rounded-full">
                            {skill}
                          </span>
                        ))}
                      </div>
                    </div>
                    <Button
                      onClick={handleApply}
                      disabled={isApplying}
                      className="w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white"
                    >
                      {isApplying ? (
                        <>
                          <RefreshCw className="h-4 w-4 animate-spin mr-2" />
                          Applying...
                        </>
                      ) : (
                        <>
                          <Check className="h-4 w-4 mr-2" />
                          Apply with Tailored Resume
                        </>
                      )}
                    </Button>
                  </div>
                ) : (
                  <p className="text-gray-300" style={{ fontFamily: "'Inter', sans-serif" }}>
                    Tailoring your resume...
                  </p>
                )}
              </DialogContent>
            </Dialog>
            <Button
              onClick={handleApply}
              disabled={isApplying || !tailoredResume}
              className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white"
            >
              <Check className="h-4 w-4 mr-2" />
              Apply Now
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
}

Update ResumeBuilder to Accept Tailored Resume Data
Weâ€™ll update the ResumeBuilder component to accept the tailored resume data and auto-fill the fields when the user applies with the tailored resume. Weâ€™ll also ensure the AIAssistant can handle the tailored data if needed.
jsx
import React, { useState, useRef, useEffect } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import Navbar from "@/components/navbar";
import ResumeTemplate, { 
  ProfessionalTemplate, 
  CreativeTemplate, 
  ExecutiveTemplate 
} from "@/components/resume-template";
import { 
  ResumeExperienceSection, 
  ResumeEducationSection, 
  ResumeSkillsSection,
  ResumeProjectsSection,
  ExperienceItem,
  EducationItem,
  SkillItem,
  ProjectItem,
} from "@/components/resume-section";
import { Resume } from "@/components/resume-template";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { 
  FileText, 
  GraduationCap, 
  Briefcase, 
  Code, 
  Award, 
  FolderKanban,
  Save,
  Upload,
  Loader2,
  Check,
  Plus,
  Maximize2,
  Printer,
  Download,
  Minus,
  User,
} from "lucide-react";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import AIAssistant from "@/components/ai-assistant";

// Preview component for the "Preview" section
function ResumePreview({ resume }: { resume: Resume }) {
  const [scale, setScale] = useState(1);

  const downloadResume = () => {
    window.print();
  };

  const TemplateComponent = 
    resume.template === "creative" ? CreativeTemplate :
    resume.template === "executive" ? ExecutiveTemplate :
    ProfessionalTemplate;

  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center mb-4">
        <h3 className="text-lg font-medium text-white">Resume Preview</h3>
        <div className="flex gap-2">
          <Button 
            variant="outline" 
            size="sm"
            onClick={() => setScale(Math.max(0.5, scale - 0.1))}
            disabled={scale <= 0.5}
            className="flex items-center text-gray-300 border-white/10 hover:bg-white/10 hover:text-white"
          >
            <Minus className="h-4 w-4" />
          </Button>
          <span className="flex items-center text-sm px-2 text-gray-300">{Math.round(scale * 100)}%</span>
          <Button 
            variant="outline" 
            size="sm"
            onClick={() => setScale(Math.min(1.5, scale + 0.1))}
            disabled={scale >= 1.5}
            className="flex items-center text-gray-300 border-white/10 hover:bg-white/10 hover:text-white"
          >
            <Plus className="h-4 w-4" />
          </Button>
          <Button 
            variant="outline" 
            size="sm"
            onClick={downloadResume}
            className="flex items-center gap-1 ml-2 text-gray-300 border-white/10 hover:bg-white/10 hover:text-white"
          >
            <Download className="h-4 w-4" />
            Download PDF
          </Button>
        </div>
      </div>
      
      <div className="bg-white/5 backdrop-blur-sm p-8 rounded-xl border border-white/10 shadow-xl">
        <div 
          className="transition-all duration-300 origin-top"
          style={{ transform: `scale(${scale})` }}
        >
          <TemplateComponent resume={resume} />
        </div>
      </div>
      
      <div className="mt-8">
        <h3 className="text-lg font-medium mb-4 text-white">Choose a Template</h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div 
            className={`border border-white/10 rounded-lg p-4 cursor-pointer ${resume.template === 'professional' ? 'border-blue-500 bg-blue-500/10' : 'border-gray-700'}`}
            onClick={() => handleTemplateChange('professional')}
          >
            <h4 className="font-medium mb-2 text-white">Professional</h4>
            <p className="text-sm text-gray-300">Clean, traditional layout ideal for conservative industries</p>
          </div>
          <div 
            className={`border border-white/10 rounded-lg p-4 cursor-pointer ${resume.template === 'creative' ? 'border-blue-500 bg-blue-500/10' : 'border-gray-700'}`}
            onClick={() => handleTemplateChange('creative')}
          >
            <h4 className="font-medium mb-2 text-white">Creative</h4>
            <p className="text-sm text-gray-300">Modern design with accent colors for creative fields</p>
          </div>
          <div 
            className={`border border-white/10 rounded-lg p-4 cursor-pointer ${resume.template === 'executive' ? 'border-blue-500 bg-blue-500/10' : 'border-gray-700'}`}
            onClick={() => handleTemplateChange('executive')}
          >
            <h4 className="font-medium mb-2 text-white">Executive</h4>
            <p className="text-sm text-gray-300">Sophisticated layout highlighting leadership experience</p>
          </div>
        </div>
      </div>
    </div>
  );
}

export default function ResumeBuilder() {
  const { toast } = useToast();
  const fileInputRef = useRef<HTMLInputElement>(null);
  const summaryFieldRef = useRef<HTMLTextAreaElement>(null);
  const experienceFieldRef = useRef<HTMLTextAreaElement>(null);
  const skillFieldRef = useRef<HTMLInputElement>(null);
  
  const [resumeSaved, setResumeSaved] = useState(false);
  const [activeSection, setActiveSection] = useState<string>("profile");
  const [isUploading, setIsUploading] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [resumeId, setResumeId] = useState<number | null>(null);
  
  const [resume, setResume] = useState<Resume>({
    title: "My Professional Resume",
    personalInfo: {
      firstName: "",
      lastName: "",
      email: "",
      phone: "",
      headline: "",
      summary: ""
    },
    experience: [],
    education: [],
    skills: [],
    projects: [],
    template: "professional"
  });

  // Fetch resume data if resumeId exists
  const { data: fetchedResume } = useQuery({
    queryKey: ["/api/resumes", resumeId],
    enabled: !!resumeId
  });

  useEffect(() => {
    if (fetchedResume) {
      setResume(fetchedResume as Resume);
    }
  }, [fetchedResume]);

  const saveResumeMutation = useMutation({
    mutationFn: async (resumeData: Resume) => {
      if (resumeId) {
        const res = await apiRequest("PATCH", `/api/resumes/${resumeId}`, resumeData);
        return await res.json();
      } else {
        const res = await apiRequest("POST", "/api/resumes", resumeData);
        return await res.json();
      }
    },
    onSuccess: (data) => {
      setResumeId(data.id);
      setResumeSaved(true);
      toast({
        title: "Resume saved",
        description: "Your resume has been saved successfully.",
      });
      queryClient.invalidateQueries({ queryKey: ["/api/resumes"] });
    },
    onError: (error) => {
      console.error("Error saving resume:", error);
      toast({
        title: "Error saving resume",
        description: "There was an error saving your resume. Please try again.",
        variant: "destructive",
      });
    }
  });

  const handleSaveResume = () => {
    setIsSaving(true);
    saveResumeMutation.mutate(resume);
    setIsSaving(false);
  };

  const updatePersonalInfo = (field: string, value: string) => {
    setResume({
      ...resume,
      personalInfo: {
        ...resume.personalInfo,
        [field]: value
      }
    });
  };

  const handleTemplateChange = (template: string) => {
    setResume({
      ...resume,
      template
    });
  };

  const handleFileUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;
    
    setIsUploading(true);
    
    const formData = new FormData();
    formData.append("file", file);
    
    try {
      const res = await apiRequest("POST", "/api/resumes/parse", formData);
      const parsedData = await res.json();
      
      if (parsedData.success) {
        setResume({
          ...resume,
          personalInfo: {
            ...resume.personalInfo,
            ...parsedData.data.personalInfo
          },
          experience: parsedData.data.experience || [],
          education: parsedData.data.education || [],
          skills: parsedData.data.skills || []
        });
        toast({
          title: "Resume uploaded",
          description: "Your resume has been parsed successfully.",
        });
      } else {
        toast({
          title: "Error parsing resume",
          description: parsedData.error || "There was an error parsing your resume.",
          variant: "destructive",
        });
      }
    } catch (error) {
      console.error("Error uploading resume:", error);
      toast({
        title: "Error uploading resume",
        description: "There was an error uploading your resume. Please try again.",
        variant: "destructive",
      });
    }
    
    setIsUploading(false);
    
    if (fileInputRef.current) {
      fileInputRef.current.value = "";
    }
  };

  const handleApplyBulletPoint = (bulletPoint: string) => {
    if (activeSection === "experience" && resume.experience.length > 0) {
      const updatedExperience = [...resume.experience];
      const lastIndex = updatedExperience.length - 1;
      
      updatedExperience[lastIndex] = {
        ...updatedExperience[lastIndex],
        description: bulletPoint
      };
      
      setResume({
        ...resume,
        experience: updatedExperience
      });
      
      toast({
        title: "Bullet point applied",
        description: "AI-generated bullet point has been applied to your experience.",
      });
    } else {
      const newExperience: ExperienceItem = {
        id: `exp-${Date.now()}`,
        title: "Position Title",
        company: "Company Name",
        startDate: "2022-01",
        endDate: "Present",
        description: bulletPoint
      };
      
      setResume({
        ...resume,
        experience: [...resume.experience, newExperience]
      });
      
      setActiveSection("experience");
      
      toast({
        title: "Experience added",
        description: "New experience with AI-generated bullet point has been added.",
      });
    }
  };

  const handleApplySummary = (summary: string) => {
    updatePersonalInfo("summary", summary);
    toast({
      title: "Summary applied",
      description: "AI-generated summary has been applied to your resume.",
    });
  };

  const handleApplySkill = (skillName: string) => {
    if (resume.skills.some(skill => skill.name.toLowerCase() === skillName.toLowerCase())) {
      toast({
        title: "Skill already exists",
        description: `"${skillName}" is already in your skills list.`,
        variant: "destructive",
      });
      return;
    }
    
    const newSkill: SkillItem = {
      id: `skill-${Date.now()}`,
      name: skillName,
      proficiency: 3
    };
    
    setResume({
      ...resume,
      skills: [...resume.skills, newSkill]
    });
    
    toast({
      title: "Skill added",
      description: `"${skillName}" has been added to your skills.`,
    });
  };

  const handleApplyTailoredContent = (tailoredResume: any) => {
    setResume({
      ...resume,
      personalInfo: {
        ...resume.personalInfo,
        summary: tailoredResume.personalInfo.summary,
      },
      experience: tailoredResume.experience,
      skills: tailoredResume.skills,
    });

    if (summaryFieldRef.current) {
      summaryFieldRef.current.value = tailoredResume.personalInfo.summary;
    }

    if (experienceFieldRef.current && tailoredResume.experience.length > 0) {
      experienceFieldRef.current.value = tailoredResume.experience[tailoredResume.experience.length - 1].description;
    }

    if (skillFieldRef.current && tailoredResume.skills.length > 0) {
      skillFieldRef.current.value = tailoredResume.skills[tailoredResume.skills.length - 1];
    }

    toast({
      title: "Tailored Resume Applied",
      description: "Your resume has been updated with the tailored content.",
    });
  };

  const handleFileInputClick = () => {
    fileInputRef.current?.click();
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-[hsl(219,90%,10%)] to-[hsl(260,90%,10%)] text-white relative overflow-hidden">
      {/* Starfield Background */}
      <div className="starfield absolute inset-0 pointer-events-none">
        {[...Array(50)].map((_, i) => (
          <div
            key={i}
            className="star absolute bg-white rounded-full"
            style={{
              width: Math.random() * 2 + 1 + "px",
              height: Math.random() * 2 + 1 + "px",
              top: Math.random() * 100 + "%",
              left: Math.random() * 100 + "%",
              animation: `twinkle ${Math.random() * 3 + 2}s infinite`,
            }}
          />
        ))}
      </div>

      <Navbar />

      <main className="container mx-auto pt-24 pb-20 px-4 relative z-10">
        <div className="mb-8 flex justify-between items-center">
          <div>
            <h1 className="text-3xl font-bold text-white mb-2" style={{ fontFamily: "'Montserrat', sans-serif" }}>
              Resume Builder
            </h1>
            <p className="text-gray-300" style={{ fontFamily: "'Inter', sans-serif" }}>
              Create a professional resume that passes ATS systems and gets you hired.
            </p>
          </div>
          <div className="flex space-x-3">
            <Button
              onClick={handleSaveResume}
              disabled={isSaving}
              className="flex items-center space-x-2 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 border-0"
            >
              {isSaving ? (
                <>
                  <Loader2 className="h-4 w-4 animate-spin" />
                  <span>Saving...</span>
                </>
              ) : (
                <>
                  <Save className="h-4 w-4" />
                  <span>Save Resume</span>
                </>
              )}
            </Button>
            <Button
              variant="outline"
              onClick={handleFileInputClick}
              disabled={isUploading}
              className="flex items-center space-x-2 border-white/10 text-gray-200 hover:bg-white/10 hover:text-white"
            >
              {isUploading ? (
                <>
                  <Loader2 className="h-4 w-4 animate-spin" />
                  <span>Uploading...</span>
                </>
              ) : (
                <>
                  <Upload className="h-4 w-4 text-blue-400" />
                  <span>Upload Resume</span>
                </>
              )}
            </Button>
            <input
              type="file"
              ref={fileInputRef}
              onChange={handleFileUpload}
              accept=".pdf,.docx,.txt"
              className="hidden"
            />
          </div>
        </div>

        <div className="border border-white/10 rounded-xl shadow-lg backdrop-blur-md overflow-hidden">
          <div className="relative">
            <div className="bg-gradient-to-r from-blue-900/80 to-purple-900/80 rounded-t-xl px-6 py-4 border-b border-white/10">
              <Tabs 
                value={activeSection} 
                onValueChange={setActiveSection} 
                className="w-full"
              >
                <TabsList className="bg-transparent w-full justify-start mb-1 p-0 space-x-1">
                  <TabsTrigger 
                    value="profile" 
                    className={`${activeSection === "profile" 
                      ? "bg-blue-600/50 text-white border-b-2 border-blue-400" 
                      : "text-gray-300 hover:text-white hover:bg-white/5"} font-medium transition-all duration-200`}
                  >
                    <FileText className="h-4 w-4 mr-2" />
                    PROFILE
                  </TabsTrigger>
                  <TabsTrigger 
                    value="experience" 
                    className={`${activeSection === "experience" 
                      ? "bg-blue-600/50 text-white border-b-2 border-blue-400" 
                      : "text-gray-300 hover:text-white hover:bg-white/5"} font-medium transition-all duration-200`}
                  >
                    <Briefcase className="h-4 w-4 mr-2" />
                    EXPERIENCE
                  </TabsTrigger>
                  <TabsTrigger 
                    value="education" 
                    className={`${activeSection === "education" 
                      ? "bg-blue-600/50 text-white border-b-2 border-blue-400" 
                      : "text-gray-300 hover:text-white hover:bg-white/5"} font-medium transition-all duration-200`}
                  >
                    <GraduationCap className="h-4 w-4 mr-2" />
                    EDUCATION
                  </TabsTrigger>
                  <TabsTrigger 
                    value="skills" 
                    className={`${activeSection === "skills" 
                      ? "bg-blue-600/50 text-white border-b-2 border-blue-400" 
                      : "text-gray-300 hover:text-white hover:bg-white/5"} font-medium transition-all duration-200`}
                  >
                    <Code className="h-4 w-4 mr-2" />
                    SKILLS
                  </TabsTrigger>
                  <TabsTrigger 
                    value="projects" 
                    className={`${activeSection === "projects" 
                      ? "bg-blue-600/50 text-white border-b-2 border-blue-400" 
                      : "text-gray-300 hover:text-white hover:bg-white/5"} font-medium transition-all duration-200`}
                  >
                    <FolderKanban className="h-4 w-4 mr-2" />
                    PROJECTS
                  </TabsTrigger>
                  <TabsTrigger 
                    value="preview" 
                    className={`${activeSection === "preview" 
                      ? "bg-blue-600/50 text-white border-b-2 border-blue-400" 
                      : "text-gray-300 hover:text-white hover:bg-white/5"} font-medium transition-all duration-200`}
                  >
                    <Maximize2 className="h-4 w-4 mr-2" />
                    PREVIEW
                  </TabsTrigger>
                </TabsList>
              </Tabs>
            </div>

            <div className="p-6">
              {activeSection === "profile" && (
                <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
                  <div className="md:col-span-2 space-y-6">
                    <div>
                      <h2 className="text-xl font-semibold mb-4 text-white flex items-center">
                        <User className="h-5 w-5 mr-2 text-blue-400" />
                        Personal Information
                      </h2>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <Label htmlFor="firstName" className="text-gray-300" style={{ fontFamily: "'Inter', sans-serif" }}>
                            First Name
                          </Label>
                          <Input 
                            id="firstName"
                            value={resume.personalInfo.firstName}
                            onChange={e => updatePersonalInfo("firstName", e.target.value)}
                            className="mt-1 bg-black/60 border-white/10 text-gray-200 focus:border-blue-500 focus:ring-blue-500"
                          />
                        </div>
                        <div>
                          <Label htmlFor="lastName" className="text-gray-300" style={{ fontFamily: "'Inter', sans-serif" }}>
                            Last Name
                          </Label>
                          <Input 
                            id="lastName"
                            value={resume.personalInfo.lastName}
                            onChange={e => updatePersonalInfo("lastName", e.target.value)}
                            className="mt-1 bg-black/60 border-white/10 text-gray-200 focus:border-blue-500 focus:ring-blue-500"
                          />
                        </div>
                        <div>
                          <Label htmlFor="email" className="text-gray-300" style={{ fontFamily: "'Inter', sans-serif" }}>
                            Email
                          </Label>
                          <Input 
                            id="email"
                            type="email"
                            value={resume.personalInfo.email}
                            onChange={e => updatePersonalInfo("email", e.target.value)}
                            className="mt-1 bg-black/60 border-white/10 text-gray-200 focus:border-blue-500 focus:ring-blue-500"
                          />
                        </div>
                        <div>
                          <Label htmlFor="phone" className="text-gray-300" style={{ fontFamily: "'Inter', sans-serif" }}>
                            Phone
                          </Label>
                          <Input 
                            id="phone"
                            value={resume.personalInfo.phone}
                            onChange={e => updatePersonalInfo("phone", e.target.value)}
                            className="mt-1 bg-black/60 border-white/10 text-gray-200 focus:border-blue-500 focus:ring-blue-500"
                          />
                        </div>
                      </div>
                    </div>
                    
                    <div>
                      <Label htmlFor="headline" className="text-gray-300" style={{ fontFamily: "'Inter', sans-serif" }}>
                        Professional Headline
                      </Label>
                      <Input 
                        id="headline"
                        value={resume.personalInfo.headline}
                        onChange={e => updatePersonalInfo("headline", e.target.value)}
                        className="mt-1 bg-black/60 border-white/10 text-gray-200 focus:border-blue-500 focus:ring-blue-500"
                        placeholder="e.g., Senior Software Engineer | Front-End Specialist | React & TypeScript Expert"
                      />
                    </div>
                    
                    <div>
                      <Label htmlFor="summary" className="text-gray-300" style={{ fontFamily: "'Inter', sans-serif" }}>
                        Professional Summary
                      </Label>
                      <Textarea 
                        id="summary"
                        ref={summaryFieldRef}
                        value={resume.personalInfo.summary}
                        onChange={e => updatePersonalInfo("summary", e.target.value)}
                        className="mt-1 min-h-32 bg-black/60 border-white/10 text-gray-200 focus:border-blue-500 focus:ring-blue-500"
                        placeholder="Write a concise summary of your professional background, key skills, and career achievements."
                      />
                    </div>
                  </div>
                </div>
              )}

              {activeSection === "experience" && (
                <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
                  <div className="md:col-span-2">
                    <div className="flex justify-between items-center mb-4">
                      <h2 className="text-xl font-semibold text-white flex items-center">
                        <Briefcase className="h-5 w-5 mr-2 text-blue-400" />
                        Work Experience
                      </h2>
                      <Button 
                        variant="ghost"
                        size="sm"
                        onClick={() => {
                          const newExperience: ExperienceItem = {
                            id: `exp-${Date.now()}`,
                            title: "Position Title",
                            company: "Company Name",
                            startDate: "",
                            endDate: "",
                            description: ""
                          };
                          setResume({
                            ...resume,
                            experience: [...resume.experience, newExperience]
                          });
                        }}
                        className="flex items-center space-x-1 border-white/10 text-blue-400 hover:bg-white/10 hover:text-white"
                      >
                        <Plus className="h-4 w-4" />
                        <span>Add Experience</span>
                      </Button>
                    </div>
                    <ResumeExperienceSection 
                      experiences={resume.experience} 
                      onUpdate={(experiences) => {
                        setResume({
                          ...resume,
                          experience: experiences
                        });
                      }}
                      experienceFieldRef={experienceFieldRef}
                    />
                  </div>
                </div>
              )}

              {activeSection === "education" && (
                <div>
                  <div className="flex justify-between items-center mb-4">
                    <h2 className="text-xl font-semibold text-white flex items-center">
                      <GraduationCap className="h-5 w-5 mr-2 text-blue-400" />
                      Education
                    </h2>
                    <Button 
                      variant="ghost"
                      size="sm"
                      onClick={() => {
                        const newEducation: EducationItem = {
                          id: `edu-${Date.now()}`,
                          degree: "Degree Name",
                          institution: "Institution Name",
                          startDate: "",
                          endDate: "",
                          description: ""
                        };
                        setResume({
                          ...resume,
                          education: [...resume.education, newEducation]
                        });
                      }}
                      className="flex items-center space-x-1 border-white/10 text-blue-400 hover:bg-white/10 hover:text-white"
                    >
                      <Plus className="h-4 w-4" />
                      <span>Add Education</span>
                    </Button>
                  </div>
                  <ResumeEducationSection 
                    education={resume.education} 
                    onUpdate={(education) => {
                      setResume({
                        ...resume,
                        education
                      });
                    }}
                  />
                </div>
              )}

              {activeSection === "skills" && (
                <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
                  <div className="md:col-span-2">
                    <div className="flex justify-between items-center mb-4">
                      <h2 className="text-xl font-semibold text-white flex items-center">
                        <Code className="h-5 w-5 mr-2 text-blue-400" />
                        Skills
                      </h2>
                      <Button 
                        variant="ghost"
                        size="sm"
                        onClick={() => {
                          const newSkill: SkillItem = {
                            id: `skill-${Date.now()}`,
                            name: "New Skill",
                            proficiency: 3
                          };
                          setResume({
                            ...resume,
                            skills: [...resume.skills, newSkill]
                          });
                        }}
                        className="flex items-center space-x-1 border-white/10 text-blue-400 hover:bg-white/10 hover:text-white"
                      >
                        <Plus className="h-4 w-4" />
                        <span>Add Skill</span>
                      </Button>
                    </div>
                    <ResumeSkillsSection 
                      skills={resume.skills} 
                      onUpdate={(skills) => {
                        setResume({
                          ...resume,
                          skills
                        });
                      }}
                      skillFieldRef={skillFieldRef}
                    />
                  </div>
                </div>
              )}

              {activeSection === "projects" && (
                <div>
                  <div className="flex justify-between items-center mb-4">
                    <h2 className="text-xl font-semibold text-white flex items-center">
                      <FolderKanban className="h-5 w-5 mr-2 text-blue-400" />
                      Projects
                    </h2>
                    <Button 
                      variant="ghost"
                      size="sm"
                      onClick={() => {
                        const newProject: ProjectItem = {
                          id: `proj-${Date.now()}`,
                          title: "Project Name",
                          description: "",
                          technologies: []
                        };
                        setResume({
                          ...resume,
                          projects: [...resume.projects, newProject]
                        });
                      }}
                      className="flex items-center space-x-1 border-white/10 text-blue-400 hover:bg-white/10 hover:text-white"
                    >
                      <Plus className="h-4 w-4" />
                      <span>Add Project</span>
                    </Button>
                  </div>
                  <ResumeProjectsSection 
                    projects={resume.projects} 
                    onUpdate={(projects) => {
                      setResume({
                        ...resume,
                        projects
                      });
                    }}
                  />
                </div>
              )}

              {activeSection === "preview" && (
                <div className="text-white">
                  <div className="flex justify-between items-center mb-6">
                    <h2 className="text-xl font-semibold text-white flex items-center">
                      <Maximize2 className="h-5 w-5 mr-2 text-blue-400" />
                      Resume Preview
                    </h2>
                    <Button
                      variant="ghost"
                      size="sm"
                      className="text-blue-400 hover:bg-white/10 hover:text-white border border-white/10"
                      onClick={() => window.print()}
                    >
                      <Printer className="h-4 w-4 mr-2" />
                      Print/Save PDF
                    </Button>
                  </div>
                  <div className="bg-white/5 backdrop-blur-sm p-8 rounded-xl border border-white/10 shadow-xl">
                    <ResumePreview resume={resume} />
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </main>

      <AIAssistant 
        resumeId={resumeId?.toString()}
        onApplySummary={handleApplySummary}
        onApplyBulletPoint={handleApplyBulletPoint}
        onApplySkill={handleApplySkill}
        onApplyTailoredContent={handleApplyTailoredContent}
        resume={resume}
        activeTab={activeSection}
        summaryFieldRef={summaryFieldRef}
        experienceFieldRef={experienceFieldRef}
        skillFieldRef={skillFieldRef}
      />
    </div>
  );
}

CSS for Starfield and Cosmic Navigator Theme
Ensure these styles are in your global CSS (e.g., index.css):
css
.starfield {
  position: absolute;
  width: 100%;
  height: 100%;
  overflow: hidden;
}

.star {
  opacity: 0.7;
}

@keyframes twinkle {
  0%, 100% { opacity: 0.7; }
  50% { opacity: 0.2; }
}

Explanation of Changes
1. Job Listing Component
Job Data Extraction: The JobListing component extracts the job description, skills, and other details from the job object (mocked for now, but you can replace it with an API call).

Tailor Resume Mutation: The tailorResume mutation simulates the tailoring process by:
Extracting keywords from the job description and skills.

Generating a tailored summary that incorporates the job title, company, and required skills.

Reordering and rephrasing the userâ€™s experience to emphasize relevant skills.

Merging the userâ€™s skills with the jobâ€™s required skills.
Tailored Resume Modal: Displays the tailored resume in a modal, showing the updated summary, experience, and skills. The user can apply directly from the modal.
2. Auto-Fill Tailored Resume in ResumeBuilder
Tailored Content Handler: Added handleApplyTailoredContent to the ResumeBuilder component, which updates the resume state with the tailored data and auto-fills the fields using the refs (summaryFieldRef, experienceFieldRef, skillFieldRef).

Field Refs: Ensured the refs are passed to the AIAssistant component, which can use them to auto-fill the fields when the tailored resume is applied.
3. Cosmic Navigator Theme
Starfield Animation: Added a starfield effect to the JobListing component background, matching the Cosmic Navigator theme.

Glassmorphism: Applied glassmorphism to the modal (bg-[rgba(10,12,24,0.95)] backdrop-blur-md border border-[rgba(255,255,255,0.1)]).

Neon Accents: Used hsl(221.2 83.2% 53.3%) for buttons and highlights, consistent with the theme.

Typography: Used Montserrat for headings and Inter for body text, ensuring consistency across the site.
4. User-Friendly Features
Tailored Resume Preview: The modal allows the user to review the tailored resume before applying, with sections for the summary, experience, and skills.

Auto-Fill Integration: When the user applies with the tailored resume, the ResumeBuilder fields are auto-filled with the tailored data, streamlining the process.

Feedback: Toasts provide feedback on the tailoring and application process (e.g., "Resume Tailored," "Application Submitted").
5. Future Improvements
AI Integration: The current implementation uses a simple keyword-matching algorithm. In a production environment, youâ€™d integrate with an AI service (e.g., OpenAI, Google Cloud Natural Language) to perform more sophisticated analysis and generate better-tailored content.

Dynamic Job Data: Replace the mocked job data with an API call to fetch real job listings.

User Resume Storage: Ensure the userâ€™s resume data is stored in a backend database and fetched dynamically.
Summary of Benefits
AI-Tailor Resume Feature: The feature scans the job description, analyzes the userâ€™s resume, and generates a tailored version that emphasizes relevant skills and experiences.

Auto-Fill Integration: The tailored resume data is auto-filled into the ResumeBuilder fields, reducing manual effort for the user.

Cosmic Navigator Theme: The design aligns with the themeâ€™s aesthetic (starfield, glassmorphism, neon accents, consistent typography).

User-Friendly Experience: The modal allows users to review the tailored resume before applying, and toasts provide feedback on the process.

Scalable Implementation: The code is structured to be easily extended with real AI services and dynamic data in a production environment.
This implementation provides a functional "AI-Tailor Resume" feature that integrates seamlessly with your existing ResumeBuilder page and the Cosmic Navigator theme. Let me know if youâ€™d like to add more features (e.g., more advanced AI tailoring, additional tailoring options) or adjust any part of the design!
