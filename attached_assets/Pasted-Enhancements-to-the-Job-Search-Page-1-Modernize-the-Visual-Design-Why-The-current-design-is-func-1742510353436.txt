Enhancements to the Job Search Page
1. Modernize the Visual Design
Why:
The current design is functional but lacks the modern, "AI-y" aesthetic we discussed earlier. A sleek, futuristic look will make the page more engaging and align with AIreHire’s brand.
Enhancement:
Use a gradient background and glassmorphism for job cards.

Add neon accents for buttons and highlights.

Improve typography for better readability.
Code Change:
Add CSS styles to the JobFinder component:
jsx
<div className="min-h-screen bg-gradient-to-br from-[#1E2A44] to-[#121212] text-white">

Update the JobCard component (assumed to be a separate component) to use glassmorphism:
jsx
// In JobCard.tsx
function JobCard({ job }) {
  return (
    <div className="job-card bg-[rgba(255,255,255,0.1)] backdrop-blur-md border border-[rgba(255,255,255,0.2)] rounded-lg p-4 m-2 transition-all hover:scale-102 hover:shadow-[0_0_10px_rgba(0,212,255,0.5)]">
      <h3 className="text-lg font-semibold">{job.title}</h3>
      <p className="text-sm text-gray-300">{job.company} - {job.location}</p>
      <p className="text-sm text-gray-400 mt-2">{job.description}</p>
      {/* Add more job details and actions here */}
    </div>
  );
}

Add these styles globally or in a CSS module:
css
.job-card {
  transition: transform 0.3s, box-shadow 0.3s;
}
.job-card:hover {
  transform: scale(1.02);
  box-shadow: 0 0 10px rgba(0, 212, 255, 0.5);
}

2. Add AI-Powered Features
Why:
The job search page should leverage AIreHire’s AI capabilities to provide personalized, actionable insights, making it more than just a job board.
Enhancements:
AI Match Score: Add a match score for each job (already mentioned in your earlier ideas).

Success Predictor: Show the likelihood of getting an interview for each job.

One-Click Resume Targeting: Allow users to tailor their resume for a specific job with one click.

Recommended Jobs Section: Highlight top matches at the top.
Code Change:
Update the JobCard component to include these features (assumed structure):
jsx
// In JobCard.tsx
import { Button } from "@/components/ui/button";
import { Star, Share2, Heart } from "lucide-react";
import { useMutation } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";

function JobCard({ job }) {
  const { toast } = useToast();

  const { mutate: tailorResume } = useMutation({
    mutationFn: async () => {
      const response = await apiRequest("POST", `/api/resumes/tailor`, { jobId: job.id });
      return response.json();
    },
    onSuccess: () => {
      toast({ title: "Resume Tailored", description: "Your resume has been optimized for this job." });
    },
  });

  return (
    <div className="job-card bg-[rgba(255,255,255,0.1)] backdrop-blur-md border border-[rgba(255,255,255,0.2)] rounded-lg p-4 m-2 transition-all hover:scale-102 hover:shadow-[0_0_10px_rgba(0,212,255,0.5)]">
      <div className="flex justify-between items-start">
        <div>
          <h3 className="text-lg font-semibold">{job.title}</h3>
          <p className="text-sm text-gray-300">{job.company} - {job.location}</p>
        </div>
        <div className="flex items-center gap-2">
          {job.matchScore >= 90 && <Star className="h-5 w-5 text-yellow-400" />}
          <span className="text-sm text-[#00D4FF]">{job.matchScore}% Match</span>
        </div>
      </div>
      <p className="text-sm text-gray-400 mt-2">{job.description}</p>
      <div className="mt-2 text-sm text-gray-300">
        <p>Success Chance: {job.successChance}%</p>
        <p className="text-xs text-gray-500">Estimated Salary: {job.salaryRange || "Not disclosed"}</p>
      </div>
      <div className="flex gap-2 mt-4">
        <Button onClick={() => tailorResume()} className="bg-[#00D4FF] hover:bg-[#00BFFF] text-black">
          AI-Tailor Resume
        </Button>
        <Button variant="outline" className="border-[#00D4FF] text-[#00D4FF]">
          Apply Now
        </Button>
        <Button variant="ghost" className="text-gray-300">
          <Heart className="h-4 w-4" />
        </Button>
        <Button variant="ghost" className="text-gray-300">
          <Share2 className="h-4 w-4" />
        </Button>
      </div>
    </div>
  );
}

Add a "Recommended Jobs" section above the main job list:
jsx
{!isLoading && jobs && jobs.length > 0 && (
  <div className="mb-6">
    <h2 className="text-xl font-semibold text-white mb-4">Recommended for You</h2>
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
      {jobs
        .filter((job) => job.matchScore >= 90)
        .slice(0, 3)
        .map((job) => (
          <JobCard key={job.id} job={job} />
        ))}
    </div>
  </div>
)}

3. Improve Filters and Search
Why:
The current JobFilter component is basic. Enhancing it with autocomplete and more filter options makes the search more powerful and user-friendly.
Enhancement:
Add autocomplete to the title search.

Expand filter options (e.g., remote, salary range).
Code Change:
Update the JobFilter component (assumed structure):
jsx
// In JobFilter.tsx
import { useState } from "react";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Button } from "@/components/ui/button";
import { Search } from "lucide-react";

export default function JobFilter({ initialValues, onFilter }) {
  const [values, setValues] = useState(initialValues);
  const [titleSuggestions, setTitleSuggestions] = useState(["Software Engineer", "Senior Developer", "Data Scientist"]);

  const handleTitleChange = (e) => {
    const value = e.target.value;
    setValues({ ...values, title: value });
    // Simulate autocomplete suggestions
    setTitleSuggestions([
      "Software Engineer",
      "Senior Software Engineer",
      "Data Scientist",
      value ? `${value} Specialist` : "",
    ].filter(Boolean));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    onFilter(values);
  };

  return (
    <form onSubmit={handleSubmit} className="bg-white p-4 rounded-lg shadow mb-6">
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <div className="relative">
          <Input
            placeholder="Job Title"
            value={values.title}
            onChange={handleTitleChange}
            className="pr-10"
          />
          <Search className="absolute right-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
          {values.title && (
            <ul className="absolute z-10 bg-white border rounded-lg w-full mt-1 max-h-40 overflow-auto">
              {titleSuggestions.map((suggestion, index) => (
                <li
                  key={index}
                  className="px-4 py-2 hover:bg-gray-100 cursor-pointer"
                  onClick={() => setValues({ ...values, title: suggestion })}
                >
                  {suggestion}
                </li>
              ))}
            </ul>
          )}
        </div>
        <Input
          placeholder="Location"
          value={values.location}
          onChange={(e) => setValues({ ...values, location: e.target.value })}
        />
        <Select
          value={values.type}
          onValueChange={(value) => setValues({ ...values, type: value })}
        >
          <SelectTrigger>
            <SelectValue placeholder="Job Type" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">All Types</SelectItem>
            <SelectItem value="full-time">Full-Time</SelectItem>
            <SelectItem value="part-time">Part-Time</SelectItem>
            <SelectItem value="contract">Contract</SelectItem>
          </SelectContent>
        </Select>
        <Select
          value={values.experience}
          onValueChange={(value) => setValues({ ...values, experience: value })}
        >
          <SelectTrigger>
            <SelectValue placeholder="Experience Level" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">All Levels</SelectItem>
            <SelectItem value="entry">Entry</SelectItem>
            <SelectItem value="mid">Mid</SelectItem>
            <SelectItem value="senior">Senior</SelectItem>
          </SelectContent>
        </Select>
      </div>
      <div className="mt-4 flex gap-2">
        <Select
          onValueChange={(value) => setValues({ ...values, remote: value })}
        >
          <SelectTrigger>
            <SelectValue placeholder="Remote" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">All</SelectItem>
            <SelectItem value="remote">Remote</SelectItem>
            <SelectItem value="hybrid">Hybrid</SelectItem>
            <SelectItem value="on-site">On-Site</SelectItem>
          </SelectContent>
        </Select>
        <Select
          onValueChange={(value) => setValues({ ...values, salary: value })}
        >
          <SelectTrigger>
            <SelectValue placeholder="Salary Range" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">All</SelectItem>
            <SelectItem value="50k-75k">$50k-$75k</SelectItem>
            <SelectItem value="75k-100k">$75k-$100k</SelectItem>
            <SelectItem value="100k+">$100k+</SelectItem>
          </SelectContent>
        </Select>
        <Button type="submit" className="bg-[#00D4FF] hover:bg-[#00BFFF] text-black">
          Filter
        </Button>
      </div>
    </form>
  );
}

4. Add Interactive Job Status Tabs
Why:
The job search page should integrate with the status tabs (All Jobs, Saved, Applied, Interviewing, Rejected) from your earlier screenshot, making it easier to manage job applications.
Enhancement:
Add tabs above the job list to filter by status.
Code Change:
Add tabs above the job list:
jsx
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";

export default function JobFinder() {
  const [filterValues, setFilterValues] = useState<JobFilterValues>({
    title: "",
    location: "",
    type: "all",
    experience: "all",
    remote: "all",
    salary: "all",
  });
  const [statusFilter, setStatusFilter] = useState("all");

  const { data: jobs, isLoading, error } = useQuery({
    queryKey: ["/api/jobs", filterValues, statusFilter],
    refetchInterval: false,
  });

  const handleFilter = (values) => {
    setFilterValues(values);
  };

  const filteredJobs = jobs?.filter((job) => {
    if (statusFilter === "all") return true;
    return job.status === statusFilter;
  }) || [];

  return (
    <div className="min-h-screen bg-gradient-to-br from-[#1E2A44] to-[#121212] text-white">
      <Navbar />
      <main className="pt-16">
        <div className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
          <div className="px-4 py-6 sm:px-0">
            <div className="mb-8">
              <h1 className="text-2xl font-bold text-white">Job Finder</h1>
              <p className="mt-1 text-sm text-gray-300">AI-matched job opportunities based on your resume.</p>
            </div>

            <JobFilter initialValues={filterValues} onFilter={handleFilter} />

            <div className="my-6 p-4 bg-[rgba(255,255,255,0.1)] backdrop-blur-md border border-[rgba(255,255,255,0.2)] rounded-lg">
              <div className="flex">
                <Cpu className="h-5 w-5 text-[#00D4FF]" />
                <div className="ml-3">
                  <h3 className="text-sm font-medium text-white">AI-Powered Job Matching</h3>
                  <p className="mt-2 text-sm text-gray-300">
                    Based on your resume, our AI has found jobs that match your skills and experience.
                  </p>
                </div>
              </div>
            </div>

            <Tabs value={statusFilter} onValueChange={setStatusFilter} className="mb-6">
              <TabsList className="bg-[rgba(255,255,255,0.1)] backdrop-blur-md">
                <TabsTrigger value="all" className="text-white">All Jobs</TabsTrigger>
                <TabsTrigger value="saved" className="text-white">Saved</TabsTrigger>
                <TabsTrigger value="applied" className="text-white">Applied</TabsTrigger>
                <TabsTrigger value="interviewing" className="text-white">Interviewing</TabsTrigger>
                <TabsTrigger value="rejected" className="text-white">Rejected</TabsTrigger>
              </TabsList>
            </Tabs>

            <Card className="bg-transparent border-none">
              {/* Recommended Jobs Section */}
              {!isLoading && filteredJobs.length > 0 && (
                <div className="mb-6">
                  <h2 className="text-xl font-semibold text-white mb-4">Recommended for You</h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    {filteredJobs
                      .filter((job) => job.matchScore >= 90)
                      .slice(0, 3)
                      .map((job) => (
                        <JobCard key={job.id} job={job} />
                      ))}
                  </div>
                </div>
              )}

              {/* Job Listings */}
              {isLoading ? (
                <CardContent className="p-0">
                  <div className="divide-y divide-gray-700">
                    {[...Array(3)].map((_, i) => (
                      <div key={i} className="p-4">
                        <Skeleton className="h-5 w-1/3 bg-gray-600" />
                        <Skeleton className="h-4 w-24 bg-gray-600 mt-2" />
                      </div>
                    ))}
                  </div>
                </CardContent>
              ) : error ? (
                <CardContent className="p-6 text-center">
                  <AlertTriangle className="h-12 w-12 text-red-500 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-red-500 mb-2">Error loading jobs</h3>
                  <p className="text-gray-300">{error.message}</p>
                </CardContent>
              ) : filteredJobs.length > 0 ? (
                <>
                  <CardContent className="p-0">
                    <ul className="divide-y divide-gray-700">
                      {filteredJobs.map((job) => (
                        <li key={job.id}>
                          <JobCard job={job} />
                        </li>
                      ))}
                    </ul>
                  </CardContent>
                  <div className="border-t border-gray-700 px-4 py-3">
                    <Pagination>
                      <PaginationContent>
                        <PaginationItem>
                          <PaginationPrevious href="#" />
                        </PaginationItem>
                        <PaginationItem>
                          <PaginationLink href="#" isActive>1</PaginationLink>
                        </PaginationItem>
                        <PaginationItem>
                          <PaginationLink href="#">2</PaginationLink>
                        </PaginationItem>
                        <PaginationItem>
                          <PaginationEllipsis />
                        </PaginationItem>
                        <PaginationItem>
                          <PaginationNext href="#" />
                        </PaginationItem>
                      </PaginationContent>
                    </Pagination>
                  </div>
                </>
              ) : (
                <CardContent className="py-12 text-center">
                  <p className="text-gray-300">No jobs found matching your criteria.</p>
                </CardContent>
              )}
            </Card>
          </div>
        </div>
      </main>
    </div>
  );
}

5. Integrate the Job Interview Avatar Simulator
Why:
The "Job Interview Avatar" simulator (from your earlier out-of-the-box idea) can be integrated into the job search page to make it more engaging and unique. Users can practice interviews for specific jobs directly from the job card.
Enhancement:
Add a "Practice Interview" button to each job card that opens a dialog with the avatar simulator.
Code Change:
Add the following to the JobFinder component:
jsx
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { useState } from "react";

// Add this new component for the Job Interview Avatar
function JobInterviewAvatar({ job }) {
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [userResponse, setUserResponse] = useState("");
  const [feedback, setFeedback] = useState("");
  const questions = [
    `Tell me about a time you used ${job.skills?.[0] || "a key skill"} in a project.`,
    `How do you approach challenges in ${job.title} roles?`,
    "Why are you interested in this position at ${job.company}?"
  ];
  const [currentQuestion, setCurrentQuestion] = useState(0);

  const handleSpeak = () => {
    setIsSpeaking(true);
    // Simulate text-to-speech (in production, use an API like Google Cloud Text-to-Speech)
    setTimeout(() => setIsSpeaking(false), 2000);
  };

  const handleSubmitResponse = () => {
    // Simulate AI feedback (in production, use NLP to evaluate the response)
    setFeedback("Good answer, but try to be more concise. Aim for 1-2 minutes.");
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
      setUserResponse("");
    }
  };

  return (
    <div className="space-y-4">
      <div className="flex items-center gap-4">
        <div className={`w-16 h-16 rounded-full bg-gray-500 ${isSpeaking ? "animate-pulse" : ""}`}></div>
        <div>
          <p className="text-lg font-semibold">{questions[currentQuestion]}</p>
          <Button onClick={handleSpeak} className="mt-2">Speak Question</Button>
        </div>
      </div>
      <textarea
        className="w-full p-2 rounded-lg bg-gray-800 text-white"
        value={userResponse}
        onChange={(e) => setUserResponse(e.target.value)}
        placeholder="Type your response here..."
      />
      <Button onClick={handleSubmitResponse}>Submit Response</Button>
      {feedback && (
        <div className="p-4 bg-[rgba(255,255,255,0.1)] rounded-lg">
          <p className="text-sm text-gray-300">Feedback: {feedback}</p>
        </div>
      )}
    </div>
  );
}

// Update JobCard to include the Practice Interview button
function JobCard({ job }) {
  const { toast } = useToast();

  const { mutate: tailorResume } = useMutation({
    mutationFn: async () => {
      const response = await apiRequest("POST", `/api/resumes/tailor`, { jobId: job.id });
      return response.json();
    },
    onSuccess: () => {
      toast({ title: "Resume Tailored", description: "Your resume has been optimized for this job." });
    },
  });

  return (
    <div className="job-card bg-[rgba(255,255,255,0.1)] backdrop-blur-md border border-[rgba(255,255,255,0.2)] rounded-lg p-4 m-2 transition-all hover:scale-102 hover:shadow-[0_0_10px_rgba(0,212,255,0.5)]">
      <div className="flex justify-between items-start">
        <div>
          <h3 className="text-lg font-semibold">{job.title}</h3>
          <p className="text-sm text-gray-300">{job.company} - {job.location}</p>
        </div>
        <div className="flex items-center gap-2">
          {job.matchScore >= 90 && <Star className="h-5 w-5 text-yellow-400" />}
          <span className="text-sm text-[#00D4FF]">{job.matchScore}% Match</span>
        </div>
      </div>
      <p className="text-sm text-gray-400 mt-2">{job.description}</p>
      <div className="mt-2 text-sm text-gray-300">
        <p>Success Chance: {job.successChance}%</p>
        <p className="text-xs text-gray-500">Estimated Salary: {job.salaryRange || "Not disclosed"}</p>
      </div>
      <div className="flex gap-2 mt-4">
        <Button onClick={() => tailorResume()} className="bg-[#00D4FF] hover:bg-[#00BFFF] text-black">
          AI-Tailor Resume
        </Button>
        <Button variant="outline" className="border-[#00D4FF] text-[#00D4FF]">
          Apply Now
        </Button>
        <Dialog>
          <DialogTrigger asChild>
            <Button variant="outline" className="border-[#00D4FF] text-[#00D4FF]">
              Practice Interview
            </Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-[425px] bg-gray-900 text-white">
            <DialogHeader>
              <DialogTitle>Practice Interview for {job.title}</DialogTitle>
            </DialogHeader>
            <JobInterviewAvatar job={job} />
          </DialogContent>
        </Dialog>
        <Button variant="ghost" className="text-gray-300">
          <Heart className="h-4 w-4" />
        </Button>
        <Button variant="ghost" className="text-gray-300">
          <Share2 className="h-4 w-4" />
        </Button>
      </div>
    </div>
  );
}

6. Add Personalized Job Alerts
Why:
Allowing users to set up alerts directly from the search page keeps them engaged and ensures they don’t miss relevant opportunities.
Enhancement:
Add a "Set Alert" button that saves the current filter values as an alert.
Code Change:
Add this below the JobFilter component:
jsx
<div className="mb-6">
  <Button
    onClick={() => {
      // Simulate saving the alert (in production, save to backend)
      toast({ title: "Alert Set", description: `You'll be notified of new ${filterValues.title} jobs in ${filterValues.location}.` });
    }}
    className="bg-[#00D4FF] hover:bg-[#00BFFF] text-black"
  >
    Set Alert for This Search
  </Button>
</div>

7. Add Gamification Elements
Why:
Gamification encourages users to stay engaged by making the job search process more rewarding.
Enhancement:
Add a "Job Search Progress" widget showing application milestones.
Code Change:
Add this above the job list:
jsx
<div className="mb-6 p-4 bg-[rgba(255,255,255,0.1)] rounded-lg">
  <h3 className="text-lg font-semibold text-white mb-2">Job Search Progress</h3>
  <p className="text-sm text-gray-300">You've applied to 5/10 jobs this month—keep going! 🎯</p>
  <div className="w-full bg-gray-700 rounded-full h-2.5 mt-2">
    <div className="bg-[#00D4FF] h-2.5 rounded-full" style={{ width: "50%" }}></div>
  </div>
</div>

Summary of Benefits
Modern Design: Gradient background, glassmorphism, and neon accents make the page visually appealing and align with AIreHire’s brand.

AI Features: Match scores, success predictors, and one-click resume targeting make the job search smarter and more personalized.

Enhanced Filters: Autocomplete and additional filter options improve usability.

Interactive Tabs: Status tabs help users manage their job applications efficiently.

Job Interview Avatar: Adds a unique, engaging feature that sets AIreHire apart.

Job Alerts: Keeps users engaged by delivering relevant opportunities.

Gamification: Progress tracking motivates users to stay active.
This enhanced job search page combines functionality, interactivity, and a modern design to create a compelling user experience. Let me know if you’d like to dive deeper into any specific feature (e.g., implementing the avatar simulator in more detail)!
