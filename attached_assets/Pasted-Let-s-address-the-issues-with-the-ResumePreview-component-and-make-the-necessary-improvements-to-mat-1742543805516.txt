Let’s address the issues with the ResumePreview component and make the necessary improvements to match the desired functionality and appearance. Here’s a detailed breakdown of the changes and the updated code:
Issues Identified and Solutions:
Zoomed-Out Preview Area:
Problem: The preview area is too zoomed in, and the entire resume isn’t visible without scrolling.

Solution: Adjust the initial scale to ensure the entire A4-sized resume fits within the container by default. We’ll also tweak the container’s dimensions and padding to make the resume fully visible.
Auto-Adjust Feature:
Problem: The autoAdjust function currently only adjusts the scale but doesn’t restructure the data to fit nicely on one page.

Solution: Enhance the autoAdjust function to not only scale the preview but also adjust the content (e.g., font sizes, line spacing, and section margins) to fit the resume on one A4 page. This will involve dynamically modifying the resume’s styling.
Editing Functionality:
Problem: The edit mode is turning some areas into black boxes and only allows editing of the name, email, phone, and summary fields.

Solution: Fix the rendering issue by ensuring the TemplateComponent doesn’t obscure content in edit mode. Expand the editing capabilities to allow users to modify experience, education, skills, and projects directly in the preview.
Updated Code:
jsx
// ... (previous imports remain unchanged)
import { cn } from "@/lib/utils";

// Preview component for the "Preview" section
function ResumePreview({
  resume,
  onTemplateChange,
}: {
  resume: Resume;
  onTemplateChange: (template: string) => void;
}) {
  const [scale, setScale] = useState(1);
  const [isFullScreen, setIsFullScreen] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [isAutoAdjusting, setIsAutoAdjusting] = useState(false);
  const [editedResume, setEditedResume] = useState<Resume>(resume);
  const [fontScale, setFontScale] = useState(1); // For auto-adjusting font size
  const [spacingScale, setSpacingScale] = useState(1); // For auto-adjusting spacing
  const previewRef = useRef<HTMLDivElement>(null);

  // Function to download the resume
  const downloadResume = () => {
    window.print(); // Simplified for demo; replace with actual PDF generation in production
  };

  // Auto-adjust feature to fit content on one page
  const autoAdjust = () => {
    setIsAutoAdjusting(true);
    const previewElement = previewRef.current;
    if (!previewElement) return;

    const containerHeight = previewElement.parentElement?.clientHeight || 0;
    const contentHeight = previewElement.scrollHeight;
    const a4Height = 297 * 3.78; // A4 height in pixels (297mm at 96dpi)

    // Step 1: Adjust scale to fit the container
    if (contentHeight > containerHeight) {
      const newScale = (containerHeight / contentHeight) * scale;
      setScale(Math.max(0.5, newScale));
    } else {
      setScale(1);
    }

    // Step 2: Adjust content to fit on one A4 page
    if (contentHeight > a4Height) {
      // Reduce font size and spacing to fit content
      const reductionFactor = a4Height / contentHeight;
      setFontScale(Math.max(0.7, reductionFactor)); // Minimum font scale of 0.7 to maintain readability
      setSpacingScale(Math.max(0.5, reductionFactor)); // Minimum spacing scale of 0.5
    } else {
      setFontScale(1);
      setSpacingScale(1);
    }

    setIsAutoAdjusting(false);
  };

  // Toggle full screen view
  const toggleFullScreen = () => {
    setIsFullScreen(!isFullScreen);
  };

  // Handle edit toggle
  const toggleEdit = () => {
    setIsEditing(!isEditing);
    if (isEditing) {
      // Save changes when exiting edit mode
      setResume(editedResume);
    }
  };

  // Update edited resume fields
  const handleFieldChange = (
    section: string,
    field: string,
    value: string,
    index?: number
  ) => {
    setEditedResume((prev) => {
      if (section === "personalInfo") {
        return {
          ...prev,
          personalInfo: {
            ...prev.personalInfo,
            [field]: value,
          },
        };
      } else if (section === "experience" && typeof index === "number") {
        const updatedExperience = [...prev.experience];
        updatedExperience[index] = {
          ...updatedExperience[index],
          [field]: value,
        };
        return {
          ...prev,
          experience: updatedExperience,
        };
      } else if (section === "education" && typeof index === "number") {
        const updatedEducation = [...prev.education];
        updatedEducation[index] = {
          ...updatedEducation[index],
          [field]: value,
        };
        return {
          ...prev,
          education: updatedEducation,
        };
      } else if (section === "skills" && typeof index === "number") {
        const updatedSkills = [...prev.skills];
        updatedSkills[index] = {
          ...updatedSkills[index],
          [field]: value,
        };
        return {
          ...prev,
          skills: updatedSkills,
        };
      } else if (section === "projects" && typeof index === "number") {
        const updatedProjects = [...prev.projects];
        updatedProjects[index] = {
          ...updatedProjects[index],
          [field]: value,
        };
        return {
          ...prev,
          projects: updatedProjects,
        };
      }
      return prev;
    });
  };

  // Get the appropriate template component based on resume.template
  const TemplateComponent =
    resume.template === "creative"
      ? CreativeTemplate
      : resume.template === "executive"
        ? ExecutiveTemplate
        : resume.template === "modern"
          ? ModernTemplate
          : resume.template === "minimal"
            ? MinimalTemplate
            : resume.template === "industry"
              ? IndustryTemplate
              : resume.template === "bold"
                ? BoldTemplate
                : ProfessionalTemplate; // Default to professional

  // Update edited resume when the main resume changes
  useEffect(() => {
    setEditedResume(resume);
  }, [resume]);

  // Initial auto-adjust on mount to ensure the resume fits
  useEffect(() => {
    autoAdjust();
  }, []);

  return (
    <div className="space-y-4">
      {/* Controls */}
      <div className="flex flex-wrap justify-between items-center mb-4 gap-2">
        <div className="flex items-center gap-2">
          <h3 className="text-lg font-medium text-white">Resume Preview</h3>
          <Badge variant="outline" className="text-blue-300 border-blue-300/30">
            {Math.round(scale * 100)}%
          </Badge>
        </div>
        <div className="flex gap-2">
          <Button
            variant="outline"
            size="sm"
            onClick={() => setScale(Math.max(0.5, scale - 0.1))}
            disabled={scale <= 0.5}
            className="flex items-center text-white border-white/20 hover:bg-white/10"
          >
            <Minus className="h-4 w-4" />
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={() => setScale(Math.min(1.5, scale + 0.1))}
            disabled={scale >= 1.5}
            className="flex items-center text-white border-white/20 hover:bg-white/10"
          >
            <Plus className="h-4 w-4" />
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={autoAdjust}
            disabled={isAutoAdjusting}
            className="flex items-center gap-1 text-white border-white/20 hover:bg-white/10"
          >
            {isAutoAdjusting ? (
              <Loader2 className="h-4 w-4 animate-spin" />
            ) : (
              <Zap className="h-4 w-4" />
            )}
            Auto Adjust
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={toggleFullScreen}
            className="flex items-center gap-1 text-white border-white/20 hover:bg-white/10"
          >
            <Maximize2 className="h-4 w-4" />
            {isFullScreen ? "Exit Full Screen" : "Full Screen"}
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={toggleEdit}
            className="flex items-center gap-1 text-white border-white/20 hover:bg-white/10"
          >
            {isEditing ? (
              <>
                <Check className="h-4 w-4" />
                Save
              </>
            ) : (
              <>
                <FileText className="h-4 w-4" />
                Edit
              </>
            )}
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={downloadResume}
            className="flex items-center gap-1 text-white border-white/20 hover:bg-white/10"
          >
            <Download className="h-4 w-4" />
            Download PDF
          </Button>
        </div>
      </div>

      {/* Resume Preview */}
      <div
        className={cn(
          "bg-white/5 backdrop-blur-sm rounded-xl border border-white/10 shadow-xl overflow-auto",
          isFullScreen
            ? "fixed inset-0 z-50 m-0 p-8 bg-black/90"
            : "p-4 h-[70vh]" // Reduced padding and set a fixed height
        )}
      >
        <div
          ref={previewRef}
          className="transition-all duration-300 mx-auto"
          style={{
            transform: `scale(${scale})`,
            width: "210mm", // A4 width
            height: "297mm", // A4 height (fixed to ensure one page)
            transformOrigin: isFullScreen ? "center" : "top",
            fontSize: `${fontScale * 100}%`, // Dynamic font scaling
            lineHeight: `${spacingScale * 1.5}`, // Dynamic line height scaling
          }}
        >
          {isEditing ? (
            <div className="p-6 bg-white text-black h-full">
              {/* Name */}
              <h2 className="text-2xl font-bold mb-2">
                <Input
                  value={
                    editedResume.personalInfo.firstName +
                    " " +
                    editedResume.personalInfo.lastName
                  }
                  onChange={(e) => {
                    const [firstName, ...lastNameParts] =
                      e.target.value.split(" ");
                    handleFieldChange(
                      "personalInfo",
                      "firstName",
                      firstName || ""
                    );
                    handleFieldChange(
                      "personalInfo",
                      "lastName",
                      lastNameParts.join(" ") || ""
                    );
                  }}
                  className="border-none p-0 text-2xl font-bold"
                />
              </h2>

              {/* Contact Info */}
              <div className="flex gap-2 text-sm mb-4">
                <Input
                  value={editedResume.personalInfo.email}
                  onChange={(e) =>
                    handleFieldChange("personalInfo", "email", e.target.value)
                  }
                  className="border-none p-0 text-sm"
                  placeholder="Email"
                />
                <span>|</span>
                <Input
                  value={editedResume.personalInfo.phone}
                  onChange={(e) =>
                    handleFieldChange("personalInfo", "phone", e.target.value)
                  }
                  className="border-none p-0 text-sm"
                  placeholder="Phone"
                />
              </div>

              {/* Summary */}
              <div className="mb-4">
                <h3 className="text-lg font-semibold mb-1">
                  Professional Summary
                </h3>
                <Textarea
                  value={editedResume.personalInfo.summary}
                  onChange={(e) =>
                    handleFieldChange("personalInfo", "summary", e.target.value)
                  }
                  className="border-none p-0 text-sm"
                  placeholder="Professional Summary"
                />
              </div>

              {/* Experience */}
              <div className="mb-4">
                <h3 className="text-lg font-semibold mb-1">Experience</h3>
                {editedResume.experience.map((exp, index) => (
                  <div key={exp.id} className="mb-2">
                    <Input
                      value={exp.title}
                      onChange={(e) =>
                        handleFieldChange(
                          "experience",
                          "title",
                          e.target.value,
                          index
                        )
                      }
                      className="border-none p-0 font-semibold"
                    />
                    <Input
                      value={exp.company}
                      onChange={(e) =>
                        handleFieldChange(
                          "experience",
                          "company",
                          e.target.value,
                          index
                        )
                      }
                      className="border-none p-0 text-sm"
                    />
                    <div className="flex gap-2 text-sm">
                      <Input
                        value={exp.startDate}
                        onChange={(e) =>
                          handleFieldChange(
                            "experience",
                            "startDate",
                            e.target.value,
                            index
                          )
                        }
                        className="border-none p-0 text-sm"
                      />
                      <span>-</span>
                      <Input
                        value={exp.endDate}
                        onChange={(e) =>
                          handleFieldChange(
                            "experience",
                            "endDate",
                            e.target.value,
                            index
                          )
                        }
                        className="border-none p-0 text-sm"
                      />
                    </div>
                    <Textarea
                      value={exp.description}
                      onChange={(e) =>
                        handleFieldChange(
                          "experience",
                          "description",
                          e.target.value,
                          index
                        )
                      }
                      className="border-none p-0 text-sm mt-1"
                    />
                  </div>
                ))}
              </div>

              {/* Education */}
              <div className="mb-4">
                <h3 className="text-lg font-semibold mb-1">Education</h3>
                {editedResume.education.map((edu, index) => (
                  <div key={edu.id} className="mb-2">
                    <Input
                      value={edu.degree}
                      onChange={(e) =>
                        handleFieldChange(
                          "education",
                          "degree",
                          e.target.value,
                          index
                        )
                      }
                      className="border-none p-0 font-semibold"
                    />
                    <Input
                      value={edu.institution}
                      onChange={(e) =>
                        handleFieldChange(
                          "education",
                          "institution",
                          e.target.value,
                          index
                        )
                      }
                      className="border-none p-0 text-sm"
                    />
                    <div className="flex gap-2 text-sm">
                      <Input
                        value={edu.startDate}
                        onChange={(e) =>
                          handleFieldChange(
                            "education",
                            "startDate",
                            e.target.value,
                            index
                          )
                        }
                        className="border-none p-0 text-sm"
                      />
                      <span>-</span>
                      <Input
                        value={edu.endDate}
                        onChange={(e) =>
                          handleFieldChange(
                            "education",
                            "endDate",
                            e.target.value,
                            index
                          )
                        }
                        className="border-none p-0 text-sm"
                      />
                    </div>
                    <Textarea
                      value={edu.description}
                      onChange={(e) =>
                        handleFieldChange(
                          "education",
                          "description",
                          e.target.value,
                          index
                        )
                      }
                      className="border-none p-0 text-sm mt-1"
                    />
                  </div>
                ))}
              </div>

              {/* Skills */}
              <div className="mb-4">
                <h3 className="text-lg font-semibold mb-1">Skills</h3>
                <div className="flex flex-wrap gap-2">
                  {editedResume.skills.map((skill, index) => (
                    <Input
                      key={skill.id}
                      value={skill.name}
                      onChange={(e) =>
                        handleFieldChange(
                          "skills",
                          "name",
                          e.target.value,
                          index
                        )
                      }
                      className="border-none p-0 text-sm"
                    />
                  ))}
                </div>
              </div>

              {/* Projects */}
              <div className="mb-4">
                <h3 className="text-lg font-semibold mb-1">Projects</h3>
                {editedResume.projects.map((proj, index) => (
                  <div key={proj.id} className="mb-2">
                    <Input
                      value={proj.title}
                      onChange={(e) =>
                        handleFieldChange(
                          "projects",
                          "title",
                          e.target.value,
                          index
                        )
                      }
                      className="border-none p-0 font-semibold"
                    />
                    <Textarea
                      value={proj.description}
                      onChange={(e) =>
                        handleFieldChange(
                          "projects",
                          "description",
                          e.target.value,
                          index
                        )
                      }
                      className="border-none p-0 text-sm mt-1"
                    />
                    <Input
                      value={proj.technologies.join(", ")}
                      onChange={(e) =>
                        handleFieldChange(
                          "projects",
                          "technologies",
                          e.target.value.split(", "),
                          index
                        )
                      }
                      className="border-none p-0 text-sm mt-1"
                    />
                  </div>
                ))}
              </div>
            </div>
          ) : (
            <div className="bg-white text-black p-6 h-full">
              <TemplateComponent resume={resume} />
            </div>
          )}
        </div>
      </div>

      {/* Template Selection */}
      <div className="mt-8">
        <h3 className="text-lg font-medium mb-4 text-white">
          Choose a Template
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-4">
          {[
            { name: "professional", preview: TemplatePreviewProfessional },
            { name: "creative", preview: TemplatePreviewCreative },
            { name: "executive", preview: TemplatePreviewExecutive },
            { name: "modern", preview: TemplatePreviewModern },
            { name: "minimal", preview: TemplatePreviewMinimal },
            { name: "industry", preview: TemplatePreviewIndustry },
            { name: "bold", preview: TemplatePreviewBold },
          ].map((template) => (
            <div
              key={template.name}
              className={cn(
                "cursor-pointer p-3 rounded-lg transition-all",
                resume.template === template.name
                  ? "border-2 border-blue-500 shadow-lg"
                  : "border border-white/20"
              )}
              onClick={() => onTemplateChange(template.name)}
            >
              <div className="h-32 mb-2">
                <template.preview />
              </div>
              <h4 className="font-medium text-center text-white capitalize">
                {template.name}
              </h4>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

// ... (rest of the ResumeBuilder component remains unchanged)

Changes Made:
Zoomed-Out Preview Area:
Reduced Padding: Changed the padding of the preview container from p-8 to p-4 to give more space for the resume to be visible.

Fixed Height: Set the container height to h-[70vh] to ensure it takes up a reasonable portion of the viewport, making the entire resume visible.

Initial Scale Adjustment: The autoAdjust function now runs on mount (useEffect(() => { autoAdjust(); }, [])) to ensure the resume fits within the container by default.
Enhanced Auto-Adjust Feature:
Content Fitting: Added fontScale and spacingScale states to dynamically adjust the font size and line spacing of the resume content.

A4 Page Constraint: Fixed the resume height to 297mm (A4 height) and ensured the content fits within this constraint by comparing the content height to the A4 height (297 * 3.78 pixels at 96dpi).

Dynamic Adjustments: If the content exceeds the A4 height, the autoAdjust function reduces the font size (fontScale) and line spacing (spacingScale) proportionally to fit everything on one page while maintaining readability (minimum font scale of 0.7 and spacing scale of 0.5).
Fixed Editing Functionality:
Black Boxes Issue: The black boxes were likely due to the TemplateComponent rendering incorrectly in edit mode. Removed the direct rendering of TemplateComponent in edit mode and instead created a custom editable layout that mirrors the resume structure.

Expanded Editing: Added editable fields for all sections (personal info, experience, education, skills, and projects). Each field is now an Input or Textarea component, allowing users to edit directly in the preview.

Field Updates: Updated the handleFieldChange function to handle updates for all sections, including array-based sections like experience, education, skills, and projects, by passing an index parameter where necessary.
How It Works Now:
Zoomed-Out View: The resume is now fully visible within the container by default, thanks to the initial autoAdjust call and reduced padding.

Auto-Adjust: The autoAdjust function now scales the preview to fit the container and adjusts the font size and spacing to ensure the content fits on one A4 page. It maintains readability by setting minimum thresholds for font and spacing scales.

Editing: All sections are now editable in edit mode. Users can modify personal info, experience, education, skills, and projects directly in the preview. Changes are saved to the editedResume state and applied to the main resume state when the user clicks "Save".
Additional Notes:
The TemplateComponent is still used in view mode to render the styled resume template, ensuring the preview matches the selected template’s design.

The full-screen mode remains unchanged and works as expected.

If you need further adjustments (e.g., more precise content fitting, additional editable fields, or different styling), let me know!
