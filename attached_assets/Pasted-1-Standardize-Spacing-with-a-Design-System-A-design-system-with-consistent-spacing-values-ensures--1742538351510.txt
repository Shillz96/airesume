1. Standardize Spacing with a Design System
A design system with consistent spacing values ensures that all sections of your website feel unified. Let’s define a spacing scale and apply it across your components.
Spacing Scale (using Tailwind CSS classes for simplicity, but you can use raw CSS if preferred):
0: 0px

1: 4px

2: 8px

3: 12px

4: 16px

5: 20px

6: 24px

8: 32px

10: 40px

12: 48px

16: 64px
Apply Consistent Padding and Margins:
Use px-4 py-6 (16px horizontal, 24px vertical) for section containers.

Use mb-6 (24px) for spacing between sections.

Use gap-4 (16px) for grid or flex layouts within sections.
2. Fix the Background Gradient for Seamless Transitions
The color breaks at the top and bottom are likely due to the background gradient not extending across the entire viewport or the header/footer having a different background color. Let’s ensure the background is consistent.
Set a Global Background Gradient:
Apply the gradient to the body or the root container of your app, ensuring it spans the entire viewport.
3. Create a Consistent Layout Structure
Use a wrapper layout for all pages to ensure consistent spacing between the header, main content, and footer.
Updated Code with Cohesive Spacing and Background
Let’s update the HomePage component (from your previous code) to apply these principles. I’ll also provide a global CSS setup to fix the background gradient and ensure a seamless design across all screens.
Step 1: Set Up Global Styles
Add global styles to your app to define the background gradient and spacing rules. If you’re using Tailwind CSS, you can add these to your index.css or equivalent file. If you’re using raw CSS, add them to your stylesheet.
css
/* index.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  /* Define the cosmic gradient background */
  background: linear-gradient(135deg, #1e1e3f 0%, #2a2a5e 50%, #3b3b8e 100%);
  min-height: 100vh; /* Ensure the gradient spans the entire viewport */
  margin: 0;
  padding: 0;
  color: #ffffff; /* Default text color for the app */
}

/* Remove default margins and ensure the app takes full height */
html, body, #root {
  height: 100%;
  margin: 0;
  padding: 0;
}

/* Wrapper for all pages to ensure consistent spacing */
.page-wrapper {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

/* Main content should take up remaining space */
.page-wrapper main {
  flex: 1;
  padding-top: 6rem; /* Space for the header (24px * 6 = 144px) */
  padding-bottom: 4rem; /* Space for the footer (24px * 4 = 96px) */
}

/* Consistent section styling */
.section {
  @apply bg-gradient-to-br from-gray-800 to-gray-900 rounded-lg p-6 mb-6;
}

/* Consistent header and footer styling */
header, footer {
  @apply bg-transparent; /* Ensure header/footer blend with the background */
}

Step 2: Update the HomePage Component
Modify the HomePage component to use the new spacing rules and ensure the background gradient is seamless. I’ll also include the job listings and walkthrough modal from your previous code, with adjusted spacing.
jsx
import { useEffect, useRef, useState } from "react";
import axios from "axios";
import Navbar from "@/components/navbar";
import DashboardStats from "@/components/dashboard-stats";
import RecentActivity from "@/components/recent-activity";
import JobInterviewAvatar from "@/components/job-interview-avatar";
import JobSearchProgress from "@/components/job-search-progress";
import { useAuth } from "@/hooks/use-auth";
import { Rocket } from "lucide-react";
import gsap from "gsap";

export default function HomePage | ResumeBuilder | JobFinder | SubscriptionManagement() {
  const { user } = useAuth();
  const welcomeRef = useRef<HTMLDivElement>(null);
  const rocketRef = useRef<HTMLDivElement>(null);
  const [jobs, setJobs] = useState([]); // State to store job listings
  const [loading, setLoading] = useState(true); // Loading state
  const [showWalkthrough, setShowWalkthrough] = useState(false); // Walkthrough modal state
  const [selectedJob, setSelectedJob] = useState(null); // Selected job for application
  const [tailoredResumeUrl, setTailoredResumeUrl] = useState(""); // URL for the tailored resume

  // Fetch job listings from Adzuna API
  useEffect(() => {
    const fetchJobs = async () => {
      try {
        setLoading(true);
        const appId = "YOUR_ADZUNA_APP_ID"; // Replace with your Adzuna app ID
        const appKey = "YOUR_ADZUNA_APP_KEY"; // Replace with your Adzuna app key
        const response = await axios.get(
          `https://api.adzuna.com/v1/api/jobs/us/search/1`,
          {
            params: {
              app_id: appId,
              app_key: appKey,
              what: "software engineer",
              where: "New York, NY",
              sort_by: "relevance",
            },
          }
        );
        setJobs(response.data.results);
      } catch (error) {
        console.error("Error fetching jobs:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchJobs();
  }, []);

  // Animation effect
  useEffect(() => {
    if (welcomeRef.current) {
      gsap.fromTo(
        welcomeRef.current,
        { y: 20, opacity: 0 },
        { y: 0, opacity: 1, duration: 0.8, ease: "power2.out" }
      );
    }

    if (rocketRef.current) {
      gsap.fromTo(
        rocketRef.current,
        { y: 20, x: -10, opacity: 0 },
        { y: 0, x: 0, opacity: 1, duration: 0.6, delay: 0.3, ease: "back.out" }
      );
      gsap.to(rocketRef.current, {
        y: "-=8",
        duration: 1.5,
        repeat: -1,
        yoyo: true,
        ease: "sine.inOut",
      });
    }

    const createShootingStar = () => {
      const starfield = document.querySelector(".starfield");
      if (!starfield) return;

      const star = document.createElement("div");
      star.className = "shooting-star";
      const startX = Math.random() * window.innerWidth;
      const startY = (Math.random() * window.innerHeight) / 3;
      star.style.left = `${startX}px`;
      star.style.top = `${startY}px`;
      const tx = Math.random() > 0.5 ? "300px" : "-300px";
      const ty = "300px";
      const rotation = Math.random() * 45 - 22.5;
      star.style.setProperty("--tx", tx);
      star.style.setProperty("--ty", ty);
      star.style.setProperty("--r", `${rotation}deg`);
      starfield.appendChild(star);

      setTimeout(() => {
        if (star.parentNode === starfield) {
          starfield.removeChild(star);
        }
      }, 1500);
    };

    const interval = setInterval(() => {
      createShootingStar();
    }, Math.random() * 3000 + 3000);

    return () => clearInterval(interval);
  }, []);

  // Simulate tailoring the resume
  const handleTailorResume = async (job) => {
    try {
      const response = await axios.post("/api/tailor-resume", {
        userId: user.id,
        jobDescription: job.description,
      });
      const resumeUrl = response.data.resumeUrl;
      setTailoredResumeUrl(resumeUrl);
      setSelectedJob(job);
      setShowWalkthrough(true);
    } catch (error) {
      console.error("Error tailoring resume:", error);
      alert("Failed to tailor resume. Please try again.");
    }
  };

  const handleDownloadResume = () => {
    if (tailoredResumeUrl) {
      const link = document.createElement("a");
      link.href = tailoredResumeUrl;
      link.download = "tailored-resume.pdf";
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  const handleRedirect = () => {
    if (selectedJob) {
      window.open(selectedJob.redirect_url, "_blank");
      setShowWalkthrough(false);
    }
  };

  return (
    <div className="page-wrapper">
      {/* Starfield Background */}
      <div className="starfield absolute inset-0 pointer-events-none">
        {[...Array(100)].map((_, i) => (
          <div
            key={i}
            className="star absolute bg-white rounded-full"
            style={{
              width: `${Math.random() * 2 + 1}px`,
              height: `${Math.random() * 2 + 1}px`,
              top: `${Math.random() * 100}%`,
              left: `${Math.random() * 100}%`,
              opacity: Math.random() * 0.5 + 0.2,
              animation: `twinkle ${Math.random() * 3 + 2}s infinite`,
            }}
          />
        ))}
      </div>

      <header>
        <Navbar />
      </header>

      <main className="cosmic-nebula">
        <div className="max-w-7xl mx-auto sm:px-6 lg:px-8">
          <div className="px-4 h-full flex flex-col">
            {/* Welcome Section */}
            <div className="section flex items-center" ref={welcomeRef}>
              <div>
                <h1 className="cosmic-page-title text-3xl">
                  Welcome back,{" "}
                  <span className="cosmic-text-gradient">{user?.username}</span>!
                </h1>
                <p className="mt-1 text-gray-300">
                  Navigate your career journey with AI-powered tools and insights.
                </p>
              </div>
              <div className="ml-4" ref={rocketRef}>
                <div className="bg-[hsl(260,100%,60%)] bg-opacity-20 p-3 rounded-full cosmic-glow">
                  <Rocket size={24} className="text-white" />
                </div>
              </div>
            </div>

            {/* Dashboard Stats */}
            <div className="section">
              <DashboardStats />
            </div>

            {/* Job Interview and Recent Activity */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="md:col-span-1 flex flex-col h-full">
                <div className="section flex-1">
                  <JobInterviewAvatar />
                </div>
              </div>
              <div className="md:col-span-1 flex flex-col h-full">
                <div className="section flex-1">
                  <RecentActivity />
                </div>
              </div>
            </div>

            {/* Job Listings Section */}
            <div className="section">
              <h2 className="text-2xl text-white mb-4">Recommended for You</h2>
              {loading ? (
                <p className="text-gray-300">Loading jobs...</p>
              ) : jobs.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {jobs.map((job) => {
                    const userSkills = ["JavaScript", "React", "Node.js"];
                    const jobSkills = job.category?.map((cat) => cat.tag) || [];
                    const matchPercentage = Math.round(
                      (userSkills.filter((skill) => jobSkills.includes(skill)).length /
                        jobSkills.length) *
                        100
                    );

                    return (
                      <div
                        key={job.id}
                        className="p-4 rounded-lg bg-gradient-to-br from-gray-700 to-gray-800 text-white"
                      >
                        <h3 className="text-xl font-semibold">{job.title}</h3>
                        <p className="text-gray-300">
                          {job.company.display_name} • {job.location.display_name}
                        </p>
                        <p className="mt-2 text-gray-400">
                          {job.description.slice(0, 100)}...
                        </p>
                        <p className="mt-2 text-sm text-gray-500">
                          Posted: {new Date(job.created).toLocaleDateString()}
                        </p>
                        <p className="mt-2 text-green-400">{matchPercentage}% Match</p>
                        <div className="mt-4 flex gap-2">
                          <button
                            className="px-4 py-2 bg-gray-600 rounded-lg hover:bg-gray-700"
                            onClick={() => handleTailorResume(job)}
                          >
                            AI-Tailor Resume
                          </button>
                          <button
                            className="px-4 py-2 bg-blue-600 rounded-lg hover:bg-blue-700"
                            onClick={() => {
                              setSelectedJob(job);
                              setShowWalkthrough(true);
                            }}
                          >
                            Apply Now
                          </button>
                        </div>
                      </div>
                    );
                  })}
                </div>
              ) : (
                <p className="text-gray-300">No jobs found.</p>
              )}
            </div>

            {/* Walkthrough Modal */}
            {showWalkthrough && selectedJob && (
              <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                <div className="bg-gradient-to-br from-gray-800 to-gray-900 p-6 rounded-lg text-white max-w-lg w-full shadow-lg">
                  <h3 className="text-xl font-semibold mb-4">
                    Let’s Get You Ready to Apply!
                  </h3>
                  <p className="mb-4">
                    You’re about to apply for <strong>{selectedJob.title}</strong> at{" "}
                    <strong>{selectedJob.company.display_name}</strong>. Follow these steps:
                  </p>
                  <ol className="list-decimal list-inside mb-4 space-y-2">
                    <li>
                      <strong>Download Your Tailored Resume:</strong>{" "}
                      {tailoredResumeUrl ? (
                        <button
                          onClick={handleDownloadResume}
                          className="text-blue-400 underline hover:text-blue-500"
                        >
                          Click here to download
                        </button>
                      ) : (
                        <span className="text-gray-400">
                          Tailor your resume first using the "AI-Tailor Resume" button.
                        </span>
                      )}
                    </li>
                    <li>
                      <strong>Visit the Application Page:</strong> We’ll redirect you to the
                      company’s application page in a new tab.
                    </li>
                    <li>
                      <strong>Upload Your Resume:</strong> On the application page, look for an
                      option to upload your resume (usually labeled "Upload Resume" or "Attach
                      File").
                    </li>
                    <li>
                      <strong>Complete the Application:</strong> Fill in any additional details
                      (e.g., cover letter, personal info) and submit your application.
                    </li>
                  </ol>
                  <div className="flex gap-4">
                    <button
                      className="px-4 py-2 bg-blue-600 rounded-lg hover:bg-blue-700"
                      onClick={handleRedirect}
                    >
                      Go to Application Page
                    </button>
                    <button
                      className="px-4 py-2 bg-gray-600 rounded-lg hover:bg-gray-700"
                      onClick={() => setShowWalkthrough(false)}
                    >
                      Cancel
                    </button>
                  </div>
                </div>
              </div>
            )}

            {/* Job Search Progress */}
            <div className="section">
              <JobSearchProgress />
            </div>
          </div>
        </div>
      </main>

      <footer>
        {/* Add a footer component if needed */}
      </footer>
    </div>
  );
}

Step 3: Update Other Pages (Resume Builder, Job Finder, Subscription Management)
Apply the same spacing and layout principles to the other pages. Here’s how you can structure the ResumeBuilder component (based on the second image):
jsx
import { useState } from "react";
import Navbar from "@/components/navbar";

export default function ResumeBuilder() {
  const [summaryLength, setSummaryLength] = useState("medium");

  return (
    <div className="page-wrapper">
      <div className="starfield absolute inset-0 pointer-events-none">
        {[...Array(100)].map((_, i) => (
          <div
            key={i}
            className="star absolute bg-white rounded-full"
            style={{
              width: `${Math.random() * 2 + 1}px`,
              height: `${Math.random() * 2 + 1}px`,
              top: `${Math.random() * 100}%`,
              left: `${Math.random() * 100}%`,
              opacity: Math.random() * 0.5 + 0.2,
              animation: `twinkle ${Math.random() * 3 + 2}s infinite`,
            }}
          />
        ))}
      </div>

      <header>
        <Navbar />
      </header>

      <main className="cosmic-nebula">
        <div className="max-w-7xl mx-auto sm:px-6 lg:px-8">
          <div className="px-4 h-full flex flex-col">
            {/* Upload Section */}
            <div className="section">
              <p className="text-gray-300 mb-4">
                Upload PDF, DOCX, or TXT, or fill out the form manually below
              </p>
            </div>

            {/* Form and AI Assistant */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              {/* Form Section */}
              <div className="md:col-span-2">
                <div className="section">
                  <h2 className="text-xl font-semibold mb-4">Personal Information</h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-gray-300 mb-1">First Name</label>
                      <input
                        type="text"
                        className="w-full p-2 rounded-lg bg-gray-700 text-white"
                      />
                    </div>
                    <div>
                      <label className="block text-gray-300 mb-1">Last Name</label>
                      <input
                        type="text"
                        className="w-full p-2 rounded-lg bg-gray-700 text-white"
                      />
                    </div>
                    <div>
                      <label className="block text-gray-300 mb-1">Email</label>
                      <input
                        type="email"
                        className="w-full p-2 rounded-lg bg-gray-700 text-white"
                      />
                    </div>
                    <div>
                      <label className="block text-gray-300 mb-1">Phone</label>
                      <input
                        type="tel"
                        className="w-full p-2 rounded-lg bg-gray-700 text-white"
                      />
                    </div>
                  </div>

                  <div className="mt-6">
                    <label className="block text-gray-300 mb-1">Professional Headline</label>
                    <input
                      type="text"
                      placeholder="e.g., Senior Software Engineer | Front-End Specialist | React & TypeScript Expert"
                      className="w-full p-2 rounded-lg bg-gray-700 text-white"
                    />
                  </div>

                  <div className="mt-6">
                    <label className="block text-gray-300 mb-1">Professional Summary</label>
                    <textarea
                      placeholder="Write a concise summary of your professional background, key skills, and achievements."
                      className="w-full p-2 rounded-lg bg-gray-700 text-white h-32"
                    />
                    <ul className="mt-2 text-gray-400 text-sm list-disc list-inside">
                      <li>Keep it concise (3-5 sentences)</li>
                      <li>Highlight your most relevant experience</li>
                      <li>Focus on achievements rather than responsibilities</li>
                      <li>Include keywords relevant to your target position</li>
                    </ul>
                  </div>
                </div>
              </div>

              {/* AI Assistant Section */}
              <div className="md:col-span-1">
                <div className="section">
                  <h2 className="text-xl font-semibold mb-4">AI Resume Assistant</h2>
                  <div className="mb-4">
                    <h3 className="text-lg font-medium mb-2">Professional Summary Suggestions</h3>
                    <div className="flex gap-2 mb-2">
                      <button
                        className={`px-3 py-1 rounded-lg ${
                          summaryLength === "short"
                            ? "bg-blue-600"
                            : "bg-gray-600 hover:bg-gray-500"
                        }`}
                        onClick={() => setSummaryLength("short")}
                      >
                        Short
                      </button>
                      <button
                        className={`px-3 py-1 rounded-lg ${
                          summaryLength === "medium"
                            ? "bg-blue-600"
                            : "bg-gray-600 hover:bg-gray-500"
                        }`}
                        onClick={() => setSummaryLength("medium")}
                      >
                        Medium
                      </button>
                      <button
                        className={`px-3 py-1 rounded-lg ${
                          summaryLength === "long"
                            ? "bg-blue-600"
                            : "bg-gray-600 hover:bg-gray-500"
                        }`}
                        onClick={() => setSummaryLength("long")}
                      >
                        Long
                      </button>
                    </div>
                    <p className="text-gray-300 mb-2">Available Suggestions:</p>
                    <div className="space-y-4">
                      <div>
                        <p className="text-gray-400">
                          Forward-thinking professional with a strategic mindset and demonstrated
                          success in delivering impactful results...
                        </p>
                        <button className="text-blue-400 hover:text-blue-500">+ Add</button>
                      </div>
                      <div>
                        <p className="text-gray-400">
                          Seasoned professional with extensive experience driving and operational
                          excellence...
                        </p>
                        <button className="text-blue-400 hover:text-blue-500">+ Add</button>
                      </div>
                      <div>
                        <p className="text-gray-400">
                          Results-driven professional with a comprehensive background in developing
                          and implementing strategic initiatives...
                        </p>
                        <button className="text-blue-400 hover:text-blue-500">+ Add</button>
                      </div>
                    </div>
                  </div>
                  <button className="w-full px-4 py-2 bg-gray-600 rounded-lg hover:bg-gray-700">
                    Refresh Suggestions
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>

      <footer>{/* Add a footer component if needed */}</footer>
    </div>
  );
}

Step 4: Apply to Job Finder and Subscription Management
Job Finder (third image):
Use the same page-wrapper structure.

Apply the section class to the "Search & Filters" and "AI-Powered Job Matching" sections.

Use gap-4 for the filter inputs and mb-6 between sections.
Subscription Management (fourth image):
Use the page-wrapper structure.

Apply the section class to each plan card.

Use grid grid-cols-1 md:grid-cols-3 gap-6 for the plan cards to ensure consistent spacing.
Specific Fixes for Each Screen
1. Home Page (First Image)
Spacing Issue: The gap between "Suggested Actions" and "Daily Tip" is too large.

Fix: Use gap-4 for the flex layout in the RecentActivity component:
jsx
// In RecentActivity.jsx
<div className="section">
  <h2 className="text-xl font-semibold mb-4">Recent Activity</h2>
  <div className="mb-4">
    <h3 className="text-lg">Activity Timeline</h3>
    <p className="text-gray-300">No recent activity found...</p>
  </div>
  <div className="flex flex-col gap-4">
    <div className="p-4 rounded-lg bg-gradient-to-br from-gray-700 to-gray-800">
      <h3 className="text-lg font-medium">Create Your First Resume</h3>
      <p className="text-gray-300">Build a professional resume...</p>
      <button className="mt-2 px-4 py-2 bg-blue-600 rounded-lg hover:bg-blue-700">
        Get Started
      </button>
    </div>
    <div className="p-4 rounded-lg bg-gradient-to-br from-gray-700 to-gray-800">
      <h3 className="text-lg font-medium">Explore Job Matches</h3>
      <p className="text-gray-300">Discover jobs that match...</p>
      <button className="mt-2 px-4 py-2 bg-blue-600 rounded-lg hover:bg-blue-700">
        Explore Jobs
      </button>
    </div>
    <div className="p-4 rounded-lg bg-gradient-to-br from-gray-700 to-gray-800">
      <h3 className="text-lg font-medium">Daily Tip: Resume Optimization</h3>
      <p className="text-gray-300">Tailor your resume for each job...</p>
    </div>
  </div>
</div>

2. Resume Builder (Second Image)
Spacing Issue: The form fields and AI assistant suggestions are too tightly packed.

Fix: Use gap-4 for the form grid and space-y-4 for the suggestions list (already applied in the code above).
3. Job Finder (Third Image)
Spacing Issue: The filter inputs are too close together.

Fix: Use gap-4 for the filter grid:
jsx
// In JobFinder.jsx
<div className="section">
  <h2 className="text-xl font-semibold mb-4">Search & Filters</h2>
  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
    <div>
      <label className="block text-gray-300 mb-1">Job Title</label>
      <input
        type="text"
        placeholder="e.g., Software Engineer"
        className="w-full p-2 rounded-lg bg-gray-700 text-white"
      />
    </div>
    <div>
      <label className="block text-gray-300 mb-1">Location</label>
      <input
        type="text"
        placeholder="e.g., New York, NY"
        className="w-full p-2 rounded-lg bg-gray-700 text-white"
      />
    </div>
    <div>
      <label className="block text-gray-300 mb-1">Job Type</label>
      <select className="w-full p-2 rounded-lg bg-gray-700 text-white">
        <option>All Types</option>
      </select>
    </div>
    {/* Add more filters as needed */}
  </div>
  <button className="mt-4 px-4 py-2 bg-blue-600 rounded-lg hover:bg-blue-700">
    Apply Filters
  </button>
</div>

4. Subscription Management (Fourth Image)
Spacing Issue: The plan cards are too close together.

Fix: Use gap-6 for the grid layout (already applied in the description above).
Additional Tips for Cohesion
Consistent Typography:
Use a consistent font size and weight for headings (text-xl font-semibold for section titles, text-lg font-medium for subheadings).

Use text-gray-300 for secondary text and text-white for primary text.
Consistent Colors:
Use the same gradient for all section backgrounds (bg-gradient-to-br from-gray-800 to-gray-900).

Use bg-blue-600 hover:bg-blue-700 for primary buttons.
Header/Footer Integration:
Ensure the Navbar component has a transparent background (bg-transparent) to blend with the cosmic gradient.

Add a footer component if needed, with the same transparent background.
Viewport Height:
The page-wrapper ensures the content takes up the full viewport height, preventing gaps at the bottom.
Result
Spacing: All sections now have consistent padding (p-6), margins (mb-6), and gaps (gap-4 or gap-6 for grids).

Background: The cosmic gradient spans the entire viewport, eliminating color breaks at the top and bottom.

Layout: The page-wrapper ensures a consistent structure across all pages, with proper spacing for the header, main content, and footer.
If you need help applying these changes to other pages or fine-tuning the design further, let me know!
