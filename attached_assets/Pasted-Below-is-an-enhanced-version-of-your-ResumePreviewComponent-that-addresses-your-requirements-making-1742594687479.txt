Below is an enhanced version of your ResumePreviewComponent that addresses your requirements: making it visually appealing and user-friendly, adjusting scroll logic to show the resume on separate pages, adding a toggle mode to display pages side by side, and optimizing the smart adjust feature. I'll explain the changes and provide the updated code.

Key Enhancements
Improved Scroll Logic and Pagination
Instead of conditionally rendering only one page with a display: none hack, the component now renders all pages and uses CSS transforms to show the correct page in "single" mode or all pages in "side-by-side" mode.
Pages are split based on the actual content height, measured dynamically using a hidden div and a ref.
Toggle Mode for Single vs. Side-by-Side Views
Added a viewMode state to toggle between "single" (one page at a time) and "sideBySide" (all pages next to each other).
In "single" mode, navigation buttons control the current page. In "sideBySide" mode, all pages are visible with horizontal scrolling if needed.
Optimized Smart Adjust Feature
Replaced the heuristic-based page estimation (e.g., items per page) with a dynamic calculation using the actual rendered content height divided by the A4 page height (841px).
This ensures accurate pagination tailored to the resume's content.
Visual Appeal and User-Friendliness
Added page numbers and subtle shadows/borders to each page for clarity.
Enhanced the layout with proper scaling and spacing.
Made controls (zoom, toggle, navigation) intuitive and visually consistent.
Zoom Functionality
Zoom is applied consistently across both view modes, scaling the entire preview container or individual pages as needed.
Updated Code
Hereâ€™s the enhanced ResumePreviewComponent:

tsx

Collapse

Unwrap

Copy
import React, { useEffect, useState, useRef } from "react";
import { cn } from "@/lib/utils";
import { useToast } from "@/hooks/use-toast";
import {
  Resume,
  ProfessionalTemplate,
  CreativeTemplate,
  ExecutiveTemplate,
  ModernTemplate,
  MinimalTemplate,
  IndustryTemplate,
  BoldTemplate,
} from "@/components/resume-template";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import {
  Download,
  ChevronLeft,
  ChevronRight,
  FileText,
  Printer,
  Eye,
} from "lucide-react";

interface ResumePreviewComponentProps {
  resume: Resume;
  onTemplateChange: (template: string) => void;
  onDownload?: () => void;
}

/**
 * Component for displaying a preview of the resume with template selection,
 * pagination, and view mode toggle.
 */
export default function ResumePreviewComponent({
  resume,
  onTemplateChange,
  onDownload,
}: ResumePreviewComponentProps) {
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [previewScale, setPreviewScale] = useState(0.8);
  const [viewMode, setViewMode] = useState<"single" | "sideBySide">("single");
  const contentRef = useRef<HTMLDivElement>(null);
  const { toast } = useToast();

  // Measure total content height to calculate number of pages
  useEffect(() => {
    if (contentRef.current) {
      const height = contentRef.current.scrollHeight;
      const pageHeight = 841; // A4 height in pixels
      setTotalPages(Math.ceil(height / pageHeight));
      setCurrentPage(1); // Reset to first page when resume changes
    }
  }, [resume]);

  // Navigation handlers
  const goToNextPage = () => {
    if (currentPage < totalPages) setCurrentPage((prev) => prev + 1);
  };

  const goToPrevPage = () => {
    if (currentPage > 1) setCurrentPage((prev) => prev - 1);
  };

  // Zoom handlers
  const zoomIn = () => setPreviewScale((prev) => Math.min(prev + 0.1, 1.2));
  const zoomOut = () => setPreviewScale((prev) => Math.max(prev - 0.1, 0.5));

  // Render the selected template
  const renderTemplate = () => {
    switch (resume.template) {
      case "professional":
        return <ProfessionalTemplate resume={resume} />;
      case "creative":
        return <CreativeTemplate resume={resume} />;
      case "executive":
        return <ExecutiveTemplate resume={resume} />;
      case "modern":
        return <ModernTemplate resume={resume} />;
      case "minimal":
        return <MinimalTemplate resume={resume} />;
      case "industry":
        return <IndustryTemplate resume={resume} />;
      case "bold":
        return <BoldTemplate resume={resume} />;
      default:
        return <ProfessionalTemplate resume={resume} />;
    }
  };

  // Handle print/save PDF
  const handlePrint = () => {
    if (onDownload) {
      onDownload();
    } else {
      toast({
        title: "Print functionality",
        description: "Opening the print dialog to save as PDF",
      });
      window.print();
    }
  };

  // Render the resume pages based on view mode
  const renderPages = () => {
    if (viewMode === "single") {
      return (
        <div
          className="resume-preview-wrapper border border-blue-900/50 bg-white shadow-xl"
          style={{
            width: `${595 * previewScale}px`,
            height: `${841 * previewScale}px`,
            overflow: "hidden",
          }}
        >
          <div
            style={{
              transform: `scale(${previewScale}) translateY(-${(currentPage - 1) * 841}px)`,
              transformOrigin: "top left",
              width: "595px",
              height: `${totalPages * 841}px`,
            }}
          >
            {renderTemplate()}
          </div>
          <div className="absolute bottom-2 right-2 text-xs text-gray-500">
            Page {currentPage} of {totalPages}
          </div>
        </div>
      );
    } else {
      // Side-by-side mode
      return (
        <div
          className="flex flex-row gap-4 overflow-x-auto pb-4"
          style={{
            width: "100%",
            maxWidth: `${(595 * previewScale + 16) * totalPages}px`, // 16px gap
          }}
        >
          {Array.from({ length: totalPages }, (_, index) => (
            <div
              key={index}
              className="resume-page border border-gray-200 shadow-lg relative flex-shrink-0"
              style={{
                width: `${595 * previewScale}px`,
                height: `${841 * previewScale}px`,
                overflow: "hidden",
              }}
            >
              <div
                style={{
                  transform: `scale(${previewScale}) translateY(-${index * 841}px)`,
                  transformOrigin: "top left",
                  width: "595px",
                  height: `${totalPages * 841}px`,
                }}
              >
                {renderTemplate()}
              </div>
              <div className="absolute bottom-2 right-2 text-xs text-gray-500">
                Page {index + 1}
              </div>
            </div>
          ))}
        </div>
      );
    }
  };

  return (
    <div className="flex flex-col space-y-4">
      {/* Hidden div to measure content height */}
      <div
        ref={contentRef}
        style={{ position: "absolute", visibility: "hidden", width: "595px" }}
      >
        {renderTemplate()}
      </div>

      {/* Template selection tabs */}
      <div className="bg-[rgba(10,15,25,0.5)] p-3 rounded-lg backdrop-blur-lg border border-indigo-800/30">
        <Tabs
          defaultValue={resume.template}
          onValueChange={onTemplateChange}
          className="w-full"
        >
          <TabsList className="w-full grid grid-cols-4 md:grid-cols-7 h-auto p-1 bg-[rgba(30,40,80,0.3)]">
            {[
              "professional",
              "modern",
              "minimal",
              "creative",
              "executive",
              "industry",
              "bold",
            ].map((template) => (
              <TabsTrigger
                key={template}
                value={template}
                className={cn(
                  "py-1 px-2 text-xs capitalize hover:text-blue-300 data-[state=active]:bg-blue-900/50",
                  "data-[state=active]:text-blue-50 data-[state=active]:shadow-none"
                )}
              >
                {template}
              </TabsTrigger>
            ))}
          </TabsList>
        </Tabs>
      </div>

      {/* Preview and controls */}
      <div className="relative flex flex-col items-center">
        {/* Navigation controls (single mode only) */}
        {viewMode === "single" && totalPages > 1 && (
          <div className="absolute top-2 left-2 z-10 flex items-center gap-2 bg-blue-900/70 p-1 rounded-md">
            <Button
              variant="ghost"
              size="icon"
              className="h-6 w-6 bg-transparent hover:bg-blue-800/50 text-gray-300"
              onClick={goToPrevPage}
              disabled={currentPage === 1}
            >
              <ChevronLeft className="h-4 w-4" />
            </Button>
            <span className="text-xs text-gray-300">
              {currentPage} / {totalPages}
            </span>
            <Button
              variant="ghost"
              size="icon"
              className="h-6 w-6 bg-transparent hover:bg-blue-800/50 text-gray-300"
              onClick={goToNextPage}
              disabled={currentPage === totalPages}
            >
              <ChevronRight className="h-4 w-4" />
            </Button>
          </div>
        )}

        {/* Zoom and view mode controls */}
        <div className="absolute top-2 right-2 z-10 flex items-center gap-2 bg-blue-900/70 p-1 rounded-md">
          <Button
            variant="ghost"
            size="icon"
            className="h-6 w-6 bg-transparent hover:bg-blue-800/50 text-gray-300"
            onClick={zoomOut}
          >
            <span className="text-xs">-</span>
          </Button>
          <span className="text-xs text-gray-300">
            {Math.round(previewScale * 100)}%
          </span>
          <Button
            variant="ghost"
            size="icon"
            className="h-6 w-6 bg-transparent hover:bg-blue-800/50 text-gray-300"
            onClick={zoomIn}
          >
            <span className="text-xs">+</span>
          </Button>
          <Button
            variant="ghost"
            className="text-xs text-gray-300 hover:bg-blue-800/50"
            onClick={() =>
              setViewMode(viewMode === "single" ? "sideBySide" : "single")
            }
          >
            {viewMode === "single" ? "All Pages" : "Single Page"}
          </Button>
        </div>

        {/* Resume preview */}
        <div className="mt-4 mb-2">{renderPages()}</div>

        {/* Action buttons */}
        <div className="flex gap-2 mt-2">
          <Button
            variant="outline"
            className="bg-[rgba(30,40,70,0.6)] text-blue-300 hover:text-blue-200 hover:bg-blue-800/50 border-blue-700/30"
            onClick={handlePrint}
          >
            <Printer className="h-4 w-4 mr-2" />
            Print / Save PDF
          </Button>
          <Button
            variant="outline"
            className="bg-[rgba(30,40,70,0.6)] text-blue-300 hover:text-blue-200 hover:bg-blue-800/50 border-blue-700/30"
            onClick={onDownload}
            disabled={!onDownload}
          >
            <Download className="h-4 w-4 mr-2" />
            Download
          </Button>
          <Button
            variant="outline"
            className="bg-[rgba(30,40,70,0.6)] text-blue-300 hover:text-blue-200 hover:bg-blue-800/50 border-blue-700/30"
            onClick={() => window.open("/preview", "_blank")}
          >
            <Eye className="h-4 w-4 mr-2" />
            Full Preview
          </Button>
        </div>
      </div>
    </div>
  );
}
Explanation of Changes
1. Dynamic Pagination
What Changed: Added a hidden div with a ref (contentRef) to render the full resume content and measure its scrollHeight. The totalPages is calculated as Math.ceil(height / 841) where 841px is the A4 page height.
Why: This ensures pagination reflects the actual content length, improving the "smart adjust" feature over the previous heuristic (e.g., 3 items per page).
2. View Mode Toggle
What Changed: Introduced viewMode state and a toggle button in the control bar. The renderPages function switches between "single" and "sideBySide" layouts.
Single Mode: Shows one page at a time using translateY to shift the content based on currentPage. Navigation buttons are visible.
Side-by-Side Mode: Displays all pages horizontally in a flex row with overflow-x: auto for scrolling if needed. Each page uses translateY to show its portion of the content.
Why: Provides flexibility to view the resume as individual pages or all at once, enhancing user-friendliness.
3. Scroll Logic
What Changed: In "single" mode, the full content is rendered in a tall container (height: totalPages * 841px), and translateY(-(currentPage - 1) * 841px) shifts it to show the current page within a fixed viewport. In "sideBySide" mode, each page is a separate div with its own translateY.
Why: This avoids manually splitting content and leverages CSS transforms for smooth, accurate page display.
4. Visual Enhancements
Page Numbers: Added a small "Page X of Y" or "Page X" label at the bottom-right of each page.
Styling: Added shadow-lg and border to pages in "sideBySide" mode for visual separation. Used a consistent gap-4 for spacing.
Controls: Styled the toggle button to match zoom controls for a cohesive look.
Why: Improves readability and makes the preview feel polished and professional.
5. Zoom Handling
What Changed: Scaling is applied via transform: scale(previewScale) with adjusted container dimensions (width: 595 * previewScale, height: 841 * previewScale). In "single" mode, scaling is on the viewport; in "sideBySide", each page is scaled individually.
Why: Ensures zoom works seamlessly across both modes without distorting pagination.
6. User-Friendliness
Navigation: Hidden in "sideBySide" mode since all pages are visible.
Responsiveness: The "sideBySide" container uses overflow-x: auto to handle wide content gracefully.
Why: Reduces clutter and adapts to different screen sizes or resume lengths.
Testing Recommendations
Short Resume: Verify totalPages is 1 and both modes show a single page.
Long Resume: Test with content exceeding 2-3 pages to ensure pagination and scrolling work.
Zoom: Check that scaling from 50% to 120% maintains layout integrity.
Template Switching: Ensure height measurement updates when changing templates.