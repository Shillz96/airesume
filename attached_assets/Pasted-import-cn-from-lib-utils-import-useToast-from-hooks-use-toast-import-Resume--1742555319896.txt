import { cn } from "@/lib/utils";
import { useToast } from "@/hooks/use-toast";
import { Resume } from "@/components/resume-template";
import {
  ProfessionalTemplate,
  CreativeTemplate,
  ExecutiveTemplate,
  ModernTemplate,
  MinimalTemplate,
  IndustryTemplate,
  BoldTemplate,
  TemplatePreviewProfessional,
  TemplatePreviewCreative,
  TemplatePreviewExecutive,
  TemplatePreviewModern,
  TemplatePreviewMinimal,
  TemplatePreviewIndustry,
  TemplatePreviewBold,
} from "@/components/resume-template";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { RichTextEditor } from "@/components/rich-text-editor";
import {
  Minus,
  Plus,
  Maximize2,
  Download,
  FileText,
  Check,
  Zap,
  RefreshCw,
  Printer,
} from "lucide-react";
import { Badge } from "@/components/ui/badge";
import React, { useState, useRef, useEffect } from "react";

function ResumePreviewComponent({
  resume,
  onTemplateChange,
}: {
  resume: Resume;
  onTemplateChange: (template: string) => void;
}) {
  const [scale, setScale] = useState(1.0);
  const [isFullScreen, setIsFullScreen] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [isAutoAdjusting, setIsAutoAdjusting] = useState(false);
  const [editedResume, setEditedResume] = useState<Resume>(resume);
  const [fontScale, setFontScale] = useState(1);
  const [spacingScale, setSpacingScale] = useState(1);
  const previewRef = useRef<HTMLDivElement>(null);
  const resumeContainerRef = useRef<HTMLDivElement>(null);
  const { toast } = useToast();

  // Calculate initial scale to fit content within viewport
  useEffect(() => {
    const adjustScale = () => {
      if (!resumeContainerRef.current || !previewRef.current) return;

      const containerHeight = resumeContainerRef.current.clientHeight;
      const contentHeight = 297 * 3.78; // A4 height in pixels (297mm * 3.78px/mm at 96dpi)
      const scaleFactor = Math.min(containerHeight / contentHeight, 1);
      setScale(scaleFactor);
    };

    adjustScale();
    window.addEventListener("resize", adjustScale);
    return () => window.removeEventListener("resize", adjustScale);
  }, [resume]);

  // Generate PDF for download
  const downloadResume = async () => {
    try {
      setScale(1.0); // Reset scale for proper PDF generation
      setTimeout(() => {
        window.print(); // Use print dialog as fallback
        toast({
          title: "Print Dialog Opened",
          description: "Use your browser's print dialog to save as PDF.",
        });
      }, 100);
    } catch (error) {
      console.error("Error preparing PDF download:", error);
      window.print();
      toast({
        title: "Error",
        description: "Failed to generate PDF. Using print dialog instead.",
        variant: "destructive",
      });
    }
  };

  // Toggle fullscreen mode
  const toggleFullScreen = () => {
    setIsFullScreen(!isFullScreen);
    if (!isFullScreen) setScale(1.0); // Reset scale when entering fullscreen
  };

  // Toggle edit mode
  const toggleEdit = () => {
    setIsEditing(!isEditing);
    if (isEditing) {
      onTemplateChange(editedResume.template);
      const event = new CustomEvent("resumeEdited", { detail: { resume: editedResume } });
      document.dispatchEvent(event);
    }
  };

  // Handle field changes in edit mode
  const handleFieldChange = (section: string, field: string, value: string, index?: number) => {
    setEditedResume((prev) => {
      const newResume = { ...prev };
      if (section === "personalInfo") {
        newResume.personalInfo = { ...newResume.personalInfo, [field]: value };
      } else if (section === "experience" && typeof index === "number") {
        newResume.experience[index] = { ...newResume.experience[index], [field]: value };
      } else if (section === "education" && typeof index === "number") {
        newResume.education[index] = { ...newResume.education[index], [field]: value };
      } else if (section === "skills" && typeof index === "number") {
        newResume.skills[index] = { ...newResume.skills[index], [field]: value };
      }
      return newResume;
    });
  };

  // Auto-adjust to fit content on one page
  const autoAdjust = () => {
    setIsAutoAdjusting(true);
    setTimeout(() => {
      if (!previewRef.current) {
        setIsAutoAdjusting(false);
        return;
      }
      const contentHeight = previewRef.current.scrollHeight;
      const containerHeight = 297 * 3.78; // A4 height in pixels
      const heightRatio = containerHeight / contentHeight;

      if (heightRatio < 1) {
        const newFontScale = Math.max(0.7, heightRatio * 0.95);
        const newSpacingScale = Math.max(0.7, heightRatio * 0.9);
        setFontScale(newFontScale);
        setSpacingScale(newSpacingScale);
        toast({
          title: "Smart Fit Applied",
          description: `Adjusted to ${Math.round(newFontScale * 100)}% scale.`,
        });
      } else {
        setFontScale(1);
        setSpacingScale(1);
        toast({
          title: "Smart Fit Reset",
          description: "Content fits on one page at default size.",
        });
      }
      setIsAutoAdjusting(false);
    }, 500);
  };

  // Reset all adjustments
  const resetAdjustments = () => {
    setScale(1.0);
    setFontScale(1);
    setSpacingScale(1);
    toast({
      title: "Reset Complete",
      description: "All sizing adjustments have been reset to default.",
    });
  };

  useEffect(() => {
    setEditedResume(resume);
  }, [resume]);

  return (
    <div className="space-y-4">
      {/* Controls */}
      <div className="flex flex-wrap justify-between items-center gap-4">
        <div className="flex items-center gap-2">
          <h3 className="text-lg font-medium text-white">Resume Preview</h3>
          <Badge variant="outline" className="text-blue-300 border-blue-300/30">
            {Math.round(scale * 100)}%
          </Badge>
        </div>
        <div className="flex flex-wrap gap-2">
          <Button
            variant="outline"
            size="sm"
            onClick={() => setScale(Math.max(0.5, scale - 0.1))}
            disabled={scale <= 0.5}
            className="text-white border-white/20 hover:bg-white/10"
            title="Zoom out (minimum 50%)"
          >
            <Minus className="h-4 w-4" />
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={() => setScale(Math.min(1.5, scale + 0.1))}
            disabled={scale >= 1.5}
            className="text-white border-white/20 hover:bg-white/10"
            title="Zoom in (maximum 150%)"
          >
            <Plus className="h-4 w-4" />
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={autoAdjust}
            disabled={isAutoAdjusting}
            className="flex items-center gap-1 text-white border-white/20 hover:bg-white/10"
            title="Adjust font size and spacing to fit content on one page"
          >
            {isAutoAdjusting ? (
              <Zap className="h-4 w-4 animate-spin" />
            ) : (
              <Zap className="h-4 w-4" />
            )}
            Smart Fit
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={resetAdjustments}
            className="flex items-center gap-1 text-white border-white/20 hover:bg-white/10"
            title="Reset all sizing adjustments to default"
          >
            <RefreshCw className="h-4 w-4" />
            Reset
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={toggleFullScreen}
            className="flex items-center gap-1 text-white border-white/20 hover:bg-white/10"
            title={isFullScreen ? "Exit full screen mode" : "Enter full screen mode"}
          >
            <Maximize2 className="h-4 w-4" />
            {isFullScreen ? "Exit" : "Full Screen"}
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={toggleEdit}
            className="flex items-center gap-1 text-white border-white/20 hover:bg-white/10"
            title={isEditing ? "Save changes" : "Edit resume directly"}
          >
            {isEditing ? <Check className="h-4 w-4" /> : <FileText className="h-4 w-4" />}
            {isEditing ? "Save" : "Edit"}
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={downloadResume}
            className="flex items-center gap-1 text-white border-white/20 hover:bg-white/10"
            title="Download as PDF using print dialog"
          >
            <Download className="h-4 w-4" />
            PDF
          </Button>
        </div>
      </div>

      {/* Resume Preview */}
      <div
        ref={resumeContainerRef}
        className={cn(
          "bg-white/5 backdrop-blur-sm rounded-xl border border-white/10 shadow-xl overflow-hidden",
          isFullScreen
            ? "fixed inset-0 z-50 m-0 p-8 bg-black/90"
            : "p-4 flex items-center justify-center min-h-[297mm]" // Ensure minimum height matches A4
        )}
      >
        <div
          ref={previewRef}
          className="transition-all duration-300 mx-auto bg-white shadow-lg"
          style={{
            transform: `scale(${scale})`,
            width: "210mm", // A4 width
            minHeight: "297mm", // A4 height
            transformOrigin: "top center",
            fontSize: `${fontScale * 100}%`,
            lineHeight: `${spacingScale * 1.5}`,
            overflowY: isEditing ? "auto" : "hidden",
            boxShadow: "0 8px 32px rgba(0, 0, 0, 0.25)", // Enhanced shadow
          }}
        >
          {isEditing ? (
            <div className="p-6 bg-white text-black h-full">
              {/* Personal Info Section */}
              <div className="mb-6 pb-4 border-b border-gray-200">
                <h2 className="text-2xl font-bold mb-2">
                  <Input
                    value={editedResume.personalInfo.firstName + " " + editedResume.personalInfo.lastName}
                    onChange={(e) => {
                      const [firstName, ...lastNameParts] = e.target.value.split(" ");
                      handleFieldChange("personalInfo", "firstName", firstName || "");
                      handleFieldChange("personalInfo", "lastName", lastNameParts.join(" ") || "");
                    }}
                    className="border border-gray-200 p-1 text-2xl font-bold w-full bg-white"
                  />
                </h2>
                <div className="flex flex-wrap gap-3 text-sm mb-4">
                  <div className="flex-1 min-w-[200px]">
                    <label className="text-xs text-gray-500 block mb-1">Email</label>
                    <Input
                      value={editedResume.personalInfo.email}
                      onChange={(e) => handleFieldChange("personalInfo", "email", e.target.value)}
                      className="border border-gray-200 p-1 text-sm w-full bg-white"
                    />
                  </div>
                  <div className="flex-1 min-w-[200px]">
                    <label className="text-xs text-gray-500 block mb-1">Phone</label>
                    <Input
                      value={editedResume.personalInfo.phone}
                      onChange={(e) => handleFieldChange("personalInfo", "phone", e.target.value)}
                      className="border border-gray-200 p-1 text-sm w-full bg-white"
                    />
                  </div>
                </div>
                <RichTextEditor
                  label="Professional Summary"
                  value={editedResume.personalInfo.summary}
                  onChange={(value) => handleFieldChange("personalInfo", "summary", value)}
                  placeholder="Professional Summary"
                  rows={4}
                />
              </div>
              {/* Experience Section */}
              <div className="mb-6">
                <h3 className="text-lg font-semibold mb-3">Experience</h3>
                {editedResume.experience.map((exp, index) => (
                  <div key={exp.id} className="mb-4 pb-4 border-b border-gray-100">
                    <div className="flex flex-wrap gap-3 mb-2">
                      <div className="flex-1 min-w-[200px]">
                        <label className="text-xs text-gray-500 block mb-1">Job Title</label>
                        <Input
                          value={exp.title}
                          onChange={(e) => handleFieldChange("experience", "title", e.target.value, index)}
                          className="border border-gray-200 p-1 text-sm w-full bg-white"
                        />
                      </div>
                      <div className="flex-1 min-w-[200px]">
                        <label className="text-xs text-gray-500 block mb-1">Company</label>
                        <Input
                          value={exp.company}
                          onChange={(e) => handleFieldChange("experience", "company", e.target.value, index)}
                          className="border border-gray-200 p-1 text-sm w-full bg-white"
                        />
                      </div>
                    </div>
                    <div className="flex flex-wrap gap-3 mb-2">
                      <div className="flex-1 min-w-[200px]">
                        <label className="text-xs text-gray-500 block mb-1">Start Date</label>
                        <Input
                          value={exp.startDate}
                          onChange={(e) => handleFieldChange("experience", "startDate", e.target.value, index)}
                          className="border border-gray-200 p-1 text-sm w-full bg-white"
                        />
                      </div>
                      <div className="flex-1 min-w-[200px]">
                        <label className="text-xs text-gray-500 block mb-1">End Date</label>
                        <Input
                          value={exp.endDate}
                          onChange={(e) => handleFieldChange("experience", "endDate", e.target.value, index)}
                          className="border border-gray-200 p-1 text-sm w-full bg-white"
                        />
                      </div>
                    </div>
                    <RichTextEditor
                      label="Description"
                      value={exp.description}
                      onChange={(value) => handleFieldChange("experience", "description", value, index)}
                      placeholder="Job description and achievements"
                      rows={3}
                    />
                  </div>
                ))}
              </div>
              {/* Skills Section */}
              <div className="mb-6">
                <h3 className="text-lg font-semibold mb-3">Skills</h3>
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-2">
                  {editedResume.skills.map((skill, index) => (
                    <div key={skill.id} className="border border-gray-200 rounded p-2">
                      <Input
                        value={skill.name}
                        onChange={(e) => handleFieldChange("skills", "name", e.target.value, index)}
                        className="border-none p-0 text-sm w-full"
                      />
                    </div>
                  ))}
                </div>
              </div>
              {/* Education Section */}
              <div className="mb-6">
                <h3 className="text-lg font-semibold mb-3">Education</h3>
                {editedResume.education.map((edu, index) => (
                  <div key={edu.id} className="mb-4 pb-4 border-b border-gray-100">
                    <div className="flex flex-wrap gap-3 mb-2">
                      <div className="flex-1 min-w-[200px]">
                        <label className="text-xs text-gray-500 block mb-1">Degree</label>
                        <Input
                          value={edu.degree}
                          onChange={(e) => handleFieldChange("education", "degree", e.target.value, index)}
                          className="border border-gray-200 p-1 text-sm w-full bg-white"
                        />
                      </div>
                      <div className="flex-1 min-w-[200px]">
                        <label className="text-xs text-gray-500 block mb-1">Institution</label>
                        <Input
                          value={edu.institution}
                          onChange={(e) => handleFieldChange("education", "institution", e.target.value, index)}
                          className="border border-gray-200 p-1 text-sm w-full bg-white"
                        />
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          ) : (
            <div className="bg-white text-black p-8">
              {resume.template === "creative" ? (
                <CreativeTemplate resume={resume} />
              ) : resume.template === "executive" ? (
                <ExecutiveTemplate resume={resume} />
              ) : resume.template === "modern" ? (
                <ModernTemplate resume={resume} />
              ) : resume.template === "minimal" ? (
                <MinimalTemplate resume={resume} />
              ) : resume.template === "industry" ? (
                <IndustryTemplate resume={resume} />
              ) : resume.template === "bold" ? (
                <BoldTemplate resume={resume} />
              ) : (
                <ProfessionalTemplate resume={resume} />
              )}
            </div>
          )}
        </div>
      </div>

      {/* Template Selection */}
      <div className="mt-8">
        <h3 className="text-lg font-medium mb-4 text-white">Choose a Template</h3>
        <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-4">
          {[
            { name: "professional", preview: TemplatePreviewProfessional },
            { name: "creative", preview: TemplatePreviewCreative },
            { name: "executive", preview: TemplatePreviewExecutive },
            { name: "modern", preview: TemplatePreviewModern },
            { name: "minimal", preview: TemplatePreviewMinimal },
            { name: "industry", preview: TemplatePreviewIndustry },
            { name: "bold", preview: TemplatePreviewBold },
          ].map((template) => (
            <div
              key={template.name}
              className={cn(
                "cursor-pointer p-3 rounded-lg transition-all",
                resume.template === template.name
                  ? "border-2 border-blue-500 shadow-lg"
                  : "border border-white/20"
              )}
              onClick={() => onTemplateChange(template.name)}
            >
              <div className="h-32 mb-2">
                <template.preview />
              </div>
              <h4 className="font-medium text-center text-white capitalize">{template.name}</h4>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

export default ResumePreviewComponent;